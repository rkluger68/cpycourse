{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Curious Python Course","text":"<p>Training material for your quest to become a snake charmer</p> <p>This course intends to get you acquainted with Python's essentials. You should be able to read &amp; understand a good part of Python code &amp; write your own with the information provided here.</p> <p>Deals with the 3.x generation of the species only.1</p> <pre><code>&gt;&gt;&gt; import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre> <p>Take a look at what this is all about first.</p> <p>Or, dive right into the tutorial.</p> <ol> <li> <p>Well, apart from the occasional nostalgic comment or reference, that is.\u00a0\u21a9</p> </li> </ol>"},{"location":"about/cpycourse-contributors/","title":"The Curious Python Course Contributors","text":"<p>https://github.com/hjoukl</p> <p>https://github.com/rkluger68</p>"},{"location":"about/curious-python-course/","title":"About","text":"<p>A curious Python course.</p> <p>Practical Python learning material as we see fit.</p>"},{"location":"about/legal/","title":"Legal","text":""},{"location":"about/legal/#legal","title":"Legal","text":"<p>All original content of this website is governed by its license.</p> <p>Snippets from Python documentation output e.g. in examples from interactive interpreter sessions represented here are subject to Python's license.</p> <p>Python and PyCon are trademarks or registered trademarks of the Python Software Foundation.</p> <p>All other trademarks mentioned on this website are the property of their respective owners.</p>"},{"location":"about/legal/#external-links","title":"External Links","text":"<p>External links are being provided as a convenience and for informational purposes only; they do not constitute an endorsement or an approval by the  cpycourse contributors of any of the products, services or opinions of the corporation or organization or individual.</p> <p>The cpycourse contributors bear no responsibility for the accuracy, legality or content of the external site or for that of its subsequent links. Contact the external site for answers to questions regarding its content.</p>"},{"location":"about/license/","title":"Mozilla Public License Version 2.0","text":""},{"location":"about/license/#1-definitions","title":"1. Definitions","text":"<p>1.1. \"Contributor\"     means each individual or legal entity that creates, contributes to     the creation of, or owns Covered Software.</p> <p>1.2. \"Contributor Version\"     means the combination of the Contributions of others (if any) used     by a Contributor and that particular Contributor's Contribution.</p> <p>1.3. \"Contribution\"     means Covered Software of a particular Contributor.</p> <p>1.4. \"Covered Software\"     means Source Code Form to which the initial Contributor has attached     the notice in Exhibit A, the Executable Form of such Source Code     Form, and Modifications of such Source Code Form, in each case     including portions thereof.</p> <p>1.5. \"Incompatible With Secondary Licenses\"     means</p> <pre><code>(a) that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n(b) that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n</code></pre> <p>1.6. \"Executable Form\"     means any form of the work other than Source Code Form.</p> <p>1.7. \"Larger Work\"     means a work that combines Covered Software with other material, in     a separate file or files, that is not Covered Software.</p> <p>1.8. \"License\"     means this document.</p> <p>1.9. \"Licensable\"     means having the right to grant, to the maximum extent possible,     whether at the time of the initial grant or subsequently, any and     all of the rights conveyed by this License.</p> <p>1.10. \"Modifications\"     means any of the following:</p> <pre><code>(a) any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n(b) any new file in Source Code Form that contains any Covered\n    Software.\n</code></pre> <p>1.11. \"Patent Claims\" of a Contributor     means any patent claim(s), including without limitation, method,     process, and apparatus claims, in any patent Licensable by such     Contributor that would be infringed, but for the grant of the     License, by the making, using, selling, offering for sale, having     made, import, or transfer of either its Contributions or its     Contributor Version.</p> <p>1.12. \"Secondary License\"     means either the GNU General Public License, Version 2.0, the GNU     Lesser General Public License, Version 2.1, the GNU Affero General     Public License, Version 3.0, or any later versions of those     licenses.</p> <p>1.13. \"Source Code Form\"     means the form of the work preferred for making modifications.</p> <p>1.14. \"You\" (or \"Your\")     means an individual or a legal entity exercising rights under this     License. For legal entities, \"You\" includes any entity that     controls, is controlled by, or is under common control with You. For     purposes of this definition, \"control\" means (a) the power, direct     or indirect, to cause the direction or management of such entity,     whether by contract or otherwise, or (b) ownership of more than     fifty percent (50%) of the outstanding shares or beneficial     ownership of such entity.</p>"},{"location":"about/license/#2-license-grants-and-conditions","title":"2. License Grants and Conditions","text":"<p>2.1. Grants</p> <p>Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:</p> <p>(a) under intellectual property rights (other than patent or trademark)     Licensable by such Contributor to use, reproduce, make available,     modify, display, perform, distribute, and otherwise exploit its     Contributions, either on an unmodified basis, with Modifications, or     as part of a Larger Work; and</p> <p>(b) under Patent Claims of such Contributor to make, use, sell, offer     for sale, have made, import, and otherwise transfer either its     Contributions or its Contributor Version.</p> <p>2.2. Effective Date</p> <p>The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.</p> <p>2.3. Limitations on Grant Scope</p> <p>The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:</p> <p>(a) for any code that a Contributor has removed from Covered Software;     or</p> <p>(b) for infringements caused by: (i) Your and any other third party's     modifications of Covered Software, or (ii) the combination of its     Contributions with other software (except as part of its Contributor     Version); or</p> <p>\u00a9 under Patent Claims infringed by Covered Software in the absence of     its Contributions.</p> <p>This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).</p> <p>2.4. Subsequent Licenses</p> <p>No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).</p> <p>2.5. Representation</p> <p>Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.</p> <p>2.6. Fair Use</p> <p>This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.</p> <p>2.7. Conditions</p> <p>Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.</p>"},{"location":"about/license/#3-responsibilities","title":"3. Responsibilities","text":"<p>3.1. Distribution of Source Form</p> <p>All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form.</p> <p>3.2. Distribution of Executable Form</p> <p>If You distribute Covered Software in Executable Form then:</p> <p>(a) such Covered Software must also be made available in Source Code     Form, as described in Section 3.1, and You must inform recipients of     the Executable Form how they can obtain a copy of such Source Code     Form by reasonable means in a timely manner, at a charge no more     than the cost of distribution to the recipient; and</p> <p>(b) You may distribute such Executable Form under the terms of this     License, or sublicense it under different terms, provided that the     license for the Executable Form does not attempt to limit or alter     the recipients' rights in the Source Code Form under this License.</p> <p>3.3. Distribution of a Larger Work</p> <p>You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).</p> <p>3.4. Notices</p> <p>You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.</p> <p>3.5. Application of Additional Terms</p> <p>You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.</p>"},{"location":"about/license/#4-inability-to-comply-due-to-statute-or-regulation","title":"4. Inability to Comply Due to Statute or Regulation","text":"<p>If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.</p>"},{"location":"about/license/#5-termination","title":"5. Termination","text":"<p>5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.</p> <p>5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.</p> <p>5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.</p> <ul> <li>*</li> <li> <ol> <li>Disclaimer of Warranty                                           *</li> </ol> </li> <li>-------------------------                                           *</li> <li>*</li> <li>Covered Software is provided under this License on an \"as is\"       *</li> <li>basis, without warranty of any kind, either expressed, implied, or  *</li> <li>statutory, including, without limitation, warranties that the       *</li> <li>Covered Software is free of defects, merchantable, fit for a        *</li> <li>particular purpose or non-infringing. The entire risk as to the     *</li> <li>quality and performance of the Covered Software is with You.        *</li> <li>Should any Covered Software prove defective in any respect, You     *</li> <li>(not any Contributor) assume the cost of any necessary servicing,   *</li> <li>repair, or correction. This disclaimer of warranty constitutes an   *</li> <li>essential part of this License. No use of any Covered Software is   *</li> <li>authorized under this License except under this disclaimer.         *</li> <li>*</li> </ul> <ul> <li>*</li> <li> <ol> <li>Limitation of Liability                                          *</li> </ol> </li> <li>--------------------------                                          *</li> <li>*</li> <li>Under no circumstances and under no legal theory, whether tort      *</li> <li>(including negligence), contract, or otherwise, shall any           *</li> <li>Contributor, or anyone who distributes Covered Software as          *</li> <li>permitted above, be liable to You for any direct, indirect,         *</li> <li>special, incidental, or consequential damages of any character      *</li> <li>including, without limitation, damages for lost profits, loss of    *</li> <li>goodwill, work stoppage, computer failure or malfunction, or any    *</li> <li>and all other commercial damages or losses, even if such party      *</li> <li>shall have been informed of the possibility of such damages. This   *</li> <li>limitation of liability shall not apply to liability for death or   *</li> <li>personal injury resulting from such party's negligence to the       *</li> <li>extent applicable law prohibits such limitation. Some               *</li> <li>jurisdictions do not allow the exclusion or limitation of           *</li> <li>incidental or consequential damages, so this exclusion and          *</li> <li>limitation may not apply to You.                                    *</li> <li>*</li> </ul>"},{"location":"about/license/#8-litigation","title":"8. Litigation","text":"<p>Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims.</p>"},{"location":"about/license/#9-miscellaneous","title":"9. Miscellaneous","text":"<p>This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.</p>"},{"location":"about/license/#10-versions-of-the-license","title":"10. Versions of the License","text":"<p>10.1. New Versions</p> <p>Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.</p> <p>10.2. Effect of New Versions</p> <p>You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.</p> <p>10.3. Modified Versions</p> <p>If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).</p> <p>10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses</p> <p>If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.</p>"},{"location":"about/license/#exhibit-a-source-code-form-license-notice","title":"Exhibit A - Source Code Form License Notice","text":"<p>This Source Code Form is subject to the terms of the Mozilla Public   License, v. 2.0. If a copy of the MPL was not distributed with this   file, You can obtain one at http://mozilla.org/MPL/2.0/.</p> <p>If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.</p> <p>You may add additional accurate notices of copyright ownership.</p>"},{"location":"about/license/#exhibit-b-incompatible-with-secondary-licenses-notice","title":"Exhibit B - \"Incompatible With Secondary Licenses\" Notice","text":"<p>This Source Code Form is \"Incompatible With Secondary Licenses\", as   defined by the Mozilla Public License, v. 2.0.</p>"},{"location":"excursions/shells/","title":"Excursion: Shells","text":"<p>No program runs without context. In application programming this would usually be a \"shell\" - a special program that provides operating system services and environment to the user or other programs.</p>"},{"location":"excursions/shells/#shell-cheat-sheet","title":"Shell Cheat Sheet","text":"Subject Linux Bash command 1 Windows Powershell command 1 2 Shell shell version <code>bash --version</code> <code>$PSVersionTable</code> list available commands <code>compgen -c | sort | uniq</code> 3 <code>get-command</code> command help <code>&lt;command&gt; --help</code> <code>help &lt;command&gt;</code> shell command history <code>history</code> <code>history</code> search shell command history <code>&lt;ctrl&gt;-r</code> <code>&lt;ctrl&gt;-r</code> shell command navigation <code>&lt;arrow-up&gt;</code> or <code>&lt;arrow-down&gt;</code> <code>&lt;arrow-up&gt;</code> or <code>&lt;arrow-down&gt;</code> Directories show current working directory <code>pwd</code> <code>pwd</code> change drive NOT-AVAILABLE <code>C:</code> list directory content <code>ls</code> <code>ls</code> list directory content using wildcards <code>ls foo*</code> <code>ls foo*</code> list directory tree <code>tree -L &lt;level&gt;</code> <code>tree</code> change directory <code>cd &lt;directory&gt;</code> <code>cd &lt;directory&gt;</code> create directory <code>mkdir FOO</code> <code>mkdir FOO</code> remove/delete directory <code>rmdir FOO</code> <code>rmdir FOO</code> move (and/or rename) directory <code>mv FOO BAR</code> <code>mv FOO BAR</code> Files create file <code>touch foo.txt</code> <code>new-item foo.txt -itemtype file</code> copy file <code>cp foo.txt bar.txt</code> <code>cp foo.txt bar.txt</code> remove/delete file <code>rm bar.txt</code> <code>rm bar.txt</code> move (and/or rename) file <code>mv foo.txt bar.txt</code> <code>mv foo.txt bar.txt</code> append content to a text-file ('&gt;&gt;'-operator) <code>echo \"Hello World\" &gt;&gt; bar.txt</code> <code>echo \"Hello World\" &gt;&gt; bar.txt</code> overwrite content of a text-file ('&gt;'-operator) <code>echo \"Hello World\" &gt; bar.txt</code> <code>echo \"Hello World\" &gt; bar.txt</code> show text-file content <code>cat bar.txt</code> <code>cat bar.txt</code> Environment Variables list all environment variables <code>env</code> <code>ls env:</code> some predefined environment variables <code>USER, HOME, PATH</code> <code>USERNAME, HOMEPATH, PATH</code> get/show environment variable <code>echo $&lt;variable&gt;</code> <code>$env:&lt;variable&gt;</code> set environment variable  4 <code>FOO=foo</code> <code>$env:FOO=\"foo\"</code> extend value of environment variable <code>FOO+=$USER</code> <code>$env:FOO += $env:USERNAME</code> remove/delete environment variable <code>unset FOO</code> <code>remove-item env:FOO</code> Shell script example Using environment variable and calling Python see <code>test-env.sh</code> in 5 see <code>test-env.ps1</code> 6 <pre><code>    # test-env.sh\necho \"USER (Output from Bash): $USER\"\n/usr/bin/python3.8 -c \"import os; print('USER (Output from Python provided by Bash): $USER'); print('USER (Output from Python resolved from Python): {}'.format(os.environ['USER']))\"\n</code></pre> <pre><code>    # test-env.ps1\necho \"USERNAME (Output from PowerShell): $env:USERNAME\"\n&amp; 'C:\\Program Files\\Python\\3.6\\python.exe' -c \"import os; print('USERNAME (Output from Python provided from Powershell): $env:USERNAME'); print('USERNAME (Output from Python resolved from Python): {}'.format(os.environ['USERNAME']))\"\n</code></pre> <ol> <li> <p>Case-Sensitivity: Bash is case-sensitive, as opposed to Powershell, which is case-insensitive\u00a0\u21a9\u21a9</p> </li> <li> <p>Most Powershell-commands do have aliases, to be equal as the Bash-commands. This can be checked with (e.g for 'ls') <code>get-command ls</code>. Check also for with <code>`get-command new-item</code> \u21a9</p> </li> <li> <p>Bash: There is no single command to list all avaliable Unix commands. Instead the 'compgen'-command list all available Bash builtins, command-aliases and executables found in the PATH variable\u00a0\u21a9</p> </li> <li> <p>Variable-Assignment: In Bash no 'blanks' allowed between variable-name, assignment-operator ('=') and value; Powershell instead allows 'blanks', but needs apostroph, if the value is a string\u00a0\u21a9</p> </li> <li> <p>Bash-script using environment variable and calling Python\u00a0\u21a9</p> </li> <li> <p>Powershell-script using environment variable and calling Python\u00a0\u21a9</p> </li> </ol>"},{"location":"python/python-history/","title":"A (very) brief selective history of Python","text":"<p>Python was first published in February 1991 by Dutch programmer Guido van Rossum.</p> <p>From the get-go Python</p> <ul> <li>had a focus on clean syntax,</li> <li>emphasized readability and</li> <li>was designed to be extensible.</li> </ul> <p>Early versions already show many of the core Python capabilities available in modern Python. In fact, looking at code running on really ancient Python doesn't actually feel very different .</p> <p>With its permissive F(L)OSS license and Guido turning out to be a highly competent Python community lead - lovingly and jokingly dubbed the \"Benevolent dictator for life\" (BDFL), a role from which he stepped down in 2018 - Python found evolutionary language development, steady growth and application in very many domains.</p> <p>Since around 2012-2014 Python gained massive adoption in the scientific and  data analytics world, boosting its popularity to unprecedented heights.</p> <p>For some historical perspective, here's the first public releases of other popular programming languages:</p> <ul> <li>C: 1972</li> <li>C++: 1985</li> <li>JavaScript: 1995</li> <li>Java: 1996</li> <li>Go: 2009</li> <li>Rust: 2010</li> </ul>"},{"location":"python/python-history/#some-subjectively-selected-python-milestones","title":"Some subjectively selected Python milestones","text":""},{"location":"python/python-history/#python-090-1991","title":"Python 0.9.0 (1991)","text":"<p>1st public release ever, already with classes, exception handling, functions, basic types, modules.</p>"},{"location":"python/python-history/#python-100-1994","title":"Python 1.0.0 (1994)","text":"<p>Python reaches 1.0! Selected highlights: double quotes allowed for strings as well as single quotes, <code>lambda</code> anonymous functions, <code>map()</code>, <code>filter()</code>, <code>reduce()</code> functions for functional programming support, range objects.</p>"},{"location":"python/python-history/#zope-1998","title":"Zope (1998)","text":"<p>Open source web application and content manager framework. Pioneers web object publishing and object database.</p>"},{"location":"python/python-history/#python-152-1999","title":"Python 1.5.2 (1999)","text":"<p>Fondly remembered by some author(s) as their 1st ever personally used Python version. Extremely stable run in production for many years. </p>"},{"location":"python/python-history/#python-16-2000","title":"Python 1.6 (2000)","text":"<p>Unicode support: new unicode datatype.</p>"},{"location":"python/python-history/#python-20-2000","title":"Python 2.0 (2000)","text":"<p>\"Python Enhancements Proposal\" (PEP) process established, list comprehensions. </p>"},{"location":"python/python-history/#python-22-2001","title":"Python 2.2 (2001)","text":"<p>Unification of types (written in C) and classes (written in Python), \"new style classes\", generators.</p>"},{"location":"python/python-history/#numpy-10-2006","title":"NumPy 1.0 (2006)","text":"<p>Python library for multi-dimensional array and matrix calculations. Previously Numeric, part/basis of SciPy.</p>"},{"location":"python/python-history/#python-27-2010","title":"Python 2.7 (2010)","text":"<p>The last Python 2 minor release line.</p>"},{"location":"python/python-history/#python-30-2008","title":"Python 3.0 (2008)","text":"<p>Aka \"Python 3000\" or \"Py3k\": Backward compatibility-breaking new major version: <code>print</code> is now a function, all text strings are unicode objects, function annotations (and many many more changes).</p>"},{"location":"python/python-history/#anaconda-080-2012","title":"Anaconda 0.8.0 (2012)","text":"<p>Data science Python distribution, package &amp; environment manager.</p>"},{"location":"python/python-history/#python-33-2012","title":"Python 3.3 (2012)","text":"<p>Python 3.3 restores the u'unicode string' syntax which makes the Python 2 to Python 3 transition way easier than before.</p>"},{"location":"python/python-history/#python-35-2015","title":"Python 3.5 (2015)","text":"<p>Greatly improved async programming, now with syntactic support. Also, type hints and matrix multiplication operator.</p>"},{"location":"python/python-history/#guido-steps-down-as-python-bdfl-2018","title":"Guido steps down as Python BDFL (2018)","text":"<p>After having the final Python design responsibility and say-so since 1991 Guido van Rossum decides to step down from his BDFL role.</p> <p>The Python core developer community decides to establish a steering council of annually elected core developers to take over the language governance powers and duties.</p>"},{"location":"python/python-history/#python-2718-2020","title":"Python 2.7.18 (2020)","text":"<p>The last release of Python 2.</p>"},{"location":"python/python-history/#faster-cpython-2021","title":"Faster CPython (2021)","text":"<p>Python inventor and BDFL emeritus Guido van Rossum gets tired of retirement and joins Microsoft to push the \"Faster CPython\" project, together with other expert contributors.</p>"},{"location":"python/python-history/#python-3115-2023","title":"Python 3.11.5 (2023)","text":"<p>The latest and greatest Python (at the time of writing).</p> <p>Python 3.11 can be up to 10-60% faster than Python 3.10, with an average 1.22x speedup in the standard benchmark suite().</p>"},{"location":"python/python/","title":"Python?","text":"<p>The programming language - not the animal, not (quite) the Monty. But these days it uses a cute little \"two snakes\" logo, anyway.</p>"},{"location":"python/python/#what-is-python","title":"What is Python?","text":"<p>From the Python homepage (www.python.org):</p> <p>\"Python is an interpreted, interactive, object-oriented programming language.\"</p>"},{"location":"python/python/#a-bit-more-in-depth-information","title":"A bit more in-depth information","text":""},{"location":"python/python/#hello-world-in-python","title":"Hello world in Python","text":"<pre><code>&gt;&gt;&gt; print('Hello, World!')\nHello, World!\n</code></pre>"},{"location":"python/python/#python-is-interpreted","title":"Python is interpreted","text":"<p>An interpreter is a computer program that directly/immediately executes programming language instructions. I.e. there's no such thing as an explicit separate compilation (to machine code step before program instructions can be run.1</p>"},{"location":"python/python/#python-is-interactive","title":"Python is interactive","text":"<p>Python has a so-called \"Read-Eval-Print-Loop\" (REPL). That means that you can start the Python interpreter, type Python commands at its prompt and immediately see the results:</p> <pre><code>Python 3.8.2 (default, Feb 26 2020, 02:56:10)\n&gt;&gt;&gt; 1 + 1\n2\n</code></pre>"},{"location":"python/python/#python-is-object-oriented","title":"Python is object-oriented","text":"<p>According to https://de.wikipedia.org/wiki/Objektorientierte_Programmierung: </p> <p>Alan Kay, inventor of Smalltalk and the term \u201eobject oriented\u201c, defined object-oriented in the context of Smalltalk as: </p> <p>\"  1. Everything is an object,   2. Objects communicate by sending and receiving messages (in terms of objects),   3. Objects have their own memory (in terms of objects),   4. Every object is an instance of a class (which must be an object),   5. The class holds the shared behavior for its instances (in the form of objects in a program list),   6. To eval a program list, control is passed to the first object and the remainder is treated as its message \"</p>"},{"location":"python/python/#python-is-also-dynamic","title":"Python is also dynamic","text":"<p>The term \"dynamic\" isn't actually defined all too clearly. With regard to Python one could describe it with these capabilities:</p> <ul> <li>you can evaluate source code (e.g. from text strings) at runtime</li> <li>you can create new types or extend existing types (and use them) at runtime</li> <li>you can inspect (or \"introspect\") objects at runtime, i.e. get information     about their type, data, operations and metadata</li> <li>Python is dynamically typed, not statically typed<ul> <li> <p>but strongly typed:</p> <pre><code>&gt;&gt;&gt; \"3\" + 5\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can only concatenate str (not \"int\") to str\n</code></pre> </li> </ul> </li> </ul> <p>The dynamic nature of Python makes it very flexible.2</p>"},{"location":"python/python/#python-is-multi-paradigm","title":"Python is multi-paradigm","text":"<p>Python supports multiple programming paradigms:</p>"},{"location":"python/python/#imperative-procedural-programming-in-python","title":"Imperative (+ procedural) programming in Python","text":"<p>Programs are lists of instructions for the computer for processing the program's input (and alter program state) to achieve a program's goal; reusable units are defined as procedures.</p>"},{"location":"python/python/#object-oriented-programming","title":"Object oriented programming","text":"<p>The program is modelled as objects that bundle data and possible operations (methods) on that data (that alter object and program state).</p>"},{"location":"python/python/#functional-programming","title":"Functional programming","text":"<p>Functions that take input and produce output are combined to solve a program's goal. Ideally, such functions do not maintain internal state or manipulate outer state; in pure(ly) functional languages (which Python is not!) the language enforces this no-side-effects approach.</p>"},{"location":"python/python/#who-invented-it","title":"Who invented it?","text":"<p>See a brief history of Python.</p>"},{"location":"python/python/#do-i-need-it","title":"Do I need it?","text":"<p>See why should I use Python.</p>"},{"location":"python/python/#where-to-get-it","title":"Where to get it","text":"<p>Python is Free/Libre Open Source Software (F(L)OSS) and can be obtained here: www.python.org</p> <p>There is \"Python the lanuage\" and \"Python the implementation:</p> <p>Aside from the predominant reference implementation dubbed \"CPython\" several other implementations of Python the language exist, with varying degrees of version compatibility and adoption:</p> <ul> <li>PyPy</li> <li>Jython</li> <li>IronPython</li> <li>...and probably others</li> </ul> <p>Furthermore, several Python distributions bundle Python, Python packages, external dependencies and additional tooling. A very prominent one is  Anaconda, with major adoption in the data science world.</p> <ol> <li> <p>As often, the lines are blurred though. Interpreters often implicitly \"compile\" to some form of intermediate \"bytecode\" or use \"just-in-time compilation\" to compile (parts of) the code, e.g. for performance reasons.\u00a0\u21a9</p> </li> <li> <p>But comes at a price: reasoning about Python code before runtime i.e.  execution is hard which makes it difficult to apply optimizations like just-in-time compilation or transpile to less dynamic languages.\u00a0\u21a9</p> </li> </ol>"},{"location":"python/why-python/","title":"Why should I learn (+ use) Python?","text":""},{"location":"python/why-python/#its-easy-to-use","title":"It's easy to use","text":"<p>Use the power of the REPL and try away:</p> <pre><code>&gt;&gt;&gt; print('Python is easy to learn')\nPython is easy to learn\n</code></pre> <p>Get built-in help:</p> <pre><code>&gt;&gt;&gt; help()\nWelcome to Python 3.6's help utility!\nIf this is your first time using Python, you should definitely check out\nthe tutorial on the Internet at https://docs.python.org/3.6/tutorial/.\nEnter the name of any module, keyword, or topic to get help on writing\nPython programs and using Python modules.  To quit this help utility and\nreturn to the interpreter, just type \"quit\".\nTo get a list of available modules, keywords, symbols, or topics, type\n\"modules\", \"keywords\", \"symbols\", or \"topics\".  Each module also comes\nwith a one-line summary of what it does; to list the modules whose name\nor summary contain a given string such as \"spam\", type \"modules spam\".\nhelp&gt; \n</code></pre> <p>Scale from simple, one-off scripts or even command line one-liners to world-class applications:</p> <pre><code>python -c 'import math; print(math.sqrt(2))'\n1.4142135623730951\n</code></pre> <p>Amongst many others, Dropbox, Google, Instagram, Spotify and YouTube have been known to run parts of their stack with Python, sometimes primarily using Python.</p> <p>Python also played an important role in getting the 1st ever black hole image in 2019 and NASA's 2021 Mars mission.</p>"},{"location":"python/why-python/#it-has-many-applications","title":"It has many applications","text":"<p>Python is</p> <ul> <li>useful in many domains, from simple scripts to building web applications to    image processing, number crunching and data science (and many many more)</li> <li>an excellent \"glue language\":<ul> <li>easy integration of C/C++ code (or Rust, Go, Fortran, ...)</li> </ul> </li> <li>a great rapid prototyping language:<ul> <li>succinct</li> <li>no lengthy compilation</li> <li>a lot of \"batteries included\" (i.e. extensive standard library)</li> </ul> </li> <li>extensible, i.e. in the need for speed you can write performance critical    code as e.g. a C extension (but more often than not Python is just fast     enough, anyway)</li> </ul> <p>Moreover, Python comes with \"batteries included\": its rich standard library provides a wide variety of tooling, out-of-the-box. This can be essential in restricted environments e.g. when you're not able to install additional packages. </p>"},{"location":"python/why-python/#it-has-excellent-documentation-a-great-community","title":"It has excellent documentation &amp; a great community","text":"<p>Simply take at look at https://docs.python.org/ and https://www.python.org/community/.</p> <p>The wider Python open source community delivers many world class 3rd party packages, usually available through the Python Package Index (PyPI).</p>"},{"location":"python/why-python/#it-is-widely-used-usage-is-growing-rapidly","title":"It is widely used &amp; usage is growing rapidly","text":"<ul> <li>Currently the fastest growing / dominant language? Python<ul> <li>ranks no. 1 on the TIOBE Index   (08/2023)</li> <li>ranks no. 1 on the PYPL PopularitY of Programming Language index (09/2023)</li> <li>ranks no. 2 (behind JavaScript) on the Redmonk Programming Language Rankings (01/2023)</li> <li>ranks no. 2 (behind JavaScript) in the GitHub octoverse report top languages (2022)</li> </ul> </li> <li>huge uptake since around 2012-2014 in the scientific community and data   science:<ul> <li>machine learning</li> <li>AI</li> <li>statistical computing</li> </ul> </li> <li>known to e.g. replace R and Matlab applications due to being<ul> <li>user friendly and easy to learn,</li> <li>more flexible, extensible &amp; general-purpose (i.e. apart from the data   science-specific necessities the huge Python ecosystem of standard   library and 3rd party libraries is at your hands)</li> <li>used by a large and growing community</li> </ul> </li> <li>may soon be the primary language of choice in the data science field (if it   isn't already)</li> </ul>"},{"location":"python/why-python/#it-is-arguably-the-most-readable-programming-language-for-many","title":"It is (arguably) the most readable programming language (for many)","text":"<p>(Take this with more than a grain of salt - beauty is all in the eye of the beholder )</p> <p>Readability is key:</p> <ul> <li>source code is read way more often than written (as in: reading other    people's code for learning or review, reading your own code for     refactoring/debugging/understanding what you did last month, ...)</li> <li>Python is \"executable pseudocode\" (to some):         <pre><code># pseudocode\nx := 1\nIF x &gt; 0 THEN\nprint \"positive\" \nELSE\nprint \"negative or 0\" \nEND IF\n# python\nx = 1\nif x &gt; 0:\nprint(\"positive\")\nelse:\nprint(\"negative or 0\")\n</code></pre></li> <li>Python uses significant whitespace (indentation) for grouping code blocks    (rather than {} braces), which makes it very readable for most     people1</li> </ul>"},{"location":"python/why-python/#some-hello-world-examples","title":"Some \"Hello, world!\" examples","text":"<p>To each their own...</p> PythonCC++JavaGoRust <pre><code>print(\"Hello, world!\")\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\nprintf(\"Hello, world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void)\n{\nstd::cout &lt;&lt; \"Hello, world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <pre><code>class Hello {\npublic static void main(String[] args) {\nSystem.out.print(\"Hello, world!\");\n}\n}\n</code></pre> <pre><code>package main\nimport \"fmt\"\nfunc main() {\nfmt.Println(\"Hello, world!\")\n}\n</code></pre> <pre><code>fn main() {\nprintln!(\"Hello, world\");\n}\n</code></pre> <ol> <li> <p>Though there's die-hard non-believers that will always hate this  \u21a9</p> </li> </ol>"},{"location":"training/cheatsheet/","title":"Curious Python Course: Cheatsheet","text":""},{"location":"training/oddjob/","title":"Oddjob - Oddities, Stumbling Blocks &amp; \"Warts\"","text":""},{"location":"training/oddjob/#mutable-function-arguments","title":"Mutable Function Arguments","text":"<p>This is something that bytes practically all Python developers at least once in their ventures.</p> <p>A not too ingeniouse example for this (as you obviously wouldn't really need that function in the first place) that illustrates the behaviour:</p> <pre><code>&gt;&gt;&gt; def append(elem, sequence=[]):\n...     \"\"\"Append elem to sequence and return the sequence.\n...     \"\"\"\n...     sequence.append(elem)\n...     return sequence\n&gt;&gt;&gt; append(1)\n[1]\n&gt;&gt;&gt; append(2)\n[1, 2]\n&gt;&gt;&gt; append(3)\n[1, 2, 3]\n&gt;&gt;&gt; \n</code></pre> <p>Note how the mutable default <code>sequence=[]</code> list argument is created at function definition time, not each time the function gets called.</p> <p>This can be counter-intuitive at the beginning but isn't really difficult to grasp. It can be annoying (linters actually often warn you if you do s.th. like it in a function definition) but it can also be (ab)used as a feature in cornercases, for keeping a certain state.</p> <p>To steer clear of unexpected results, mutable default arguments are usually best avoided. This can be done e.g. like so:</p> <pre><code>&gt;&gt;&gt; def append(elem, sequence=None):\n...     \"\"\"Append elem to sequence and return the sequence.\n...     \"\"\"\n...     sequence = [] if sequence is None else sequence\n...     sequence.append(elem)\n...     return sequence\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/lessons/add-function/add-function/","title":"Add Function","text":"<p>Lesson: Add Function</p> TaskHintsSolution <p>Create a Python program that repeatedly</p> <ul> <li>reads 2 float values from the user</li> <li>adds the 2 input values and</li> <li>prints the resulting sum value</li> </ul> <p>until the user interrupts the program with <code>Ctrl-c</code>.</p> <p>To add the 2 int numbers create a custom <code>add(x, y)</code> function that you call to perform the addition.</p> <p>Optional: After printing the sum value, ask the user if she wants to continue. If not, print \"Goodbye!\" and end the program.</p> <p>Remember that the <code>input()</code> function returns text - to use number operations you will need to convert the resulting user input to a <code>float</code>: <code>float(input_text)</code>.</p> <p>Your program output could look like this:</p> <pre><code>python add-function/add_function.py \n\nPlease enter number x: 3\nPlease enter number y: 4\nThe sum of x and y is 7.0.\nDo you want to continue (y/n)? [y] n\nGoodbye!\n</code></pre> Really take a peek now? add_function.py<pre><code># add_function.py\ndef add(x, y):\n\"\"\"Add x and y and return the result.\n    \"\"\"\nreturn x + y\ndef ask_user_input():\n\"\"\"Read 2 float values x and y from user input and return the tuple (x, y).\n    \"\"\"\nprint()\nx = float(input('Please enter number x: '))\ny = float(input('Please enter number y: '))\nreturn (x, y)\nwhile True:\nx, y = ask_user_input()\ncalculated_sum = add(x, y)\nprint(f'The sum of x and y is {calculated_sum}.')\n# Read user input, strip leading and trailing whitespace and convert the\n# text to lowercase for normalization.\nproceed = input('Do you want to continue (y/n)? [y] ').strip().lower()\n# If the user just pressed Enter without entering a value we default to\n# 'y'.\nproceed = 'y' if len(proceed) == 0 else proceed\nif proceed != 'y':\n# Break out of the loop - user does not want to continue.\nbreak\nprint('Goodbye!')\n</code></pre> <p></p>"},{"location":"training/lessons/check-palindromes/check-palindromes/","title":"Check Palindromes","text":"<p>Lesson: Check palindromes</p> TaskHintsSolution <p>Create a function that</p> <ul> <li>takes a single string argument and</li> <li> <p>returns <code>True</code> if string is a palindrome, <code>False</code> otherwise.</p> </li> <li> <p>Use a loop for implementation.</p> </li> <li>Try an alternative implementation using \"extended slicing\": Check    <code>word == word[::-1]</code> </li> <li>Test the function by calling it with a palindromes and other texts.</li> </ul> <p>Optional: Create a Python script <code>check_palindromes.py</code> that asks the user to enter a text to be checked if it qualifies as a palindrome.</p> <p>E.g. <pre><code>python3 check_palindromes.py\nPlease enter a word: abba\nentered word: abba     # optional output\nreverse word: abba\nis_palindrome: abba ==&gt; True\n</code></pre></p> <pre><code>python3 check_palindromes.py\nPlease enter a word: foo\nentered word: foo       # optional output\nreverse word: oof\nis_palindrome: foo ==&gt; False\n</code></pre> <p>Optional: Instead of interactive user input, accept a command line argument to your Python script so that it can be invoked like <code>python check_palindromes.py \"racecar\"</code>.</p> <p>Use the <code>input()</code> built-in function to read user input interactively.</p> <p>The most basic form to read command line arguments is by accessing them through <code>sys.argv</code>. For anything more serious the argparse standard library module can be used.</p> Really take a peek now? check_palindromes.py<pre><code>\"\"\"check_palindromes.py\n\"\"\"\nimport sys\ndef is_palindrome(text):\n\"\"\"Check if text is a palindrome using the built-in reversed() function.\n    \"\"\"\nreversed_text = ''.join(reversed(text))\nreturn text == reversed_text\ndef is_palindrome_ext_slicing(text):\n\"\"\"Check if text is a palindrome using extended slicing.\n    \"\"\"\nreversed_text = text[::-1]\nreturn text == reversed_text\ndef is_palindrome_loop(text):\n\"\"\"Check if text is a palindrome by looping through the string.\n    \"\"\"\nreversed_order = []\nfor idx, character in enumerate(text):\nidx_back = -(idx + 1)\nif text[idx] != text[idx_back]:\nreturn False\nreturn True\ndef parse_args(args=None):\n\"\"\"Parse arguments from sys.argv if args is None (the default) or from args\n    sequence otherwise.\n    \"\"\"\n# https://docs.python.org/3/howto/argparse.html\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\n'texts', nargs='*',\nhelp='One or more palindrome candidate texts')\nargs = parser.parse_args(args)\nreturn args\ndef main(args=None):\n\"\"\"Main module function.\n    Exposes this module's executable functionality for use as a module\n    function.\n    Parses arguments from sys.argv if args is None (the default) or from args\n    sequence otherwise.\n    \"\"\"\nargs = parse_args(args)\nif not args.texts:\n# optional-argument\ntext = input(\"text: \")\ntexts = [text]\nelse:\ntexts = args.texts\nfor text in texts:\nprint(f'\\nentered text: {text}')\nprint(f'reverse text: {text[::-1]}')\nfor method in [\nis_palindrome,\nis_palindrome_ext_slicing,\nis_palindrome_loop\n]:\nprint(f'{method.__name__}(\"{text}\") --&gt; {method(text)}')\nif __name__ == \"__main__\":\nsys.exit(main())\n</code></pre> <p></p>"},{"location":"training/lessons/check-user-input-evenness/check-user-input-evenness/","title":"Check User Input Evenness","text":"<p>Lesson: Check User Input Evenness</p> TaskHintsSolution <p>Create a small Python program that reads an integer value from user input and prints if the input value is even or odd.</p> <p>Find out about the modulo operator or the <code>divmod(...)</code> built-in function.</p> <p>Remember that the <code>input()</code> function returns text - to use number operations you will need to convert the resulting user input to an <code>int</code>.</p> Really take a peek now? check_even.py<pre><code># check_even.py\n# Retrieve input from the user.\nnumber = int(input('number: '))\n# a mod b is a % b in Python.\nif (number % 2 == 0):\nprint(f\"The input value {number} is even.\")\nelse:\nprint(f\"The input value {number} is odd.\")\n</code></pre> <p></p>"},{"location":"training/lessons/classy-animals/classy-animals/","title":"Classy Animals","text":"<p>Lesson: Classy Animals</p> TaskHintsSolution <p>Create a new empty Python source file and copy the \"MyDog\" example class to it. Add a new method <code>speak</code> that calls the existing method <code>bark</code>.</p> <p>Here's the <code>MyDog</code> class, again:</p> <pre><code>class MyDog:\ndef __init__(self, name):\nself.name = name\ndef bark(self):\nprint(f\"{self.name} says wuff\")\n</code></pre> <p>Then, create a new class <code>MyCat</code> in the same file that - like <code>MyDog</code> - also expects a <code>name</code> argument in its <code>__init__</code> method, with those 2 additional methods:</p> <ul> <li>a method <code>meow</code> that prints the string \"{MyCat name} says miau\" where   {MyCat name} is the <code>name</code> attribute of the instance object</li> <li>a method <code>speak</code> that calls the <code>meow</code> method.</li> </ul> <p>Create an <code>animals</code> list containing a <code>MyDog</code> and a <code>MyCat</code> instance.</p> <p>Loop over the animals list. For each animal, invoke the <code>speak()</code> method.</p> <p>Optional: Enhance the <code>MyDog</code> and <code>MyCat</code> classes' methods to accept an optional <code>text</code> argument. Modify the <code>MyDog.bark</code> and the <code>MyCat.meow</code> methods to additionally print the animal's class name and the <code>text</code> argument, e.g. like</p> <pre><code>&gt;&gt;&gt; my_cat = MyCat(\"Amanda\")\n&gt;&gt;&gt; my_cat.speak(text=\"a lot\")\n\"MyCat Amanda says miau a lot\".\n&gt;&gt;&gt;\n</code></pre> <p>When defining a method in a class remember that each method must have a <code>self</code> parameter as the 1st positional parameter.</p> <p>You can get an instance's class by retrieving its <code>__class__</code> attribute. The name of a class object can be found in the class' <code>__name__</code> attribute, e.g.</p> <pre><code>&gt;&gt;&gt; # Get the name of the MyDog class object.\n&gt;&gt;&gt; MyDog.__name__\n'MyDog'\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Get the name of a MyDog instance's class object.\n&gt;&gt;&gt; MyDog(\"Lucie\").__class__.__name__  # Get the name of a MyDog\n'MyDog'\n</code></pre> <p>Inside of a method, a class or instance attribute can be accessed through the self parameter (which references the instance object).</p> Really take a peek now? classy_animals.py<pre><code># classy_animals.py\nclass MyDog:\n\"\"\"A dog class.\n    \"\"\"\ndef __init__(self, name):\nself.name = name\ndef bark(self, text=\"\"):\n\"\"\"Make my dog bark.\n        Args:\n            text (str): A barkable output text\n        \"\"\"\noutput = f\"{self.name} says wuff\"\nif text:\noutput += ' ' + text\nprint(output)\ndef speak(self, text=\"\"):\n\"\"\"Make my dog speak in dog lingo.\n        Args:\n            text (str): A dog speak output text\n        \"\"\"\nreturn self.bark(text=text)\nclass MyCat:\n\"\"\"A cat class.\n    \"\"\"\ndef __init__(self, name):\nself.name = name\ndef meow(self, text=\"\"):\n\"\"\"Make my cat meow.\n        Args:\n            text (str): A meowable output text\n        \"\"\"\noutput = f\"{self.name} says miau\"\nif text:\noutput += \" \" + text\nprint(output)\ndef speak(self, text=\"\"):\n\"\"\"Make my cat speak in cat lingo.\n        Args:\n            text (str): A cat speak output text\n        \"\"\"\nreturn self.meow(text=text)\nanimals = [MyDog(\"Django\"), MyCat(\"Amanda\")]\nfor animal in animals:\nanimal.speak(\"a lot\")\n</code></pre> <p></p>"},{"location":"training/lessons/command-line-calculation/command-line-calculation/","title":"Command Line Calculation","text":"<p>Lesson: Command Line Calculation</p> TaskHintsSolution <p>Use Python as a \"command line calculator\" to calculate repayment plus compound interest for </p> <ul> <li>a yearly interest of 3%,</li> <li>a duration of 3 years and</li> <li>an investment of 91514.17 \u20ac.</li> </ul> <p>Perform the task in an interative Python session (the \"REPL\"), on the command line or e.g. in Jupyter.</p> Really take a peek now? <pre><code>&gt;&gt;&gt; 91514.17 * 1.03**3\n100000.00444159\n</code></pre> <p>Explanation:</p> <pre><code>&gt;&gt;&gt; principal = 91514.17\n&gt;&gt;&gt; interest_rate = 0.03 \n&gt;&gt;&gt; q = 1 + interest_rate  # factor\n&gt;&gt;&gt; t = 3  # time interval in years\n&gt;&gt;&gt; accumulated_value = principal * q**t\n&gt;&gt;&gt; accumulated_value\n100000.00444159\n</code></pre>"},{"location":"training/lessons/customer-class/customer/","title":"Customer Class","text":"<p>Lesson: Customer Class</p> TaskHintsSolution <ol> <li> <p>Create the following class-hierarchy:</p> <ol> <li> <p>Class Customer</p> <ul> <li>class-attribute: <code>number_of_customers</code> (which should increment with every new class-instance)</li> <li>class constructor with parameter: <code>email</code>, <code>employees</code></li> <li>instance-attribute: <code>id</code> (current value of <code>number_of_customers</code>)</li> <li>instance-attribute: <code>email</code></li> <li>instance-attribute: <code>employees</code> (number of employees)</li> <li>instance-method: <code>getEmployees</code> (returning <code>employees</code>)</li> </ul> </li> <li> <p>Class Retail(Customer)</p> <ul> <li>private class attribute: <code>__type</code> initialized to 'Retail'</li> <li>class constructor with parameters: <code>name</code>, <code>email</code>, <code>employees</code></li> <li>private instance-attribute: <code>__retailname</code> (initialized with <code>name</code>-parameter)</li> <li>instance-method: <code>getName</code> (returning private instance-attribute <code>__retailname</code>)</li> <li>instance-method: <code>getType</code> (returning private class-attribute <code>__type</code>)</li> </ul> </li> <li> <p>Class Wholesale(Customer)</p> <ul> <li>private class attribute: <code>__type</code> initialized to 'Wholesale'</li> <li>class constructor with parameters: <code>name</code>, <code>email</code>, <code>employee</code></li> <li>private instance-attribute: <code>__wholesalename</code> (initialized with <code>name</code>-parameter)</li> <li>instance-method: <code>getName</code> (returning private instance-attribute <code>__wholesalename</code>)</li> <li>instance-method: <code>getType</code> (returning private class-attribute <code>__type</code>)</li> </ul> </li> </ol> </li> <li> <p>Create a <code>list</code> of Customers of different customer-types ('Retail'- and 'Wholesale'-customers)</p> </li> <li> <p>Output the attributes <code>name</code>, <code>type</code>, <code>id</code>, <code>employees</code> for all customers (use classic-loop or list-comprehension)    </p> </li> </ol> <ul> <li>provide a callable interface <code>__call__()</code> for the derived classes returning the customer's name</li> </ul> Example Customer-Class Implementation customer.py<pre><code>class Customer:\n''' This is a customer class '''\n# class-wide attribute(s) - common to all class-instances '''\nnumber_of_customers = 0\ndef __init__(self, email, employees):\n''' class instance initialization '''\n# some instance attributes\nself.email = email\nself.employees = employees\nCustomer.number_of_customers += 1\nself.id = Customer.number_of_customers\ndef getEmployees(self):\nreturn self.employees\nclass Retail(Customer):\n__type = 'Retail'\ndef __init__(self, name, *args):     # use variadic parameter '*args'\n# call base class constructor\nself.__retailname = name         # 'private' (name-mangled) instance-attribute \nCustomer.__init__(self, *args)\ndef __call__(self):\nreturn self.getName()            # (1) call instance-method\n#return self.__retailname        # (2) access private attribute\ndef getName(self):\nreturn self.__retailname\ndef getType(self):\nreturn self.__type               # access private attribute\nclass Wholesale(Customer):\n__type = 'Wholesale'\ndef __init__(self, name, *args):     # use variadic parameter *args\n# call base class constructor\nself.__wholesalename = name      # 'private' (name-mangled) instance-attribute\nCustomer.__init__(self, *args)\ndef __call__(self):\nreturn self.getName()            # (1) call instance-method\n#return self.__wholesalename     # (2) access private attribute\ndef getName(self):\nreturn self.__wholesalename      # access private attribute\ndef getType(self):\nreturn self.__type\ndef main():\nprint(f'Number of customers - on start: {Customer.number_of_customers}')\n# Create customers of different type\ncustomers = [\nRetail('Peter - Fish &amp; Chips', 'peter@email.com', 4),\nRetail('Bob - Pipe Cleaning', 'bob.@email.com', 13),\nWholesale('Brown Chemicals', 'brown.chemicals@email.com', 3500),\nWholesale('Duck Industries','duck.industries@email.com', 1800),\n]\nprint(f'Number of customers - after creation of customers: {Customer.number_of_customers}')\n# output using classic loop\nprint('\\n&gt;&gt;&gt; 1. Output using classic for loop &lt;&lt;&lt;\\n')\nfor customer in customers:\nprint(f'''\n        Customer Name: {customer()}\n        Customer Id: {customer.id}\n        Customer Type: {customer.getType()}\n        Number of Employees: {customer.employees}\n        ''')\n# output using list comprehension\nprint('&gt;&gt;&gt; 2. Output using list comprehension &lt;&lt;&lt;\\n')\n[ print(f'''\n        Customer Name: {c()}\n        Customer Id: {c.id}\n        Customer Type: {c.getType()}\n        Number of Employees: {c.employees}\n    ''') for c in customers]\nif __name__ == '__main__':\nmain()\n</code></pre> <p></p>"},{"location":"training/lessons/file-iteration/iter-file/","title":"Iterate File","text":"<p>Lesson: Iterate file</p> TaskHintsSolution <p>Create a Python script that</p> <ul> <li>takes a file name/path as a command line argument</li> <li>opens a file using the built-in <code>open()</code> function</li> <li>uses a generator to iterate over the file's lines and</li> <li>yields these lines split by the ','-separator character and</li> <li>prints them to stdout (i.e. the console)</li> </ul> <p>Optional: Add a command line option that allows for setting the separator to another character.</p> <p>Optional 2: Add command line options to set an output file path and write the processed lines to this output file, joining the split lines with another \"target separator\" (also set with a command line option).</p> <p>Use the <code>argparse</code> stdlib library to parse the command line (see https://docs.python.org/3/howto/argparse.html).</p> Example `iterate_file.py iterate_file.py<pre><code>\"\"\" iterate_file\"\"\"\nimport argparse\n# https://docs.python.org/3/howto/argparse.html\ndef gen(lines, separator=','):\n'''generator function'''\nfor line in lines:\nfor _line in line.split(separator):\nyield _line\ndef main(args):\nif not args.input_file: # optional-argument\ninput_file = input(\"input_file: \")\nelse:\ninput_file = args.input_file\nwith open(input_file) as my_input_file:\nif args.output_file:\nif args.output_separator:\nout_separator = args.output_separator\nelse:\nout_separator = \"\\n\"\nwith open(args.output_file, 'w') as my_output_file:\n# readlines(): Read the whole file at once \n#              returns a list of lines\nfor line in gen(my_input_file.readlines()):\n# rstrip(): removes trailing whitespaces and newlines\nmy_output_file.write(line.rstrip()+ out_separator)\nelse:\n# No output_file given, so just print to stdout\nfor line in gen(my_input_file.readlines()):\n# rstrip(): removes trailing whitespaces and newlines\nprint(line.rstrip())\nif __name__ == '__main__':\nparser = argparse.ArgumentParser()\nparser.add_argument('--input_file', help='Path to file\"')\nparser.add_argument('--input_separator', help='line separator of input file')\nparser.add_argument('--output_file', help='Path to file\"')\nparser.add_argument('--output_separator', help='line separator of output file')\nargs = parser.parse_args()\nmain(args)\n</code></pre> <p></p> <p>The Python Script can be called as shown in the shell one-liners:</p> iterate_file.sh<pre><code>python3 iterate_file.py --input_file ./in.txt --input_separator \",\" --output_file ./out.txt --output_separator \";\"\n</code></pre>"},{"location":"training/lessons/generate-un-even-numbers/generate-un-even-numbers/","title":"Generate (Un)Even Numbers","text":"<p>Lesson: Generate even and odd numbers</p> TaskHintsSolution <p>Write a generator that yields even natural numbers [1, 2, 3, ...] infinitely, i.e.  until interrupted with <code>Ctrl-c</code>.</p> <p>Optional: Write a generator that yields even or uneven numbers, depending on a parameter that switches even/uneven behaviour.</p> <p>Optional: Write a generator that yields even or uneven numbers (switchable) up to an upper limit.</p> <p>Remember the </p> <ul> <li>loop control flow constructs (for-loop, while-loop) that can be used   to do repeating things,</li> <li>conditionals (if-elif-else) to decide which \"code paths\" or   \"branches\" should be executed and</li> <li>(maybe) the modulo operator or the <code>divmod()</code> built-in function for a   possibility to check if a number is even or not.</li> </ul> <p>There are many ways to solve this task... </p> Really take a peek now? generate_numbers.py<pre><code>def gen_even():\n\"\"\"Generate even natural numbers, undefinitely.\n    \"\"\"\ni = 1\nwhile True:\nif i % 2 == 0:\nyield i\ni += 1\ndef gen_uneven():\n\"\"\"Generate even natural numbers, undefinitely.\n    \"\"\"\ni = 1\nwhile True:\nif i % 2 != 0:\nyield i\ni += 1\ndef gen_even_lim(upper_limit=-1):\n\"\"\"Generate even natural numbers, up to max upper limit, or undefinitely if\n    max &lt; 1.\n    \"\"\"\nfor i in gen_even():\nif i &gt; upper_limit:\nbreak\nyield i\ndef gen_uneven_lim(upper_limit=-1):\n\"\"\"Generate uneven natural numbers, up to max upper limit, or undefinitely\n    if max &lt; 1.\n    \"\"\"\nfor i in gen_uneven():\nif i &gt; upper_limit:\nbreak\nyield i\ndef gen_numbers(mode=\"even\"):\n\"\"\"Generate even or uneven natural numbers, undefinitely.\n    \"\"\"\nif mode == \"even\":\nreturn gen_even()\nelif mode == \"uneven\":\nreturn gen_uneven()\nelse:\nraise ValueError(f\"mode '{mode}' is not supported, use {even, uneven}\")\ndef gen_numbers_lim(mode=\"even\", upper_limit=-1):\n\"\"\"Generate even or uneven natural numbers up to max upper limit, or\n    undefinitely if max &lt; 1.\n    \"\"\"\nif mode == \"even\":\nreturn gen_even_lim(upper_limit)\nelif mode == \"uneven\":\nreturn gen_uneven_lim(upper_limit)\nelse:\nraise ValueError(f\"mode '{mode}' is not supported, use {even, uneven}\")\ndef main():\n# Run unlimited generator, but break out after a limit (checked outside of\n# the generator). In the REPL you'd interrupt the generator using Ctrl-c.\ngenerator = gen_even\nprint()\nprint(f\"*** Generator: {generator.__name__}\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator():\nif val &gt; 10:\nprint(\"...interrupting (use Ctrl-c when running in REPL)\")\nbreak\nprint(f\"even: {val}\")\n# Run even/uneven-switchable unlimited generator in \"even\" mode, but break\n# out after a limit (checked outside of the generator). In the REPL you'd\n# interrupt the generator using Ctrl-c.\ngenerator = gen_numbers\nprint()\nmode = \"even\"\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}')\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode):\nif val &gt; 10:\nprint(\"...interrupting (use Ctrl-c when running in REPL)\")\nbreak\nprint(f\"even: {val}\")\n# Run even/uneven-switchable unlimited generator in \"even\" mode, but break\n# out after a limit.\nprint()\nmode = \"uneven\"\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}')\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode):\nif val &gt; 10:\nprint(\"...interrupting (use Ctrl-c when running in REPL)\")\nbreak\nprint(f\"uneven: {val}\")\n# Run even/uneven-switchable limited generator in \"even\" mode with an upper\n# limit of 5.\ngenerator = gen_numbers_lim\nprint()\nmode = \"even\"\nlimit = 5\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}', limit={limit})\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode=mode, upper_limit=limit):\nprint(f\"even: {val}\")\n# Run even/uneven-switchable limited generator in \"uneven\" mode with an\n# upper limit of 5.\nprint()\nmode = \"uneven\"\nlimit = 5\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}', limit={limit})\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode=mode, upper_limit=limit):\nprint(f\"uneven: {val}\")\nif __name__ == \"__main__\":\n# If this program is invoked as the main program, as opposed to being\n# imported, run the main function.\nmain()\n</code></pre> <p></p>"},{"location":"training/lessons/hello-world/hello-world/","title":"Hello World","text":"<p>Lesson: Hello, world</p> TaskHintsSolution <p>Starting out with</p> <pre><code>&gt;&gt;&gt; name = 'Ada'\n</code></pre> <p>modify <code>print(\"Hello, world!\")</code> so that it additionally writes out the name, in uppercase letters.</p> <p>Expected result: <code>Hello, world ADA!</code></p> <p>You can use <code>help(\"\")</code> or <code>help(name)</code> to find out about string methods and how to convert text to uppercase text.</p> Really take a peek now? hello_world.py<pre><code>name = 'ada'\nprint(f'Hello, world {name.upper()}')\n</code></pre> <p></p> <p>Such simple snippets typically also work well as shell one-liners:</p> hello_world.sh<pre><code>python3 -c \"name = 'ada'; print(f'Hello, world {name.upper()}')\"\n</code></pre> hello_world.ps1<pre><code>&amp; 'C:\\Program Files\\Python\\3.6\\python.exe' -c \"name = 'ada'; print(f'Hello, world {name.upper()}')\"\n</code></pre>"},{"location":"training/lessons/input-number-rounding/input-number-rounding/","title":"Input Number Rounding","text":"<p>Lesson: Round Input Numbers</p> TaskHintsSolution <p>Write a program that lets the user enter a number with decimal places (e.g. 12.33) and then outputs this number rounded up and down to  whole numbers.</p> <p>Optional: Instead of rounding to whole numbers round to a configurable number of decimal places. Ask the user for the rounding decimal places to use first. Note: Do not round up and down in this case.</p> <p>Optional: Use <code>decimal.Decimal</code> to represent the input numbers if you used floats before. Otherwise, use <code>float</code> for the numbers now.</p> <p>Use the <code>input()</code> built-in function to read user input interactively.</p> <p>Remember how whole numbers can be represented in Python. Use <code>help(round)</code> to find out about the built-in <code>round()</code> function.</p> <p>The program output could look something like this:</p> <pre><code>python3 input_number_rounding.py\nPlease enter a number: 12.33\nRounded down: 12\nRounded up: 13\n\nPlease enter a number: 42\nRounded down: 42 \nRounded up: 42\n</code></pre> Really take a peek now? input_number_rounding.py<pre><code># input_number_rounding.py\nimport decimal\ndef input_rounding_digits(default='0'):\n\"\"\"Get the user input for the number of rounding digits.\n    \"\"\"\nprompt = f'Round to decimal digits [{default}]: '\nwhile True:\ninput_text = input(prompt).strip() or default\ntry:\nrounding_digits = int(input_text)\nbreak\nexcept ValueError:\nprint('Please enter an integer value.')\nreturn rounding_digits\ndef input_number(typ=float):\n\"\"\"Return a number of type 'typ' from user input.\n    \"\"\"\nwhile True:\ninput_text = input('Please enter a number: ').strip()\ntry:\n# Handle non-fractional int input separately for correct int\n# rounding.\nnumber = int(input_text)\nbreak\nexcept ValueError:\ntry:\nnumber = typ(input_text)\nbreak\nexcept (ValueError, decimal.InvalidOperation) as exc:\nprint(exc)\nreturn number\ndef input_number_mode(default='float'):\n\"\"\"Return a number type selected by user input.\n    \"\"\"\nnumber_types = {\n'float': float,\n'decimal': decimal.Decimal\n}\nwhile True:\ninput_text = input(\n'Please number type (float/decimal) [float]: ').strip() or default\nif input_text in ['float', 'decimal']:\nreturn number_types[input_text]\ndef main():\nnumber_type = input_number_mode()\nrounding_digits = input_rounding_digits()\nwhile True:\n# Break out with Ctrl-c i.e. KeyboardInterrupt.\nnumber  = input_number(number_type)\nif rounding_digits == 0:\nrounded_down = int(number)\nif isinstance(number, int):\nrounded_up = rounded_down\nelse:\nrounded_up = rounded_down + 1\nprint(f'Rounded down: {rounded_down}')\nprint(f'Rounded up: {rounded_up}')\nelse:\nrounded = round(number, rounding_digits)\nprint(f'Rounded to {rounding_digits} digits: {rounded}')\nif __name__ == '__main__':\nmain()\n</code></pre> <p></p>"},{"location":"training/lessons/list-modification/list-modification/","title":"List Modification","text":"<p>Lesson: List Modification</p> TaskHintsSolution <p>Starting out with</p> <pre><code>&gt;&gt;&gt; l = ['Agathe', 'Bauer']\n</code></pre> <p>modify <code>l</code> by</p> <ul> <li>changing the 1st element to \"I've\"</li> <li>changing the 2nd lement to \"got\"</li> <li>extending l with a 3rd element \"the power\"</li> </ul> <p>in-place, i.e. not by creating a new list object from l.</p> <p>You can use <code>help([])</code> to see extensive documentation on <code>list</code> operations.</p> Really take a peek now? list_modification.py<pre><code># list_modification.py\nl = [\"Agathe\", \"Bauer\"]\nprint(f\"Original list: l = {l}\")\nl[0] = \"I've\"\nl[1] = \"got\"\nl.append(\"the power\")\nprint(f\"In-place modified list: l = {l}\")\n</code></pre> <p></p>"},{"location":"training/lessons/object-introspection/object-introspection/","title":"Object Introspection","text":"<p>Lesson: Object Introspection</p> TaskHintsSolution <p>Write a program that lets the user enter a text.</p> <p>Try to convert the user's input text to data in this order:</p> <ol> <li>Try to convert the text to <code>int</code>.</li> <li>If that fails, try to convert to <code>float</code>.</li> <li>If that fails, simply use the text data.</li> </ol> <p>By introspection, find out about the converted object's callable methods, apart from those whose name starts with a leading underscore ('_').</p> <p>Generate and print a menu for the user to select which method should be applied to the (converted) object. Invoke the selected method and print the method's return value and the object.</p> <p>Optional: Some methods might require an argument and thus can not simply be called without. Find out if the method needs arguments in the introspection step and sort those out for the selection menu generation.</p> <p>Optional 2: Experiment with additional type converters for the input  data, e.g. also accept <code>list</code> and <code>tuple</code>. Can you simple use the <code>list</code> or <code>tuple</code> constructors for type conversion here? Try to execute the <code>sort</code> method of a list object.</p> <p>Use the <code>input()</code> built-in function to read user input interactively.</p> <p>Remember you can <code>try</code> an operation and catch a resulting exception if it fails.</p> <p>Optional: <code>inspect.signature</code> can provide you with information about a callable's parameters.</p> <p>Optional 2: An easy way to parse text input to lists or tuples is by using <code>json.loads</code>.</p> <p>The program output could look something like this:</p> <pre><code>python3 object_introspection.py\nYour input please: 42\nvalue = 42 [&lt;class 'int'&gt;]\n==========================================\nPlease select the method you want to call:\n1 - as_integer_ratio\n2 - bit_count\n3 - bit_length\n4 - conjugate\n5 - from_bytes\n6 - to_bytes\n==========================================\nPlease enter your choice: 1\nYou selected 'as_integer_ratio'\nResult:\n  (42).as_integer_ratio() --&gt; (42, 1) [&lt;class 'tuple'&gt;]\n  value = 42\n</code></pre> Really take a peek now? object_introspection.py<pre><code># object_introspection.property\nimport json\nimport sys\ndef ask_user(prompt='Your input please: ', types=(int, float, json.loads)):\n\"\"\"Get user input and convert to target data type with the 1st usable\n    `types` converter.\n    Returns the converted data or the string input if no converter is able to\n    convert the text input data.\n    \"\"\"\ntext = input(prompt)\n# str is the default.\nvalue = text\nfor typ in types:\ntry:\nvalue = typ(text)\nbreak\nexcept Exception:\n# Try the next type...\npass\nprint(f\"value = {value} [{type(value)}]\")\nreturn value\ndef get_object_methods(obj):\n\"\"\"Return a list of all `obj` methods that do not start with a leading\n    underscore.\n    \"\"\"\nmethods = [\nvalue for name in dir(obj)\nif not name.startswith('_') and callable(value := getattr(obj, name))\n]\nreturn methods\ndef select_method(methods):\nprint(\"==========================================\")\nprint(\"Please select the method you want to call:\")\nfor (i, method) in enumerate(methods):\nprint(f\" {i+1} - {method.__name__}\")\nprint(\"==========================================\")\nwhile (input_text := input(\"Please enter your choice: \")):\ntry:\nchoice = int(input_text)\nbreak\nexcept ValueError:\ncontinue\nselected_method = methods[choice-1]\nprint(f\"You selected '{selected_method.__name__}'\")\nreturn selected_method\ndef run_method(method):\nresult = method()\nprint(\"Result:\")\nprint(\nf\"  ({method.__self__}).{method.__name__}() --&gt; \"\nf\"{result} [{type(result)}]\"\n)\nprint(f\"  value = {method.__self__}\")\ndef main():\nobj = ask_user()\nmethods = get_object_methods(obj)\nselected_method = select_method(methods)\ntry:\nrun_method(selected_method)\nexcept Exception as exc:\nprint(f\"Oops! Ran into exception: {exc}.\")\nreturn 1\nif __name__ == \"__main__\":\nsys.exit(main())\n</code></pre> <p></p>"},{"location":"training/lessons/reverse-word-order/reverse-words/","title":"Reverse Word Order","text":"<p>Lesson: Reverse Words</p> TaskHintsSolution <p>Create a function that</p> <ul> <li>takes a single string argument and</li> <li>returns a string with the words of the original argument in reversed order</li> </ul> <p>E.g. when given <code>\"Mary says hi\"</code> the function returns <code>\"hi says Mary\"</code>.</p> <p>Optionally: Create a Python script <code>reverse_words.py</code> that takes a string command line argument and prints the words of this argument in reversed order. E.g. when executed as</p> <p><code>python3 reverse_words.py \"Mary says hi\"</code> the program prints <code>\"hi says Mary\"</code>.</p> <p>Optionally: Add options to the function and the script that allow for returning/printing the result string</p> <ol> <li> <p>You can access the command line arguments through <code>sys.argv</code>.</p> </li> <li> <p>Python features an extensive command line parsing library in the stlib: <code>argparse</code>.</p> <ul> <li>reversed or unreversed and that in</li> <li>all-uppercase, all-lowercase, titlecase or capitalized.</li> </ul> </li> <li> <p>Use <code>help(\"\")</code> or <code>help(str)</code> to learn useful string methods.</p> </li> </ol> Example <code>reverse_order</code>-function <pre><code>&gt;&gt;&gt; def reverse_order(words):\n...     list_of_words= words.split(' ')\n...     list_of_words.reverse() # NOTE: reverse is inplace\n...     return ' '.join(list_of_words)\n... \n&gt;&gt;&gt; reverse_order(\"Mary says hi\")\n'hi says Mary'\n&gt;&gt;&gt;\n</code></pre> Example reverse_words.py Script reverse_words.py<pre><code>\n</code></pre> <pre><code>python3.8 reverse_words.py --help\n</code></pre> <pre><code>python3.8 reverse_words.py --word \"Hi says Mary\" --format_style capitalize --reverse\n</code></pre> <p></p>"},{"location":"training/lessons/rewrite-dict-comprehension/rewrite-dict-comprehension/","title":"Rewrite Dict Comprehension","text":"<p>Lesson: Rewrite dict comprehension</p> TaskHintsSolution <p>Rewrite the dict comprehension</p> <pre><code>dct = {\nentry:\n'link' if os.path.islink(entry) else\n'dir' if os.path.isdir(entry) else\n'file' if os.path.isfile(entry) else\n'other'\nfor entry in os.listdir()\n}\n</code></pre> <p>using a \"traditional\" for loop and if-else statements.</p> <p>Use <code>help(os.listdir)</code> for more information about this standard library function.</p> <p>This site's repo contains a test directory with some typical (unix) file types (symbolic link, directory, file) in the <code>/docs/training/lessons/rewrite-dict-comprehension/test_dir</code> folder.</p> <p>Some notes:</p> <ul> <li>isfile() and isdir() follow symbolic links, so they will return their   link target file type. Thus, the islink() condition must come first   to actually detect a link file type.</li> <li>Windows: no symlinks, a checked-out link from the test_dir is   represented as a file and thus recognized as 'file'</li> </ul> Really take a peek now? rewrite_dict_comprehension.py<pre><code>import os\nimport pprint\n# Notes:\n# - isfile() and isdir() follow symbolic links, so they will return their link\n#   target file type. Thus, the islink() condition must come first to actually\n#   detect a link file type.\n# - Windows: no symlinks, a checked-out link from the test_dir is represented\n#   as a file and thus recognized as 'file'\ndef dict_comp_filetypes_cwd():\n\"\"\"Return a {&lt;path entry&gt;: &lt;file type} dictionary of the current working\n    directory.\n    Uses a dict comprehension.\n    \"\"\"\ndct = {\nentry:\n'link' if os.path.islink(entry) else\n'dir' if os.path.isdir(entry) else\n'file' if os.path.isfile(entry) else\n'other'\nfor entry in os.listdir()\n}\nreturn dct\ndef dict_comp_filetypes(path='.'):\n\"\"\"Return a {&lt;path entry&gt;: &lt;file type} dictionary of the given path.\n    Uses a dict comprehension.\n    \"\"\"\n# To avoid joining path + entry to the full path both for the dict key and\n# in the value's if-else expression, we (ab)use the walrus operator.\n# This *must* sit in the if condition part of the dict comprehension.\n# \n# Feels a tiny bit hacky, without walrus it looks like this:\n# \n# dct = {\n#   os.path.join(path, entry):\n#       'link' if os.path.islink(os.path.join(path, entry)) else\n#       'dir' if os.path.isdir(os.path.join(path, entry)) else\n#       'file' if os.path.isfile(os.path.join(path, entry)) else\n#       'other'\n#   for entry in os.listdir(path)\n#   }\ndct = {\nfile_path:\n'link' if os.path.islink(file_path) else\n'dir' if os.path.isdir(file_path) else\n'file' if os.path.isfile(file_path) else\n'other'\nfor entry in os.listdir(path)\nif (file_path := os.path.join(path, entry))\n}\nreturn dct\ndef for_loop_filetypes(path='.'):\n\"\"\"Return a {&lt;path entry&gt;: &lt;file type} dictionary of the given path.\n    Uses a traditional for loop.\n    \"\"\"\ndct = {}\nfor entry in os.listdir(path):\nfile_path = os.path.join(path, entry)\nif os.path.islink(file_path):\nfile_type = 'link'\nelif os.path.isdir(file_path):\nfile_type = 'dir'\nelif os.path.isfile(file_path):\nfile_type = 'file'\nelse:\nfile_typ = 'other'\ndct[file_path] = file_type\nreturn dct\ndef main(path):\nfunc = dict_comp_filetypes_cwd\nprint(f'\\n*** dict comprehension using {func.__name__}')\ndct = func()\npprint.pprint(dct)\nfunc = dict_comp_filetypes\nprint(f'\\n*** dict comprehension using {func.__name__}(path={path})')\ndct = func(path)\npprint.pprint(dct)\nfunc = for_loop_filetypes\nprint(f'\\n*** dict comprehension using {func.__name__}(path={path})')\ndct = func(path)\npprint.pprint(dct)\nif __name__ == '__main__':\nmain(path='./test_dir')\n</code></pre> <p></p>"},{"location":"training/lessons/send-mail/send-mail/","title":"Send Email","text":"<p>Lesson: Email-4-You</p> TaskHintsSolution <p>Send yourself an Email</p> <p>On program-start ask, the user to provide</p> <ul> <li>MAILHOST</li> <li>Email DOMAINNAME</li> </ul> <p>Afterwards</p> <ul> <li>get the username from the shell enivronment variable 'USERNAME' (Windows) or 'USER' (Linux) to prepare your email-address</li> <li>create a connection to the mail-host</li> <li>send yourself an email with the subject \"Hello from the Python-Course\" and the content = \"Currently working on ...\" from a synthetic email sender-address e.g. \"test.test@foo.de\" </li> </ul> <p>Optional: Extend the program to allow email-attachments. For this ask the user to provide a filepath for the attachment.</p> <p>Expected result: Check your email-account for the incoming email (opionally with attachment)</p> <ul> <li>use <code>input()</code>-builtin function to get user informations</li> <li>use <code>os.environ</code>- mapping object from the Python Standard Library, to read environment variables</li> <li>use <code>smtplib.SMTP</code>- class from the smtplib module of the Python Standard Library, to establish a connection to the mailserver</li> <li>use f-string <code>msg = f'From: {sender}\\nTo: {receiver}\\nSubject: {subject}\\n\\n{payload}'</code></li> </ul> <p>Optional:</p> <ul> <li>this time use the <code>email.message.EmailMessage</code>-class from email-package of the Python Standard Library to create an email message</li> </ul> Simple Python Email client sendmail_compact.py<pre><code>import os\nimport smtplib\ndef main():\ntry:\n# Ask for mail-server\nSMTP_HOST = input(\"SMTP_HOST: \")\ndomain_name = input(\"E-MAIL DOMAINNAME: \")\nif os.name == 'nt':\nuser = os.environ['USERNAME']\nelif os.name == 'posix':\nuser = os.environ['USER']\nsender = 'test.test@foo.de'\nsubject = 'Python-Course Test SMTP-Email'\nmsg_payload= 'This is a test Email.'\nreceiver = f\"{user}@{domain_name}\" \nreceivers = [receiver] # must be a list\n# NOTE: pre-formatted message!\nmsg = f'From: From Person {sender}\\nTo: {receiver}\\nSubject: {subject}\\n\\n{msg_payload}'\nprint(f'\\nEmail\\n&lt;&lt;&lt;\\n{msg}\\n&gt;&gt;&gt;\\n')\nmail_server = smtplib.SMTP(SMTP_HOST)\nmail_server.sendmail(sender, receivers, msg)\nexcept Exception as e:\nprint(f'ERROR: {str(e)}')\nif __name__ == '__main__':\nmain()\n</code></pre> <p></p> <p>Such simple snippets typically also work well as shell one-liners:</p> sendmail-compact.sh<pre><code>/usr/bin/python3.8 sendmail_compact.py\n</code></pre> sendmail-compact.ps1<pre><code>&amp; 'C:\\Program Files\\Python\\3.6\\python.exe' sendmail_compact.py\n</code></pre> Python Email client using 'MailServer'-class sendmail.py<pre><code>import os\nimport smtplib\nimport sys\nclass MailServer:\ndef __init__(self, smtp_host):\nself.mailserver = smtplib.SMTP(smtp_host)\n#self.mailserver.set_debuglevel(1)\ndef __del__(self):\nif self.mailserver:\nself.mailserver.quit()\ndef send_mail(self, sender, receivers, msg):\n''' send a pre-formatted' message '''\nself.mailserver.sendmail(sender, receivers, msg)\ndef main():\ntry:\n# Ask for mail-server\nSMTP_HOST = input(\"SMTP_HOST: \")\ndomain_name = input(\"E-MAIL DOMAINNAME: \")\nif os.name == 'nt':\nuser = os.environ['USERNAME']\nelif os.name == 'posix':\nuser = os.environ['USER']\nsender = 'test.test@foo.de'\nsubject = 'Python-Course Test SMTP-Email'\nmsg_payload= 'This is a test Email.'\nreceiver = f\"{user}@{domain_name}\" \nreceivers = [receiver] # must be a list\n# NOTE: Need this special format! see help()\nmsg = f'From: From Person {sender}\\nTo: {receiver}\\nSubject: {subject}\\n\\n{msg_payload}'\nprint(f'\\nEmail\\n&lt;&lt;&lt;\\n{msg}\\n&gt;&gt;&gt;\\n')\nmailServer= MailServer(SMTP_HOST)\n# # Provide a pre-formatted message 'msg'\nmailServer.send_mail(sender, receivers, msg)\nexcept Exception as e:\nprint(f'ERROR: {str(e)}')\nif __name__ == '__main__':\nmain()\n</code></pre> <p></p> <p>Such simple snippets typically also work well as shell one-liners:</p> sendmail.sh<pre><code>/usr/bin/python3.8 sendmail.py\n</code></pre> sendmail.ps1<pre><code>&amp; 'C:\\Program Files\\Python\\3.6\\python.exe' sendmail.py\n</code></pre> Python Email client enabled for email-attachments sendmail_with_attachment.py<pre><code>\n</code></pre> <p></p>"},{"location":"training/main-course/builtin-types/","title":"A practical Overview of Python Built-in Types","text":"<p>This chapter describes important properties of Python's built-in types.</p> <p>Python provides a bunch of popular data types. Simple types (also called primitive data types) as well as compound types, which are collections or containers of data of equal or different type.</p> <p>Each of the Python data types provide a data type-specific set of methods and operators that determine the data type's behaviour. This ensemble of data and behaviour defines the properties of all Python objects.  For the complete list please refer to Python Built-in Types.</p> <p>Python built-in data types are Python classes themselves. Instances of nearly all Python builtin data-types can be created in two different ways:</p> <ul> <li>using a type-specific literal notation: literals in the case of simple    data types or \"literals in brackets\" <code>(</code>,  <code>)</code>, <code>[</code>, <code>]</code>, <code>{</code>, <code>}</code> in    the case of compound data-types </li> <li>using the data type's class constructor</li> </ul> <p>The type of a literal or a variable (referencing or naming an object) can be identified using the built-in <code>type()</code>-function:</p> <pre><code>&gt;&gt;&gt; type(\"I'm curious about her\")\n&lt;class 'str'&gt;\n&gt;&gt;&gt; number = 42\n&gt;&gt;&gt; type(number)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/builtin-types/#numeric-datatypes","title":"Numeric datatypes","text":""},{"location":"training/main-course/builtin-types/#integers-int","title":"Integers - <code>int</code>","text":"<p>Example usage:</p> <pre><code>&gt;&gt;&gt; 1\n1\n&gt;&gt;&gt; int()\n0\n&gt;&gt;&gt; type(1)  # type of int\n&lt;class 'int'&gt;\n&gt;&gt;&gt; 1 + 2  # built-in '+'-operator for int\n3\n&gt;&gt;&gt; type(1 + 2)  # result type\n&lt;class 'int'&gt;\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/builtin-types/#floating-point-values-float","title":"Floating Point Values - <code>float</code>","text":"<p>Example usage: <pre><code>&gt;&gt;&gt; 1.2\n1.2\n&gt;&gt;&gt; float()\n0.0\n&gt;&gt;&gt; type(1.2)  # type of float-literal\n&lt;class 'float'&gt;\n&gt;&gt;&gt; 1.2 + 3.7  # built-in '+'-operator\n4.9\n&gt;&gt;&gt; type(1.2 + 3.7)  # result type\n&lt;class 'float'&gt;\n&gt;&gt;&gt;\n</code></pre></p> <p>Info</p> <p><code>float</code> is a binary floating point number representation. This has consequences regarding exact number representation (not possible for most base 10 decimal fractions, e.g. 1.1 or 2.2 are not representable exactly as floats) and brings rounding issues, see the great explanation in the official Python documentation.</p> <p>E.g.</p> <pre><code>&gt;&gt;&gt; 1.1  # The float string representation \"hides\" the inexactness(!) \n1.1\n&gt;&gt;&gt; '{:.51f}'.format(1.1)\n'1.100000000000000088817841970012523233890533447265625'\n</code></pre> <p>The standard library decimal module can be used if this is of concern i.e. whenever the problem domain requires exact base 10 decimal arithmetic and rounding, e.g. in finance.</p> <p>It features correct decimal rounding and user-configurable precision:</p> <pre><code>&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; decimal.Decimal('1.1')\nDecimal('1.1')\n</code></pre> <p>Lesson: Round Input Numbers</p> TaskHintsSolution <p>Write a program that lets the user enter a number with decimal places (e.g. 12.33) and then outputs this number rounded up and down to  whole numbers.</p> <p>Optional: Instead of rounding to whole numbers round to a configurable number of decimal places. Ask the user for the rounding decimal places to use first. Note: Do not round up and down in this case.</p> <p>Optional: Use <code>decimal.Decimal</code> to represent the input numbers if you used floats before. Otherwise, use <code>float</code> for the numbers now.</p> <p>Use the <code>input()</code> built-in function to read user input interactively.</p> <p>Remember how whole numbers can be represented in Python. Use <code>help(round)</code> to find out about the built-in <code>round()</code> function.</p> <p>The program output could look something like this:</p> <pre><code>python3 input_number_rounding.py\nPlease enter a number: 12.33\nRounded down: 12\nRounded up: 13\n\nPlease enter a number: 42\nRounded down: 42 \nRounded up: 42\n</code></pre> Really take a peek now? input_number_rounding.py<pre><code># input_number_rounding.py\nimport decimal\ndef input_rounding_digits(default='0'):\n\"\"\"Get the user input for the number of rounding digits.\n    \"\"\"\nprompt = f'Round to decimal digits [{default}]: '\nwhile True:\ninput_text = input(prompt).strip() or default\ntry:\nrounding_digits = int(input_text)\nbreak\nexcept ValueError:\nprint('Please enter an integer value.')\nreturn rounding_digits\ndef input_number(typ=float):\n\"\"\"Return a number of type 'typ' from user input.\n    \"\"\"\nwhile True:\ninput_text = input('Please enter a number: ').strip()\ntry:\n# Handle non-fractional int input separately for correct int\n# rounding.\nnumber = int(input_text)\nbreak\nexcept ValueError:\ntry:\nnumber = typ(input_text)\nbreak\nexcept (ValueError, decimal.InvalidOperation) as exc:\nprint(exc)\nreturn number\ndef input_number_mode(default='float'):\n\"\"\"Return a number type selected by user input.\n    \"\"\"\nnumber_types = {\n'float': float,\n'decimal': decimal.Decimal\n}\nwhile True:\ninput_text = input(\n'Please number type (float/decimal) [float]: ').strip() or default\nif input_text in ['float', 'decimal']:\nreturn number_types[input_text]\ndef main():\nnumber_type = input_number_mode()\nrounding_digits = input_rounding_digits()\nwhile True:\n# Break out with Ctrl-c i.e. KeyboardInterrupt.\nnumber  = input_number(number_type)\nif rounding_digits == 0:\nrounded_down = int(number)\nif isinstance(number, int):\nrounded_up = rounded_down\nelse:\nrounded_up = rounded_down + 1\nprint(f'Rounded down: {rounded_down}')\nprint(f'Rounded up: {rounded_up}')\nelse:\nrounded = round(number, rounding_digits)\nprint(f'Rounded to {rounding_digits} digits: {rounded}')\nif __name__ == '__main__':\nmain()\n</code></pre> <p></p>"},{"location":"training/main-course/builtin-types/#sequences","title":"Sequences","text":"<p>Sequences are indexed, ordered \"list data sets\" of objects:</p> <ul> <li>strings are immutable sequences of characters</li> <li>tuples are immutable sequences of arbitrary objects</li> <li>lists are mutable sequences of arbitrary objects</li> </ul>"},{"location":"training/main-course/builtin-types/#common-sequence-operations","title":"Common Sequence Operations","text":"<pre><code># Length of sequence s denoted as N\ns[i]                  # item at sequence s index i\ns[i:j]                # slice of s from i to j: s[i], ..., s[N-1] (a shallow copy)\ns[i:j:k]              # slice of s from i to j with step k: s[i], s[i+k], ...\nlen(s)                # length of s: N\nmin(s)                # smallest item in s\nmax(s)                # biggest item in s\ns.index(x[, i[, j]])  # index of item x (between i and j, if given)\ns.count(x)            # number of occurences of x in s\nx in s                # True if an item in s equals x\nx not in s            # False if an item in s equals x\ns1 + s2               # concatenation of s1 and s2\ns * n                 # n-times concatenation of s\nn * s                 # - \" -\n</code></pre>"},{"location":"training/main-course/builtin-types/#immutable-sequences","title":"Immutable Sequences","text":""},{"location":"training/main-course/builtin-types/#strings-str","title":"Strings - <code>str</code>","text":"<p>Strings are character sequences (of unicode characters):</p> <pre><code>&gt;&gt;&gt; s = 'text data is ubiquituous'\n&gt;&gt;&gt; s1, s2 = 'foo', 'bar'\n&gt;&gt;&gt; type(s)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; s[0]\n't'\n&gt;&gt;&gt; s[0:10]\n'text data '\n&gt;&gt;&gt; s[0:10:2]\n'tx aa'\n&gt;&gt;&gt; len(s)\n24\n&gt;&gt;&gt; min(s)\n' '\n&gt;&gt;&gt; max(s)\n'x'\n&gt;&gt;&gt; s.index('a')\n6\n&gt;&gt;&gt; s.index('data', 0, 10)  # use of substrings is supported\n5\n&gt;&gt;&gt; s.count('is')\n1\n&gt;&gt;&gt; 'data' in s\nTrue\n&gt;&gt;&gt; 'data' not in s\nFalse\n&gt;&gt;&gt; s1 + s2\n'foobar'\n&gt;&gt;&gt; s * 2\n'text data is ubiquituoustext data is ubiquituous'\n&gt;&gt;&gt; 2 * s\n'text data is ubiquituoustext data is ubiquituous'\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/builtin-types/#string-methods","title":"String Methods","text":"<p><code>str</code> objects have plenty of additional functionality:</p> <pre><code>----------------------------------------------------------------------\n# string s \ns.capitalize() -&gt; str\n# capitalized (1st character uppercase, rest lowercase) copy of s\n\n----------------------------------------------------------------------\ns.casefold() -&gt; str\n# \"casefolded\" copy of s (lowercase with replacement of \"caseless\" characters,\n# e.g. \"\u00df\" --&gt; \"ss\"\n\n----------------------------------------------------------------------\ns.center(width[, fillchar]) -&gt; str\n# s centered in width-length string, padded with fillchar (default blank)\n\n----------------------------------------------------------------------\ns.encode(encoding='utf-8', errors='strict') -&gt; bytes\n# return s encoded to bytes object with encoding.\n\n----------------------------------------------------------------------\ns.endswith(suffix[, start[, end]]) -&gt; bool\n# True if s ends with suffix, False otherwise. \n\n----------------------------------------------------------------------\ns.expandtabs(tabsize=8) -&gt; str\n# tab-to-space-expanded copy of s\n\n----------------------------------------------------------------------\ns.find(sub[, start[, end]]) -&gt; int\n# lowest index i is s where substring sub is found, -1 if not found.\n\n----------------------------------------------------------------------\ns.format(*args, **kwargs) -&gt; str\n# return copy of s with the {}-format placeholders substituted by arguments\n\n----------------------------------------------------------------------\ns.format_map(mapping) -&gt; str\n# return copy of s with the {}-format placeholders substituted from mapping\n\n----------------------------------------------------------------------\ns.isalnum() -&gt; bool\n# True if all characters are alphanumeric and s is non-empty\n\n----------------------------------------------------------------------\ns.isalpha() -&gt; bool\n# True if all characters are alphabetic and s is non-empty\n\n----------------------------------------------------------------------\ns.isdecimal() -&gt; bool\n# True if all characters are decimal (can form numbers in base 10) and s is non-empty\n\n----------------------------------------------------------------------\ns.isdigit() -&gt; bool\n# True if all characters are digits (includes sub-/superscripts) and s is non-empty\n\n----------------------------------------------------------------------\ns.isidentifier() -&gt; bool\n# True if s qualifies as a valid identifier\n\n----------------------------------------------------------------------\ns.islower() -&gt; bool\n# True if all characters are lowercase and s is non-empty\n\n----------------------------------------------------------------------\ns.isnumeric() -&gt; bool\n# True if all characters are numeric (have Unicode numeric property) and s is non-empty\n\n----------------------------------------------------------------------\ns.isprintable() -&gt; bool\n# True if all characters in S are printable\n\n----------------------------------------------------------------------\ns.isspace() -&gt; bool\n# True is s is all-whitespace and s is non-empty\n\n----------------------------------------------------------------------\ns.istitle() -&gt; bool\n# True is s is titlecased (each word in s starts uppercase and continues\nlowercase) and s is non-empty\n\n----------------------------------------------------------------------\ns.isupper() -&gt; bool\n# True if s is all uppercase\n\n----------------------------------------------------------------------\ns.join(iterable) -&gt; str\n# concatenate the strings in iterable with s as separator\n\n----------------------------------------------------------------------\ns.ljust(width[, fillchar]) -&gt; str\n# return string of length starting with s (\"left-justified\"), padded with\n# fillchar; doesn't truncate s if len(s) &gt; width\n\n----------------------------------------------------------------------\ns.lower() -&gt; str\n# return all-lowercase copy of s\n\n----------------------------------------------------------------------\ns.lstrip([chars]) -&gt; str\n# return copy of s with leading whitespace removed, or with each character in\n# chars removed from the beginning of s if chars is not None\n\n----------------------------------------------------------------------\ns.maketrans(x, y=None, z=None) -&gt; dict\n# return translation table dictionary for str.translate(); a single argument\n# must be a ordinal/character-to-ordinal/string/None mapping dictionary; two\n# arguments must be strings of the same length (chars + replacement chars)\n\n----------------------------------------------------------------------\ns.partition(sep) -&gt; (head, sep, tail)\n# return tuple (characters-before-sep, sep, characters-after sep) if separator\n# sep is found, otherwise (s, '', '')\n\n----------------------------------------------------------------------\ns.replace(old, new[, count]) -&gt; str\n# copy of s with all occurences (up to count) of substring old replaced by new\n\n----------------------------------------------------------------------\ns.rfind(sub[, start[, end]]) -&gt; int\n# return highest index where sub is found in s (between start and end), i.e.\n# \"search from the right\"; -1 if sub isn't found\n\n----------------------------------------------------------------------\ns.rindex(sub[, start[, end]]) -&gt; int\n# return highest index where sub is found in s (between start and end), i.e.\n# \"search from the right\"; raise ValueError if sub is not found\n\n----------------------------------------------------------------------\ns.rjust(width[, fillchar]) -&gt; str\n# return string of length ending with s (\"right-justified\"), padded with\n# fillchar; doesn't truncate s if len(s) &gt; width\n\n----------------------------------------------------------------------\ns.rpartition(sep) -&gt; (head, sep, tail)\n# return tuple (characters-before-sep, sep, characters-after sep) if separator\n# sep is found while searching from the end of s, otherwise (s, '', '')\n\n----------------------------------------------------------------------\ns.rsplit(sep=None, maxsplit=-1) -&gt; list of strings\n# split s at separator s (up to maxsplit, searching from the end of s), return\n# the resulting list of words; split at any whitespace if sep is None (the\n# default)\n\n----------------------------------------------------------------------\ns.rstrip([chars]) -&gt; str\n# return copy of s with trailing whitespace removed, or with each character in\n# chars removed from end of s if chars is not None\n\n----------------------------------------------------------------------\ns.split(sep=None, maxsplit=-1) -&gt; list of strings\n# split s at separator s (up to maxsplit, searching from the start of s),\n# return the resulting list of words; split at any whitespace if sep is None \n# (the default)\n\n----------------------------------------------------------------------\ns.splitlines([keepends]) -&gt; list of strings\n# return list of lines in s split at line boundaries\n\n----------------------------------------------------------------------\ns.startswith(prefix[, start[, end]]) -&gt; bool\n# True is s startswith prefix (can be a tuple of prefixes)\n\n----------------------------------------------------------------------\ns.strip([chars]) -&gt; str\n# return copy of s with leading + trailing whitespace removed, or with each\n# character in start and end of s, if chars is not None\n\n----------------------------------------------------------------------\ns.swapcase() -&gt; str\n# return an case-inverted copy of s\n\n----------------------------------------------------------------------\ns.title() -&gt; str\n# return a titlecased copy of s\n\n----------------------------------------------------------------------\ns.translate(table) -&gt; str\n# return copy of s with all characters replaced according to\n# ordinal-to-ordinal/string/None mapping replacement table \n\n----------------------------------------------------------------------\ns.upper() -&gt; str\n# return an all-uppercase copy of s\n\n----------------------------------------------------------------------\ns.zfill(width) -&gt; str\n# return s right-justified and padded with zeros; never truncates\n</code></pre>"},{"location":"training/main-course/builtin-types/#tuples-tuple","title":"Tuples - <code>tuple</code>","text":"<p>A Python list is an immutable sequence of arbitrary objects:</p> <pre><code>&gt;&gt;&gt; s = ('tuples', 'contain', 'objects', 42, 7.47, {'on': True, 'off': False},\n&gt;&gt;&gt; (-3, 0, 4), object())\n&gt;&gt;&gt; s1 = (1, 2, 3)\n&gt;&gt;&gt; s2 = (4.0, 5.0, 6.0)\n&gt;&gt;&gt; type(s)\n&lt;class 'tuple'&gt;\n&gt;&gt;&gt; s[0]\n'tuples'\n&gt;&gt;&gt; s[0:7]\n('tuples', 'contain', 'objects', 42, 7.47, {'on': True, 'off': False}, (-3, 0,\n4))\n&gt;&gt;&gt; s[0:7:2]\n('tuples', 'objects', 7.47, (-3, 0, 4))\n&gt;&gt;&gt; len(s)\n8\n&gt;&gt;&gt; min(s1)\n1\n&gt;&gt;&gt; max(s2)\n6.0\n&gt;&gt;&gt; s.index(42)\n3\n&gt;&gt;&gt; s.index(42, 0, 3)  # will raise: 42 is not in this index range\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: tuple.index(x): x not in tuple\n&gt;&gt;&gt; s.count(42)\n1\n&gt;&gt;&gt; 'objects' in s\nTrue\n&gt;&gt;&gt; 'types' not in s\nTrue\n&gt;&gt;&gt; s1 + s2\n(1, 2, 3, 4.0, 5.0, 6.0)\n&gt;&gt;&gt; s1 * 2\n(1, 2, 3, 1, 2, 3)\n&gt;&gt;&gt; 2 * s1\n(1, 2, 3, 1, 2, 3)\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/builtin-types/#mutable-sequences","title":"Mutable Sequences","text":""},{"location":"training/main-course/builtin-types/#lists-list","title":"Lists - <code>list</code>","text":"<p>A Python list is a mutable sequence of arbitrary objects.</p> <p>Common sequence operations on lists:</p> <pre><code>&gt;&gt;&gt; s = ['lists', 'contain', 'objects', 42, 7.47, {'on': True, 'off': False}, (-3,\n0, 4), object()]\n&gt;&gt;&gt; s1 = [1, 2, 3]\n&gt;&gt;&gt; s2 = [4.0, 5.0, 6.0]\n&gt;&gt;&gt; s[0]\n'lists'\n&gt;&gt;&gt; s[0:7]\n['lists', 'contain', 'objects', 42, 7.47, {'on': True, 'off': False}, (-3, 0,\n4)]\n&gt;&gt;&gt; s[0:7:2]\n['lists', 'objects', 7.47, (-3, 0, 4)]\n&gt;&gt;&gt; len(s)\n8\n&gt;&gt;&gt; min(s1)\n1\n&gt;&gt;&gt; max(s2)\n6.0\n&gt;&gt;&gt; s.index(42)\n3\n&gt;&gt;&gt; s.index(42, 0, 3)  # will raise: 42 is not in this index range\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: 42 is not in list\n&gt;&gt;&gt; s.count(42)\n1\n&gt;&gt;&gt; 'objects' in s\nTrue\n&gt;&gt;&gt; 'types' not in s\nTrue\n&gt;&gt;&gt; s1 + s2\n[1, 2, 3, 4.0, 5.0, 6.0]\n&gt;&gt;&gt; s1 * 2\n[1, 2, 3, 1, 2, 3]\n&gt;&gt;&gt; 2 * s1\n[1, 2, 3, 1, 2, 3]\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/builtin-types/#additional-operations","title":"Additional Operations","text":"<pre><code># Length of sequence s denoted as N\ns[i] = x              # set sequence s index i to x (replacing previous item)\ns[i:j] = iterable     # replace slice of s from i to j with iterable contents\ns[i:j:k] = iterable   # replace slice of s from i to j with step k with iterable contents\ns += iterable         # extend sequence s with iterable contents\ndel s[i]              # remove item at i from s\ndel s[i:j]            # remove items from i to j\ndel s[i:j:k]          # remove items from i to j, step width k\ndel s[:]              # remove all items from s\ns.clear()             # remove all items from s\ns.copy()              # create a shallow copy of s\ns.extend(iterable)    # extend sequence s with iterable contents\ns.insert(i, x)        # insert x at index i (i.e. before item previously at i)\ns.pop(i)              # remove item at i (default: -1, i.e. last item)\ns.remove(x)           # remove the first item in s that equals x\ns.reverse()           # reverse sequence items in-place\ns.sort()              # sort list items in-place; opt. key function + reverse flag\n</code></pre> <p>Additional modifying list operations:</p> <pre><code>&gt;&gt;&gt; s = ['lists', 'contain', 'objects', 42, 7.47, {'on': True, 'off': False},\n&gt;&gt;&gt; (-3, 0, 4), object()]\n&gt;&gt;&gt; s1 = [1, 2, 3]\n&gt;&gt;&gt; s2 = [4.0, 5.0, 6.0]\n&gt;&gt;&gt; s[0] = 'programs'\n&gt;&gt;&gt; print(s)\n['programs', 'contain', 'objects', 42, 7.47, {'on': True, 'off': False}, (-3,\n0, 4), &lt;object object at 0x7f6b7657e0c0&gt;]\n&gt;&gt;&gt; s.insert(2, 'lots of')\n&gt;&gt;&gt; print(s)\n['programs', 'contain', 'lots of', 'objects', 42, 7.47, {'on': True, 'off':\nFalse}, (-3, 0, 4), &lt;object object at 0x7f6b7657e0c0&gt;]\n&gt;&gt;&gt; s[4:5] = [1999, 2000, 2001]\n&gt;&gt;&gt; print(s)\n['programs', 'contain', 'lots of', 'objects', 1999, 2000, 2001, 7.47, {'on':\nTrue, 'off': False}, (-3, 0, 4), &lt;object object at 0x7f6b7657e0c0&gt;]\n&gt;&gt;&gt; s[5:-1] = ('a', 'b', 'c')\n&gt;&gt;&gt; print(s)\n['programs', 'contain', 'lots of', 'objects', 1999, 'a', 'b', 'c', &lt;object\nobject at 0x7f6b7657e0c0&gt;]\n&gt;&gt;&gt; del s[0]\n&gt;&gt;&gt; print(s)\n['contain', 'lots of', 'objects', 1999, 'a', 'b', 'c', &lt;object object at\n0x7f6b7657e0c0&gt;]\n&gt;&gt;&gt; del s[2:3]\n&gt;&gt;&gt; print(s)\n['contain', 'lots of', 1999, 'a', 'b', 'c', &lt;object object at 0x7f6b7657e0c0&gt;]\n&gt;&gt;&gt; del s[0:-1:2]\n&gt;&gt;&gt; print(s)\n['lots of', 'a', 'c', &lt;object object at 0x7f6b7657e0c0&gt;]\n&gt;&gt;&gt; del s[:]       # same as s.clear()\n&gt;&gt;&gt; print(s)\n[]\n&gt;&gt;&gt; print(s.copy())\n[]\n&gt;&gt;&gt; s.extend(s1)\n&gt;&gt;&gt; print(s)\n[1, 2, 3]\n&gt;&gt;&gt; s += s2\n&gt;&gt;&gt; print(s)\n[1, 2, 3, 4.0, 5.0, 6.0]\n&gt;&gt;&gt; s.pop(0)\n1\n&gt;&gt;&gt; print(s)\n[2, 3, 4.0, 5.0, 6.0]\n&gt;&gt;&gt; s.remove(3)\n&gt;&gt;&gt; print(s)\n[2, 4.0, 5.0, 6.0]\n&gt;&gt;&gt; s.reverse()\n&gt;&gt;&gt; print(s)\n[6.0, 5.0, 4.0, 2]\n&gt;&gt;&gt;\n</code></pre> <p>Hint: The Python standard library also provides an <code>array</code>-type where the objects are restricted to be of the same type, see Python Arrays.</p>"},{"location":"training/main-course/builtin-types/#dictionaries-dict","title":"Dictionaries - <code>dict</code>","text":"<p>Dictionaries are mapping objects: a collection of objects indexed by key values.1 Keys must be hashable objects which rules out certain mutable objects (e.g. a <code>dict</code> or a <code>set</code> cannot act as a dictionary key). </p> <p>Since Python 3.72 dictionary order is guaranteed to be insertion order, with updating a key not affecting order.</p> <p>Dictionaries support the following operations:</p> <pre><code># m is a dictionary (a \"mapping\")\nlen(m) -&gt; int                         # number of items in m\nm[k] -&gt; object                        # value for key k in m; KeyError if no k\nm[k] = v                              # set value v for key k in mapping\ndel m[k]                              # remove item with key k; KeyError if no k\nk in m -&gt; bool                        # True if k is key in m\nm.clear() -&gt; None                     # empty m i.e. remove all items\nm.copy() -&gt; dict                      # shallow copy of m\nm.fromkeys(iterable, value=None)      # create dict with keys from iterable,\n# values set to value.\nm.get(k, d=None) -&gt; m[k]              # m[k] if k in m, else d. \nm.items() -&gt; dict_items(m)            # iterable set-like object as a view on\n# m's items\nm.keys() -&gt; dict_keys(m)              # iterable set-like object as a view on\n# m's keys\nm.pop(k, [, d]) -&gt; m[k]               # remove key and return the corresponding\n# value; raise KeyError if k is not found\n# unless default d\nm.popitem() -&gt; (k, v)                 # remove and return (key, value) pair\n#(LIFO); KeyError if m is empty\nm.setdefault(k [, d]) -&gt; m.get(k, d)  # Return m[k] if k in d else set D[k] = d\n# and return d\nm.update(b[, ]**kwargs)               # update m from dict/iterable (key,\n# value)-sequence b and kwargs \nm.values() -&gt; dict_values(m)          # iterable object as a view on m's values\n</code></pre> <p><code>dict</code> example</p> <pre><code>&gt;&gt;&gt; {'name': 'Paul', 'age': 26, 'profession': 'author'}\n{'name': 'Paul', 'age': 26, 'profession': 'author'}\n&gt;&gt;&gt; type({'name': 'Paul', 'age': 26, 'profession': 'author'})\n&lt;class 'dict'&gt;\n&gt;&gt;&gt; \n</code></pre> <p>dictionary-lookup</p> <p>Accessing individual elements of a dictionary <code>m</code> is done using the dictionary key-indexing-operator <code>m.[key]</code></p> <pre><code>&gt;&gt;&gt; {'name': 'Paul', 'age': 26, 'profession': 'author'}['name']\n'Paul'\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/builtin-types/#sets-set","title":"Sets - <code>set</code>","text":"<p>The Python <code>set</code> is a datatype according to the mathematical set theory it therefore is a collection of unique unnamed objects, probably of different types, and a set-operations like <code>union</code>, <code>intersection</code> and others.</p> <p>As opposed to the other Python builtin data types, <code>set</code>- type generation can only be done explicitly</p> <p><code>set</code>- types generation</p> <pre><code>&gt;&gt;&gt; set([1,2, 'foo']) # explicit: 'set'- class constructor (1) using '[' ']' brackets\n{1,2,'foo'}\n&gt;&gt;&gt; set((1,2,'foo'))  # explicit: 'set'- class constructor (2) using '(' ')' brackets\n{1,2,'foo'}\n</code></pre> <p><code>set</code>-example</p> <pre><code>&gt;&gt;&gt; set([1, 2,'foo'])   # simple set with uniqe elements\n{1, 2, 'foo'}\n&gt;&gt;&gt; type(set([1, 2,'foo'])) # type of set\n&lt;class 'set'&gt;\n&gt;&gt;&gt; set([1, 2,'foo', 'foo'])  # simple set with a non-uniqe element (getting dropped)\n{1, 2, 'foo'}\n&gt;&gt;&gt; type(set([1, 2,'foo', 'foo']))\n&lt;class 'set'&gt;\n&gt;&gt;&gt; set([1, 2,'foo']) &amp; set([1,2]) # intersection of 2 sets using '&amp;'-operator\n{1, 2}\n&gt;&gt;&gt; type(set([1, 2,'foo']) &amp; set([1,2]))\n&lt;class 'set'&gt;\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/builtin-types/#none-none","title":"None - <code>None</code>","text":"<p>The Python <code>None</code> type is referred to as the <code>Null</code>-Object. It has a builtin contstant named <code>None</code></p> <pre><code>&gt;&gt;&gt; None\n&gt;&gt;&gt; type(None)\n&lt;class 'NoneType'&gt;\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/builtin-types/#boolean-bool","title":"Boolean <code>bool</code>","text":"<p>The Python <code>bool</code> type has a two builtin constants named <code>False</code> an <code>True</code></p> <pre><code>&gt;&gt;&gt; True\nTrue\n&gt;&gt;&gt; type(True)\n&gt;&gt;&gt; &lt;class 'bool'&gt;\n&gt;&gt;&gt; \n</code></pre> <ol> <li> <p>Sometimes such objects are called \"hash table\" or \"associative array\".\u00a0\u21a9</p> </li> <li> <p>(C)Python 3.6 actually, but then an implementation detail rather than a language property.\u00a0\u21a9</p> </li> </ol>"},{"location":"training/main-course/classes-instances/","title":"Be classy: Python Classes and Instances","text":"<p>Classes are the Python building block creating user-defined types in an object-oriented manner. Classes encapsulate data ('attributes') and appropriate functions ('methods'), which define the bahaviour of class-instances (i.e. objects of that class). Python supports 'composition' (\"has-a\"-relation) and (multiple-) 'inheritance' (\"is-a\"-relation) between classes/instances. In combination with 'method-overriding' and a special kind of 'polymorphism' (Duck-Typing), Python offers most of bunch of object-oriented features (Most, because Python doesn't really supports class privacy as explained below). Classes itself are objects, as such define a state (e.g. the <code>__name__</code> attribute) and a behaviour (a set of methods) - the most common is the class-costructor, which creates instances of a class.</p> <p>Let's start with a simple class.</p>"},{"location":"training/main-course/classes-instances/#simple-class","title":"Simple class","text":"<p>Simple classe typically have instance-attributes and instance-methods.</p> <ol> <li>instance attributes: <ul> <li>each class instance has its own 'local' copy of its instance-atttributes  </li> <li>instance-attributes are accessd using the <code>.</code>-dot operator:  Pseudo-syntax <code>&lt;class-instance&gt;.&lt;instance-attribute&gt;</code></li> </ul> </li> <li>instance-methods: <ul> <li>must be called with a class-instance</li> <li>instance-methods are accessed using the <code>.</code>-dot operator: Pseudo-syntax <code>&lt;class-instance&gt;.&lt;instance-method&gt;(&lt;params&gt;)</code></li> <li>the 'class constructor' is named <code>__init__()</code>. The <code>__init__()</code>-method is not mandatory to create class-instances (that's the task of the <code>__new__()</code>-method, which is implicitly there. But practically the <code>__init__()</code>-method is always necessary to initialize the instance-attributes. To be more precisely: A class-instatiation is a 2-step process 1. creating the class (<code>__new__()</code>)and 2. initialisation (<code>__init__()</code>). During a class-instantiation these 2-steps are implicitly performed by the interpreter.</li> <li>a class can define a destructor-mehod called <code>__del__()</code>, to explicitly do some finalizer tasks e.g. close ressources opened by the class-instance. The destructor is never called explicitly by user-code, instead its is called by the interpreters garbage collector, when the reference count (see Object Lifetime and Object Reference) of the class instance reaches 0. For more details see del().</li> <li>every instance-method need an explicit 1.st-parameter named <code>self</code></li> </ul> </li> </ol> <p>class definition example (1)</p> <pre><code>&gt;&gt;&gt; class A:pass\n...\n&gt;&gt;&gt;\n</code></pre> <p>class <code>__name__</code>- attribute</p> <pre><code>&gt;&gt;&gt; A.__name__\n'A'\n&gt;&gt;&gt;\n</code></pre> <p>class definition (2) </p> <pre><code>&gt;&gt;&gt; class A:\n...     def __init__(self, name):  # class constructor\n...          self.name = name      # instance-attribute\n...     def getName(self):         # instance method\n...         return self.name\n... \n&gt;&gt;&gt;\n</code></pre> <p>class instantiation - attribute and method access</p> <pre><code>&gt;&gt;&gt; a1 = A('A')\n&gt;&gt;&gt; a1.name                # attribute-access using class-instance and '.'-dot operator\n'A'\n&gt;&gt;&gt; a1.getName()           # method-access  using class-instance and '.'-dot operator\n'A'\n&gt;&gt;&gt;  a.__class__.__name__  # class-attribute \n'A'\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/classes-instances/#note-on-self-parameter","title":"Note on <code>self</code>-parameter","text":"<p>During a instance-method call the python interpreter implicity converts (pseudocode)</p> <pre><code>&lt;class-instance-object&gt;.&lt;instance-method&gt;(&lt;param-1&gt;, ... &lt;param-n&gt;)\n</code></pre> <p>into</p> <pre><code>&lt;class-object&gt;.&lt;instance-method&gt;(&lt;class-instance-object&gt;, &lt;param-1&gt;, ..., &lt;param-n&gt;)\n</code></pre> <p>The <code>self</code>-argument is the class-instance-object iself. See also the section Instance methods auf the Python docs.</p> <p>The <code>self</code>-parameter is therefore similar to the <code>this</code>-pointer of C++ and Java:</p> <ol> <li>Python <code>self</code>: Explicit 1.st parameter in every instance-method</li> <li>C++ <code>this</code>-pointer: Implicit parameter to all member functions. It's a keyword holding a pointer to the current object </li> <li>Java <code>this</code>-reference: Implicit parameter of all member functions. It's a keyword holdung a reference to the current object</li> </ol> <p>Note: The name <code>self</code> is a convention , and could be changed, but it shouldn't, because it keeps's the code understandable.</p>"},{"location":"training/main-course/classes-instances/#class-privacy-private-attributes","title":"Class Privacy - private Attributes","text":"<p>Python doesen't provide any kind of 'access-specifiers' like e.g. C++ (<code>public</code>, <code>private</code>, <code>protected</code>) to control access to attributes or methods. I.e. attributes and methods are 'public' accessible.</p> <p>Python provides 2 weak forms of data-hiding (but no real protection by access-control)</p> <ol> <li>'private-by-convention': Attributes prefixed with a single underscore <code>_</code> should be regarded as a private attribute</li> <li>'private-by-lexical-substitition': Attributes prefixed with double underscores <code>__</code> like e.g. <code>__foo</code> will be implicitly renamed to <code>_classname__foo</code> by the interpreter. This textual substitution is called 'name-mangling'.</li> </ol> <p>As can be seen the following example this 'protections' can be bypassed:</p> <pre><code>&gt;&gt;&gt; class A:\n...     def __init__(self, name):\n...         self.name = name\n...         self._name = name        # attribute 'private-by-convention'\n...         self.__name = name       # attribute 'private-by-lexical-substitution'\n...     def getName(self):\n...         return self.name\n...     def _getName(self):\n...         return self._name\n...     def __getName(self):\n...         return self.__name\n...\n&gt;&gt;&gt;\n</code></pre> <p>usage</p> <pre><code>&gt;&gt;&gt; a = A(\"ClassPrivacy\")\n&gt;&gt;&gt; dir(a)\n['_A__getName', '_A__name', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_getName', '_name', 'getName', 'name']\n&gt;&gt;&gt; a.name             # (1) public attribute\n'ClassPrivacy'\n&gt;&gt;&gt; a._name            # (2) private-by-convention ==&gt; still accessible\n'ClassPrivacy'\n&gt;&gt;&gt; a.__name           # (3) private-by-lecical-convention ==&gt; not accessible because it is not found\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__name'\n&gt;&gt;&gt; a.getName()        # (4) public method                       \n'ClassPrivacy'\n&gt;&gt;&gt; a._getName()       # (5) private-by-convention ==&gt; still accessible/callable\n'ClassPrivacy'\n&gt;&gt;&gt; a.__getName()      # (6) private-by-lexical-convention ==&gt; not accessible because it is not found\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'A' object has no attribute '__getName'\n&gt;&gt;&gt; a._A__name         # (7) bypass protection because you know the rule\n'ClassPrivacy'\n&gt;&gt;&gt; a._A__getName()    # (8) bypass protection because you know the rule\n'ClassPrivacy'\n&gt;&gt;&gt;\n</code></pre> <p>For more details please refer to Private Variables</p>"},{"location":"training/main-course/classes-instances/#inheritance-is-a-relation","title":"Inheritance (\"is-a\"-relation)","text":"<p>Note on class privacy: As mentioned above, Python doesn't provide any real mechanism for class privacy, neither 'data-protection' nor 'data-hiding'. This also applies to class-inheritance. Inheritance is public by default, as a consequence all of the base-class attributes and methods are inherited by the derived-class</p> <p>class definition </p> <pre><code>&gt;&gt;&gt; class B(A):                            # class 'B' inherhits from class 'A'\n...     def __init__(self, name, number):  # class constructor\n...         A.__init__(self, name)         # call base-class initialisation-method\n...         self.number = number           # instance variable\n...     def getNumber(self):               # instance methode\n...         return self.number\n... \n&gt;&gt;&gt; \n</code></pre> <p>class instantiation</p> <pre><code>&gt;&gt;&gt; b = B('Inheritance', 100)\n&gt;&gt;&gt; b.name                                # attribute-access\n'Inheritance'\n&gt;&gt;&gt; b.getName()                           # method-access\n'Inheritance'\n&gt;&gt;&gt; b.number                              # attribute-access\n100\n&gt;&gt;&gt; b.getNumber()                         # attribute-access     \n100\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/classes-instances/#multiple-inheritance","title":"Multiple Inheritance","text":"<p>Python also supports multiple inheritance</p> <p>class definition </p> <pre><code>&gt;&gt;&gt; class A:\n...     def __init__(self, name):\n...         self.name = name\n...     def getName(self):\n...         return self.name\n... \n&gt;&gt;&gt;\n&gt;&gt;&gt; class Z:\n...     def __init__(self, another_name):\n...         self.another_name = another_name\n...     def getAnotherName(self):\n...         return self.another_name\n... \n&gt;&gt;&gt;\n&gt;&gt;&gt; class B(A,Z):   # multiple inheritance \n...     def __init__(self, name, another_name, number):\n...         A.__init__(self, name)           # call base-class initialisation-method of class 'A'\n...         Z.__init__(self, another_name)   # call base-class initialisation-method of class 'Z'\n...         self.number = number\n...     def getNumber(self):\n...         return self.number\n...\n&gt;&gt;&gt;\n</code></pre> <p>class instantiation </p> <pre><code>&gt;&gt;&gt; b = B('BaseClass_A', 'BaseClass_Z', 100)\n&gt;&gt;&gt; b.getNumber()\n100\n&gt;&gt;&gt; b.getName()\n'BaseClass_A'\n&gt;&gt;&gt; b.getAnotherName()\n'BaseClass_Z'\n&gt;&gt;&gt; dir(b)\n['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'another_name', 'getAnotherName', 'getName', 'getNumber', 'name', 'number']\n&gt;&gt;&gt;\n</code></pre> <p>Note: The <code>dir(&lt;object&gt;</code>)- builtin function lists all names in the namespace of the given object. As can be seen above all defined names of all base-class are in the namespace of the derived class.</p>"},{"location":"training/main-course/classes-instances/#composition-has-a-relation","title":"Composition (\"has-a\"-relation)","text":"<p>Python also support composition, i.e. a class 'Car' has an instance-attribute pointing to an instance-attribute of class 'Engine'</p>"},{"location":"training/main-course/classes-instances/#owned-by-composition","title":"'Owned-By' Composition","text":"<p>class definitions</p> <pre><code>&gt;&gt;&gt; class Engine:\n...     def __init__(self, name):\n...         self.name = name\n...     def getName(self):\n...         return self.name\n... \n&gt;&gt;&gt; class Car:\n...     def __init__(self, name, engine_name):\n...         # 'class Engine' instance is owned (it's created)\n...         self.engine = Engine(engine_name)\n...         self.name = name\n...     def getName(self):\n...         return self.name\n... \n&gt;&gt;&gt; \n</code></pre> <p>class instantiation</p> <pre><code>&gt;&gt;&gt; car = Car('Porsche', 'V6-Engine')\n&gt;&gt;&gt; car.getName()\n'Porsche'\n&gt;&gt;&gt; car.engine.getName()\n'V6-Engine'\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/classes-instances/#used-by-composition","title":"'Used-By' Composition","text":"<p>class definitions</p> <pre><code>&gt;&gt;&gt; class Engine:\n...     def __init__(self, name):\n...         self.name = name\n...     def getName(self):\n...         return self.name\n... \n&gt;&gt;&gt; class Car:\n...     def __init__(self, name, engine):\n...         # 'class Engine' instance is used (it's injected)\n...         self.engine = engine\n...         self.name = name\n...     def getName(self):\n...         return self.name\n... \n&gt;&gt;&gt; \n</code></pre> <p>class instantiation</p> <pre><code>&gt;&gt;&gt; engine = Engine('V6-Engine')\n&gt;&gt;&gt; car = Car('Porsche', engine)\n&gt;&gt;&gt; engine.getName()\n'V6-Engine'\n&gt;&gt;&gt; car.getName()\n'Porsche'\n&gt;&gt;&gt; car.engine.getName()\n'V6-Engine'\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/classes-instances/#a-note-on-inheritance-vs-composition","title":"A note on 'Inheritance vs Composition'","text":"<p>Key principle of both concepts is code reusabilty:</p> <ul> <li>Inheritance: Base class methods are inherited by derived classes and can be extended or overwritten</li> <li>Composition: Combines existing classes to build more complex classes</li> </ul> <p>Interest reading in The Composition Over Inheritance Principle first described in the Gang of Four Book</p>"},{"location":"training/main-course/classes-instances/#class-attributes","title":"Class Attributes","text":"<p>As opposed to 'instance'-attributes 'class'-attributes are common to all class instances.</p> <p>class definition</p> <pre><code>&gt;&gt;&gt; class A:\n...     count = 0\n...     def __init__(self, name):\n...         self.name = name\n...         A.count += 1\n... \n&gt;&gt;&gt; \n</code></pre> <p>class instantiation</p> <pre><code>&gt;&gt;&gt; a1 = A('A1')    # 1.st instance increments class-attribute\n&gt;&gt;&gt; a1.count\n1\n&gt;&gt;&gt; a2 = A('A2')    # 2.nd instance increments class-attribute\n&gt;&gt;&gt; a2.count\n2\n&gt;&gt;&gt; a1.count        # Note: both instances share the same attribute\n2\n&gt;&gt;&gt;\n&gt;&gt;&gt; id(a1.count)\n140201179340160\n&gt;&gt;&gt; id(a2.count)\n140201179340160\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/classes-instances/#class-properties","title":"Class Properties","text":"<p>Ordinary Python instance-attributes are by default 'readable', 'writable' and 'deletable'. Python class properties ('property-attributes') are attributes with 'access-control', i.e. they can be designed to be 'readable', 'writeable' and 'deletable'. Python properties therefore are managed attributes. This is done with special <code>getter</code>-, <code>setter</code>- and <code>deleter</code>- methods which enables the properties to be accessed as ordinary atttributes (instead of a method-call).</p> <p>Usecase: Properties are a way of data encapusulation. Hiding ordinary attributes behind a 'property-interface/facade' introduces a level of indirection to the origin attribute. The origin attribute may change behind the scenes in keeping the user interface with the property-facade. The property can be seen as the user-interface, while the origin attribute is an implementation detail which is a subject to change. </p> <p>Python support two different ways of implementing properties:</p> <ol> <li>'lower-level' using <code>property()</code> builtin function</li> <li>'higher-level' using  <code>@propery</code>-decorator</li> </ol> <p>The Python docs provide a good property-example, with read-, write- and delete-access. For convenience this is simply copied here. </p> <p>example using <code>property()</code>-builtin function</p> <pre><code>class C:\ndef __init__(self):\nself._x = None\ndef getx(self):\nreturn self._x\ndef setx(self, value):\nself._x = value\ndef delx(self):\ndel self._x\nx = property(getx, setx, delx, \"I'm the 'x' property.\")\n</code></pre> <p>usage</p> <pre><code>&gt;&gt;&gt; p1 = C()\n&gt;&gt;&gt; p1.x = 1       # (1) set property value\n&gt;&gt;&gt; p1.x           # (2) get property value\n1\n&gt;&gt;&gt; del p1.x       # (3) delete property\n&gt;&gt;&gt; p1.x = 11      # (4) re-create property\n&gt;&gt;&gt; p1.x\n11\n</code></pre> <p>example using the <code>@propery</code>-builtin decorator <pre><code>class C:\ndef __init__(self):\nself._x = None\n@property\ndef x(self):\n\"\"\"I'm the 'x' property.\"\"\"\nreturn self._x\n@x.setter\ndef x(self, value):\nself._x = value\n@x.deleter\ndef x(self):\ndel self._x\n</code></pre></p> <p>usage</p> <pre><code>&gt;&gt;&gt; p1 = C()\n&gt;&gt;&gt; p1.x = 9       # (1) set property value\n&gt;&gt;&gt; p1.x           # (2) get property value\n9\n&gt;&gt;&gt; del p1.x       # (3) delete property\n&gt;&gt;&gt; p1.x = 99      # (4) re-create property\n&gt;&gt;&gt; p1.x\n99\n&gt;&gt;&gt;\n</code></pre> <p>*'readonly property example ***</p> <p>The above example stripped-down to be read-only:</p> <pre><code>&gt;&gt;&gt; class C:\n...     def __init__(self, x):\n...         self._x = x\n...     @property\n...     def x(self):\n...         return self._x\n... \n&gt;&gt;&gt;\n</code></pre> <p>usage</p> <pre><code>&gt;&gt;&gt; a = C('foo')\n&gt;&gt;&gt; a.x                                   # (1) read access\n'foo'\n&gt;&gt;&gt; a.x = 'bar'                           # (2) write access\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: can't set attribute\n&gt;&gt;&gt; del a.x                              # (3) delete access\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: can't delete attribute\n&gt;&gt;&gt;  \n</code></pre> <p>Note: Property 'x' is read-only, write- and delete-access fail.</p>"},{"location":"training/main-course/classes-instances/#duck-typing","title":"Duck Typing","text":"<p>Statically typed languages like C++ use virtual function for runtime polymorphism. Derived classes therefore override base-class functions retaining their signature. When base-class objects, which hold a derived class reference, call their base-class function, the runtime will virtual dispatch the derived-class function. This allows programing on a abstract base-class level. But this is restricted to class-objects having an inheritance relationship.</p> <p>Pythons polymorphism is based on 'duck typing', where the polymorphism is not based on common types, instead it is based on common behaviour (methods) and attributes of the objects itself. See Wikipedia article on Duck typing: \"If it walks like a duck and it quacks like a duck, then it must be a duck\" </p> <p>This enable more architecural freedom on the program/class-design, because class-hierarchies can be breaked down and allow more loosely coupled program-design, as David M. Beazley writes in his Book \"Python Essential Reference (Fourth Edition)\".</p>"},{"location":"training/main-course/classes-instances/#special-methods","title":"Special Methods","text":""},{"location":"training/main-course/classes-instances/#class-methods","title":"class methods","text":"<p>As opposed to instance-methods, class-methods operate on the class-object.</p> <p>Usecase:  Python doesn't support method overloading like C++ or Java. Therefore multiple methods with the same name within a single class is not supported. As a consequence only a single class constructor (<code>__init__()</code>-method) can be defined. With 'class-method's it's possible to overcome this.</p> <p>Python 'classc-methods' are defined using the <code>@sclassmethod</code>-decorator preceeding to the method-definition</p> <p><code>@classmethod</code>-example</p> <pre><code>&gt;&gt;&gt; class ByteStringStore:\n...     encoding = 'utf-8'\n...     def __init__(self, bytestring):\n...         self.bytestring = bytestring\n...     @classmethod\n...     def from_unicode(cls, unicodestring):\n...         return cls(unicodestring.encode(cls.encoding)\n... \n... )\n... \n&gt;&gt;&gt; a = ByteStringStore(b'abc')\n&gt;&gt;&gt; b= ByteStringStore.from_unicode('\u00e4\u00f6\u00fc')\n&gt;&gt;&gt; type(a)\n&lt;class '__main__.ByteStringStore'&gt;\n&gt;&gt;&gt; type(b)\n&lt;class '__main__.ByteStringStore'&gt;\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/classes-instances/#static-methods","title":"Static Methods","text":"<p>Python static-methods neither work on class-instance-objects nor on class-objects (that's the task of 'instance-method' and 'class-methods'). Python 'static-methods' can best be compared to module-functions, defined in the namespace of a class, instead of a modules-namespace.</p> <p>Usecase: Python 'static-methods' can be used for (utility-)functions that logical link to a class, but do not work on the class or their instaances itself</p> <p>Python 'static-methods' are defined using the <code>@staticmethod</code>-decorator preceeding to the method-definition</p> <p><code>@staticmethod</code>-example</p> <pre><code>&gt;&gt;&gt; class A:\n...     @staticmethod\n...     def mystaticmethod():\n...         print('this is a staticmethod')\n... \n&gt;&gt;&gt; A.mystaticmethod()\nthis is a staticmethod\n&gt;&gt;&gt;\n</code></pre> <p>Python <code>@staticmethods</code> are the correspondents to C++ and Java staticmethods, see the Python docs for <code>classmethod</code></p>"},{"location":"training/main-course/classes-instances/#callable-classes","title":"Callable Classes","text":"<p>Callable classes are classes where the class-instances can simply be called as a function. Giving the class a callable-interface, their instances are callable. A class is made callable by defining a the special instance-method named <code>__call__()</code>).</p> <p>Usecase:  If different classes provide different instance-method names for the same functionality (e.g. <code>A.getName()</code> and <code>B.getMyName()</code>), the usage for the programmers is cumbersome. If they want to get the name from the objects on the one hand they have to call <code>a.getName()</code>and on the other hand <code>b.getMyName()</code>. Making the classes callable, gives them a uniform interface, the name for both class-instance can be fetched in the same manner, simply using the object-name following parenthesis: <code>a()</code> and <code>b()</code>.</p> <p>Definition of a callable class</p> <pre><code>&gt;&gt;&gt; class CallableClass:\n...     name = None\n...     def __init__(self, name):\n...         CallableClass.name = name\n...     def getName(self):\n...         print('&gt;&gt;&gt; calling normal instance-method: %s() &lt;&lt;&lt;' % self.getName.__name__)\n...         return CallableClass.name\n...     def __call__(self):\n...         print('&gt;&gt;&gt; calling special instance-method: %s() &lt;&lt;&lt;' % self.__call__.__name__)\n...         return CallableClass.name\n... \n&gt;&gt;&gt;\n</code></pre> <p>Usage of a callable instance </p> <pre><code>&gt;&gt;&gt; foo = CallableClass('foo')                        # (1) Create an instance of the callable class\n&gt;&gt;&gt; print('name = %s' % foo.getName())                # (2) use the 'standard'-class-interface instance-method 'getName()'\n&gt;&gt;&gt; calling normal instance-method: getName() &lt;&lt;&lt;\nname = foo\n&gt;&gt;&gt; print('name = %s' % foo())                        # (3) use the 'callable'-class-interface instance-method '__call__()'\n&gt;&gt;&gt; calling special instance-method: __call__() &lt;&lt;&lt;\nname = foo\n&gt;&gt;&gt; \n</code></pre> <p>Let's give it a try</p> <p>Lesson: Customer Class</p> TaskHintsSolution <ol> <li> <p>Create the following class-hierarchy:</p> <ol> <li> <p>Class Customer</p> <ul> <li>class-attribute: <code>number_of_customers</code> (which should increment with every new class-instance)</li> <li>class constructor with parameter: <code>email</code>, <code>employees</code></li> <li>instance-attribute: <code>id</code> (current value of <code>number_of_customers</code>)</li> <li>instance-attribute: <code>email</code></li> <li>instance-attribute: <code>employees</code> (number of employees)</li> <li>instance-method: <code>getEmployees</code> (returning <code>employees</code>)</li> </ul> </li> <li> <p>Class Retail(Customer)</p> <ul> <li>private class attribute: <code>__type</code> initialized to 'Retail'</li> <li>class constructor with parameters: <code>name</code>, <code>email</code>, <code>employees</code></li> <li>private instance-attribute: <code>__retailname</code> (initialized with <code>name</code>-parameter)</li> <li>instance-method: <code>getName</code> (returning private instance-attribute <code>__retailname</code>)</li> <li>instance-method: <code>getType</code> (returning private class-attribute <code>__type</code>)</li> </ul> </li> <li> <p>Class Wholesale(Customer)</p> <ul> <li>private class attribute: <code>__type</code> initialized to 'Wholesale'</li> <li>class constructor with parameters: <code>name</code>, <code>email</code>, <code>employee</code></li> <li>private instance-attribute: <code>__wholesalename</code> (initialized with <code>name</code>-parameter)</li> <li>instance-method: <code>getName</code> (returning private instance-attribute <code>__wholesalename</code>)</li> <li>instance-method: <code>getType</code> (returning private class-attribute <code>__type</code>)</li> </ul> </li> </ol> </li> <li> <p>Create a <code>list</code> of Customers of different customer-types ('Retail'- and 'Wholesale'-customers)</p> </li> <li> <p>Output the attributes <code>name</code>, <code>type</code>, <code>id</code>, <code>employees</code> for all customers (use classic-loop or list-comprehension)    </p> </li> </ol> <ul> <li>provide a callable interface <code>__call__()</code> for the derived classes returning the customer's name</li> </ul> Example Customer-Class Implementation customer.py<pre><code>class Customer:\n''' This is a customer class '''\n# class-wide attribute(s) - common to all class-instances '''\nnumber_of_customers = 0\ndef __init__(self, email, employees):\n''' class instance initialization '''\n# some instance attributes\nself.email = email\nself.employees = employees\nCustomer.number_of_customers += 1\nself.id = Customer.number_of_customers\ndef getEmployees(self):\nreturn self.employees\nclass Retail(Customer):\n__type = 'Retail'\ndef __init__(self, name, *args):     # use variadic parameter '*args'\n# call base class constructor\nself.__retailname = name         # 'private' (name-mangled) instance-attribute \nCustomer.__init__(self, *args)\ndef __call__(self):\nreturn self.getName()            # (1) call instance-method\n#return self.__retailname        # (2) access private attribute\ndef getName(self):\nreturn self.__retailname\ndef getType(self):\nreturn self.__type               # access private attribute\nclass Wholesale(Customer):\n__type = 'Wholesale'\ndef __init__(self, name, *args):     # use variadic parameter *args\n# call base class constructor\nself.__wholesalename = name      # 'private' (name-mangled) instance-attribute\nCustomer.__init__(self, *args)\ndef __call__(self):\nreturn self.getName()            # (1) call instance-method\n#return self.__wholesalename     # (2) access private attribute\ndef getName(self):\nreturn self.__wholesalename      # access private attribute\ndef getType(self):\nreturn self.__type\ndef main():\nprint(f'Number of customers - on start: {Customer.number_of_customers}')\n# Create customers of different type\ncustomers = [\nRetail('Peter - Fish &amp; Chips', 'peter@email.com', 4),\nRetail('Bob - Pipe Cleaning', 'bob.@email.com', 13),\nWholesale('Brown Chemicals', 'brown.chemicals@email.com', 3500),\nWholesale('Duck Industries','duck.industries@email.com', 1800),\n]\nprint(f'Number of customers - after creation of customers: {Customer.number_of_customers}')\n# output using classic loop\nprint('\\n&gt;&gt;&gt; 1. Output using classic for loop &lt;&lt;&lt;\\n')\nfor customer in customers:\nprint(f'''\n        Customer Name: {customer()}\n        Customer Id: {customer.id}\n        Customer Type: {customer.getType()}\n        Number of Employees: {customer.employees}\n        ''')\n# output using list comprehension\nprint('&gt;&gt;&gt; 2. Output using list comprehension &lt;&lt;&lt;\\n')\n[ print(f'''\n        Customer Name: {c()}\n        Customer Id: {c.id}\n        Customer Type: {c.getType()}\n        Number of Employees: {c.employees}\n    ''') for c in customers]\nif __name__ == '__main__':\nmain()\n</code></pre> <p></p>"},{"location":"training/main-course/classes-instances/#class-decorators","title":"Class Decorators","text":"<p>Decorators are explained in detail here. Here we just give a brief overview concerning decorating in the context of classes.</p> <p>Usecase Generally speaking a decorator is a 'wrappers' around functions or classes with the purpose of adding some functionality. Wrappers are callable object, see callable-class.</p> <p>So there are two parties in the decorating process:</p> <ol> <li>the decorator</li> <li>the object to be decorated</li> </ol>"},{"location":"training/main-course/classes-instances/#using-a-class-as-a-decorator","title":"Using a class as a decorator","text":"<p>In the following example we define a class as a decorator and define a function which is decorated with this 'class-decorator'.</p> <p>Class Decorator definition and function decoration</p> <pre><code>&gt;&gt;&gt; class MyDecorator:\n...     def __init__(self, func):\n...         self.func = func\n...     def __call__(self, *args):\n...         # put the additional functionalty here around the function\n...         print('==&gt; START calling %s()' % self.func.__name__)  # some output before the wrapped function is called\n...         self.func(*args)                                      # call the wrapped-function\n...         print('&lt;== END calling %s()' % self.func.__name__)    # some output after the wrapped function is called\n... \n&gt;&gt;&gt; @MyDecorator\n... def myfunc(x):\n...     print('&gt;&gt;&gt; INSIDE decorated function: %s&lt;&lt;&lt;' % x)\n... \n&gt;&gt;&gt;\n</code></pre> <p>function call</p> <pre><code>&gt;&gt;&gt; myfunc('decorator-example')\n==&gt; START calling myfunc()\n&gt;&gt;&gt; INSIDE decorated function: decorator-example&lt;&lt;&lt;\n&lt;== END calling myfunc()\n&gt;&gt;&gt; \n</code></pre> <p>Note: Here the class-decorator was used to provide some additional output, when the 'decorated' function is called.</p>"},{"location":"training/main-course/classes-instances/#decorating-a-class","title":"Decorating a class","text":"<p>In the following example we define a function as a decorator and define a class which is decorated with this 'function-decorator'.</p> <p>Note: Here the decorator works on class-definition level, providing some additional funtionality around the class-definition. For sure a rather infrequent usecase which can be classified in some sense as meta-programming.</p> <pre><code>&gt;&gt;&gt; def mydecoratorfunc(cls):\n...     print('&gt;&gt;&gt; A new class was born: %s' % cls)\n...     return cls\n... \n&gt;&gt;&gt; @mydecoratorfunc\n... class A: pass\n... \n&gt;&gt;&gt; A new class was born: &lt;class '__main__.A'&gt;\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/classes-instances/#class-testing","title":"Class Testing","text":"<p>Python provides 2 builtin-function to identify/test the membership on class-instance-types.</p> <ol> <li><code>types()</code>: Identifies the concrete class of the class-instance</li> <li><code>isinstance()</code>: Testing the belonging to a certain type (along the class-hierarchy!)</li> </ol> <pre><code>&gt;&gt;&gt; class A(): pass\n... \n&gt;&gt;&gt; class B(A): pass\n... \n&gt;&gt;&gt; class C(): pass\n... \n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; b = B()\n&gt;&gt;&gt; c = C()\n&gt;&gt;&gt; type(a)\n&lt;class '__main__.A'&gt;\n&gt;&gt;&gt; type(b)\n&lt;class '__main__.B'&gt;\n&gt;&gt;&gt; type(c)\n&lt;class '__main__.C'&gt;\n&gt;&gt;&gt; isinstance(a, A)\nTrue\n&gt;&gt;&gt; isinstance(b, A)          # check along the inheritance-hierarchy\nTrue\n&gt;&gt;&gt; isinstance(c, B)\nFalse\n</code></pre>"},{"location":"training/main-course/classes-instances/#metaclasses","title":"MetaClasses","text":"<p>It should be mentioned that Python also supports techniques for meta-programming, for example to create metaclasses. But this is subject to advanced courses.</p>"},{"location":"training/main-course/classes-instances/#further-readings-on-classes","title":"Further readings on classes","text":"<p>Please refer to the Python docs about Classes.</p>"},{"location":"training/main-course/context-managers/","title":"Context is Key: Context Managers","text":"<p>Python objects that follow the so-called \"context manager protocol\" can be  used with Python's <code>with</code> statement. The <code>with</code> statement starts a code block that is processed \"within a context\", e.g. a resource that has been acquired:</p> <pre><code>&gt;&gt;&gt; with open(\"myfile.txt\", \"w\") as myfile:\n...     myfile.write(\"Hello!\")\n... \n6\n&gt;&gt;&gt; with open(\"myfile.txt\", \"r\") as myfile:\n...     myfile.readlines()\n... \n['Hello!']\n&gt;&gt;&gt; \n&gt;&gt; myfile\n&lt;_io.TextIOWrapper name='myfile.txt' mode='r' encoding='UTF-8'&gt;\n&gt;&gt;&gt; myfile.closed\nTrue\n&gt;&gt;&gt; \n</code></pre> <p>After the <code>with</code> statement code block ends the context is \"terminated\", e.g. an acquired resource gets closed or destroyed.</p> <p>This is a useful mechanism for (but not limited to) closing resources that shouldn't be left open. Prominent examples for such resources are</p> <ul> <li>files</li> <li>network connections</li> <li>database connections</li> </ul> <p>It's possible to use multiple context managers for a code block:</p> <pre><code>&gt;&gt;&gt; with open('in.txt', 'r') as infile, open('out.txt', 'w') as outfile:\n&gt;&gt;&gt;     for line in infile:\n&gt;&gt;&gt;         # better do s.th. sensible with line first...\n&gt;&gt;&gt;         outfile.write(line)\n&gt;&gt;&gt;\n</code></pre> <p>Context managers can be implemented by providing an object with the context manager protocol methods:</p> <pre><code>class MyContextManager:\ndef __enter__(self):\n# context initialization goes here (e.g. resource acquisition)\n# ...\ndef __exit__(self, exc_type, exc_value, traceback):\n# context finalization goes here (e.g. resource closing/cleanup)\n# ...\n</code></pre> <p>A context manager object gets entered through the <code>with</code> statement execution and exits when the <code>with</code> code block ends.</p> <p>Useful tools for easily creating context managers can be found in the stdlib <code>contextlib</code>.</p>"},{"location":"training/main-course/decorators/","title":"Python decorators","text":"<p>Python decorators are used to add functionality to functions, methods or classes. Some of the use cases are e.g.:</p> <ul> <li>add logging/tracing around function calls</li> <li>add locking for threaded code</li> <li>register functions or classes </li> <li>add caching to callables</li> </ul>"},{"location":"training/main-course/decorators/#decorating-functions","title":"Decorating functions","text":"<p>A very basic decorator to trace function entry and exit could look like this: <pre><code>&gt;&gt;&gt; def trace(func):\n...     # create a wrapper function...\n...     def _wrapper(*args, **kwargs):\n...         # ...that prints entry to and exit from the wrapped function,\n...         # with function name, arguments and result...\n...         print('--&gt; {func}(args={args}, kwargs={kwargs})'.format(\n...             func=func.__name__, args=args, kwargs=kwargs))\n...         result = func(*args, **kwargs)\n...         print('&lt;-- {func} -&gt; {result}'.format(\n...             func=func.__name__, result=result))\n...     # ...and return the wrapper for use instead of the original function\n...     return _wrapper\n... \n</code></pre></p> <p>We can now apply this decorator to a function: <pre><code>&gt;&gt;&gt; @trace\n... def inc(x):\n...     \"\"\"Return x increased by 1.\"\"\"\n...     return x + 1\n... \n&gt;&gt;&gt;\n</code></pre></p> <p>Calling our decorated \"traced\" function:</p> <pre><code>&gt;&gt;&gt; inc(6)\n--&gt; inc(args=(6,), kwargs={})\n&lt;-- inc -&gt; 7\n&gt;&gt;&gt;\n</code></pre> <p>Note how we have instrumented the original function with tracing output, while not modifying any of the original function code.</p> <p>Since a (function) decorator is just a callable that takes a function as an argument and returns an enhanced, wrapped version of that function, the  <code>@</code>-decorator syntax is merely syntactial \"sugar\" for: <pre><code>&gt;&gt;&gt; def inc(x):\n...     \"\"\"Return x increased by 1.\"\"\"\n...     return x + 1\n... \n&gt;&gt;&gt; inc = trace(inc)\n&gt;&gt;&gt; inc(6)\n--&gt; inc(args=(6,), kwargs={})\n&lt;-- inc -&gt; 7\n&gt;&gt;&gt; \n</code></pre></p> <p>Let's take a look at how our decorated function behaves, now using @decorator-syntax again:</p> <pre><code>&gt;&gt;&gt; def trace(func):\n...     # create a wrapper function...\n...     def _wrapper(*args, **kwargs):\n...         # ...that prints entry to and exit from the wrapped function,\n...         # with function name, arguments and result...\n...         print('--&gt; {func}(args={args}, kwargs={kwargs})'.format(\n...             func=func.__name__, args=args, kwargs=kwargs))\n...         result = func(*args, **kwargs)\n...         print('&lt;-- {func} -&gt; {result}'.format(\n...             func=func.__name__, result=result))\n...     # ...and return the wrapper for use instead of the original function\n...     return _wrapper\n... \n&gt;&gt;&gt; @trace\n... def inc(x):\n...     \"\"\"Return x increased by 1.\n...     \"\"\"\n...     return 1\n... \n&gt;&gt;&gt; print(inc.__doc__)\nNone\n&gt;&gt;&gt; inspect.signature(inc)\n&lt;Signature (*args, **kwargs)&gt;\n&gt;&gt;&gt;  \n</code></pre> <p>Hm, this doesn't look too good a citizen:  - the original function documentation has been lost  - there's no information about the original function argument signature</p> <p>This is due to the fact that we see docstring and function signature of the wrapper, not the wrapped function. Luckily, there's a convenient way for us to  retain this information using the <code>functools</code> library:</p> <pre><code>&gt;&gt;&gt; def trace(func):\n...     # create a wrapper function...\n...     @functools.wraps(func)\n...     def _wrapper(*args, **kwargs):\n...         # ...that prints entry to and exit from the wrapped function,\n...         # with function name, arguments and result...\n...         print('--&gt; {func}(args={args}, kwargs={kwargs})'.format(\n...             func=func.__name__, args=args, kwargs=kwargs))\n...         result = func(*args, **kwargs)\n...         print('&lt;-- {func} -&gt; {result}'.format(\n...             func=func.__name__, result=result))\n...     # ...and return the wrapper for use instead of the original function\n...     return _wrapper\n... \n&gt;&gt;&gt; @trace\n... def inc(x):\n...     \"\"\"Return x increased by 1.\n...     \"\"\"\n...     return x + 1\n... \n&gt;&gt;&gt; print(inc.__doc__)\nReturn x increased by 1.\n&gt;&gt;&gt; inspect.signature(inc)\n&lt;Signature (x)&gt;\n&gt;&gt;&gt;  \n</code></pre>"},{"location":"training/main-course/decorators/#decorating-methods","title":"Decorating methods","text":"<p>We can just as well decorate methods:</p> <pre><code>&gt;&gt;&gt; class Increaser:\n...     def __init__(self, increment=1):\n...         self.increment = increment\n...     @trace\n...     def inc(self, x):\n...         \"\"\"Return x increased by increment init argument.\n...         \"\"\"\n...         return x + self.increment\n... \n&gt;&gt;&gt; inc = Increaser(3)\n&gt;&gt;&gt; inc.inc(10)\n--&gt; inc(args=(&lt;__main__.Increaser object at 0x7fc62185c320&gt;, 10), kwargs={})\n&lt;-- inc -&gt; 13\n&gt;&gt;&gt; \n&gt;&gt;&gt; print(inc.inc.__doc__)\nReturn x increased by increment init argument.\n&gt;&gt;&gt; inspect.signature(inc.inc)\n&lt;Signature (x)&gt;\n&gt;&gt;&gt; \n</code></pre> <p>In fact, Python implements its notion of class methods and static methods via the built-in <code>@classmethod</code> and <code>@staticmethod</code> decorators.</p>"},{"location":"training/main-course/decorators/#decorating-classes","title":"Decorating classes","text":"<p>Decorating classes is just as easy:</p> <pre><code>&gt;&gt;&gt; class Registry:\n...     _registered_classes = []\n...     \n...     @classmethod\n...     def register(cls, register_cls):\n...         cls._registered_classes.append(register_cls)\n...     \n...     @classmethod\n...     def registered_classes(cls):\n...         return cls._registered_classes\n... \n&gt;&gt;&gt; register = Registry.register\n&gt;&gt;&gt; registry = Registry()\n&gt;&gt;&gt; \n&gt;&gt;&gt; @register\n... class MyClass1:\n...     pass\n... \n&gt;&gt;&gt; @register\n... class MyClass2:\n...     pass\n... \n&gt;&gt;&gt; registry.registered_classes()\n[&lt;class '__main__.MyClass1'&gt;, &lt;class '__main__.MyClass2'&gt;]\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/decorators/#advanced-decorators","title":"Advanced Decorators","text":"<p>Decorators can also take arguments.</p> <p>Let's modify the tracing functionality to allow for selective entry and/or exit tracing:</p> <pre><code>&gt;&gt;&gt; def traced(entry=True, exit=True):\n...     # create tracing wrappers depending on the entry &amp; exit args\n...     if entry and exit:\n...         def trace(func):\n...             @functools.wraps(func)\n...             def _wrapper(*args, **kwargs):\n...                 print('--&gt; {func}(args={args}, kwargs={kwargs})'.format(\n...                     func=func.__name__, args=args, kwargs=kwargs))\n...                 result = func(*args, **kwargs)\n...                 print('&lt;-- {func} -&gt; {result}'.format(\n...                    func=func.__name__, result=result))\n...             return _wrapper\n...     \n...     elif entry:\n...         def trace(func):\n...             @functools.wraps(func)\n...             def _wrapper(*args, **kwargs):\n...                 print('--&gt; {func}(args={args}, kwargs={kwargs})'.format(\n...                     func=func.__name__, args=args, kwargs=kwargs))\n...                 result = func(*args, **kwargs)\n...             return _wrapper\n...     \n...     elif exit:\n...         def trace(func):\n...             @functools.wraps(func)\n...             def _wrapper(*args, **kwargs):\n...                 result = func(*args, **kwargs)\n...                 print('&lt;-- {func} -&gt; {result}'.format(\n...                    func=func.__name__, result=result))\n...             return _wrapper\n...     else:\n...         trace = None\n...     \n...     # create the decorator that will add the selected tracing setup \n...     def decorate(cls):\n...         if trace is not None:\n...             for (name, method) in inspect.getmembers(cls):\n...                 if not name.startswith('__'):\n...                     wrapped = trace(method)\n...                     setattr(cls, name, wrapped)\n...         return cls\n...     \n...     return decorate\n... \n&gt;&gt;&gt; \n</code></pre> <p>We'll try this out on a delicious fruit salad:</p> <pre><code>&gt;&gt;&gt; class FruitSalad:\n...         \n...     def __init__(self):\n...         self.fruits = {}\n...     \n...     def add(self, fruit, weight):\n...         if fruit not in self.fruits:\n...             self.fruits[fruit] = weight\n...         else:\n...             self.fruits[fruit] += weight\n... \n&gt;&gt;&gt; \n&gt;&gt;&gt; fruit_salad = FruitSalad()\n&gt;&gt;&gt; fruit_salad.add('apple', '500')\n&gt;&gt;&gt; fruit_salad.add('orange', '800')\n&gt;&gt;&gt; \n</code></pre> <p>Make a traced fruit salad:</p> <pre><code>&gt;&gt;&gt; \n&gt;&gt;&gt; @traced()\n... class FruitSalad:\n...         \n...     def __init__(self):\n...         self.fruits = {}\n...     \n...     def add(self, fruit, weight):\n...         if fruit not in self.fruits:\n...             self.fruits[fruit] = weight\n...         else:\n...             self.fruits[fruit] += weight\n... \n&gt;&gt;&gt; fruit_salad = FruitSalad()\n&gt;&gt;&gt; fruit_salad.add('apple', '500')\n--&gt; add(args=(&lt;__main__.FruitSalad object at 0x7fc61868cda0&gt;, 'apple', '500'),\nkwargs={})\n&lt;-- add -&gt; None\n&gt;&gt;&gt; fruit_salad.add('orange', '800')\n--&gt; add(args=(&lt;__main__.FruitSalad object at 0x7fc61868cda0&gt;, 'orange', '800'),\nkwargs={})\n&lt;-- add -&gt; None\n&gt;&gt;&gt; \n</code></pre> <p>This might look a little bit confusing initially. The important point is to realize that the callable <code>traced</code> we use in the <code>@traced()</code> decoration line is now rather a \"decorator factory\" than a decorator: it creates a decorator  (the <code>decorate</code> function), and returns this to be applied on the decorated class.</p> <p>We can now switch off tracing method entry and only trace funtion exit:</p> <pre><code>&gt;&gt;&gt; \n&gt;&gt;&gt; @traced(entry=False)\n... class FruitSalad:\n...         \n...     def __init__(self):\n...         self.fruits = {}\n...     \n...     def add(self, fruit, weight):\n...         if fruit not in self.fruits:\n...             self.fruits[fruit] = weight\n...         else:\n...             self.fruits[fruit] += weight\n... \n&gt;&gt;&gt; fruit_salad = FruitSalad()\n&gt;&gt;&gt; fruit_salad.add('apple', '500')\n&lt;-- add -&gt; None\n&gt;&gt;&gt; fruit_salad.add('orange', '800')\n&lt;-- add -&gt; None\n&gt;&gt;&gt; \n</code></pre> <p>Note: Maybe that's just cosmetics but it's a little annoying that we need to use <code>@traced()</code> syntax even if we simple use the default arguments.</p> <p>Let's make use of Python's [keyword-only] syntax to work around this:</p> <pre><code>&gt;&gt;&gt; def traced(cls=None, *, entry=True, exit=True):\n...     if entry and exit:\n...         def trace(func):\n...             @functools.wraps(func)\n...             def _wrapper(*args, **kwargs):\n...                 print('--&gt; {func}(args={args}, kwargs={kwargs})'.format(\n...                     func=func.__name__, args=args, kwargs=kwargs))\n...                 result = func(*args, **kwargs)\n...                 print('&lt;-- {func} -&gt; {result}'.format(\n...                    func=func.__name__, result=result))\n...             return _wrapper\n...     \n...     elif entry:\n...         def trace(func):\n...             @functools.wraps(func)\n...             def _wrapper(*args, **kwargs):\n...                 print('--&gt; {func}(args={args}, kwargs={kwargs})'.format(\n...                     func=func.__name__, args=args, kwargs=kwargs))\n...                 result = func(*args, **kwargs)\n...             return _wrapper\n...     \n...     elif exit:\n...         def trace(func):\n...             @functools.wraps(func)\n...             def _wrapper(*args, **kwargs):\n...                 result = func(*args, **kwargs)\n...                 print('&lt;-- {func} -&gt; {result}'.format(\n...                    func=func.__name__, result=result))\n...             return _wrapper\n...     else:\n...         trace = None\n...     \n...     def decorate(cls):\n...         if trace is not None:\n...             for (name, method) in inspect.getmembers(cls):\n...                 if not name.startswith('__'):\n...                     wrapped = trace(method)\n...                     setattr(cls, name, wrapped)\n...         return cls\n...     \n...     \n...     if cls is None:\n...         # called with arguments\n...         return decorate\n...     else:\n...         # invoked without arguments\n...         return decorate(cls)\n...\n&gt;&gt;&gt;\n</code></pre> <p>We are now able to omit () from the decoration line:</p> <pre><code>&gt;&gt;&gt; @traced\n... class FruitSalad:\n...         \n...     def __init__(self):\n...         self.fruits = {}\n...     \n...     def add(self, fruit, weight):\n...         if fruit not in self.fruits:\n...             self.fruits[fruit] = weight\n...         else:\n...             self.fruits[fruit] += weight\n... \n&gt;&gt;&gt; fruit_salad = FruitSalad()\n&gt;&gt;&gt; fruit_salad.add('apple', '500')\n--&gt; add(args=(&lt;__main__.FruitSalad object at 0x7fc61868cda0&gt;, 'apple', '500'),\nkwargs={})\n&lt;-- add -&gt; None\n&gt;&gt;&gt; fruit_salad.add('orange', '800')\n--&gt; add(args=(&lt;__main__.FruitSalad object at 0x7fc61868cda0&gt;, 'orange', '800'),\nkwargs={})\n&lt;-- add -&gt; None\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/decorators/#further-reading","title":"Further Reading","text":"<p>One of the most exhaustive discussions of decorator intricacies is a series of blog posts by Graham Dumpleton, who also wrote the wrapt library for decoration purposes.</p>"},{"location":"training/main-course/exceptions/","title":"Exceptional behaviour: Creating and handling exceptions","text":"<p>Exceptions are the answer of handling errors during program-execution. A SyntaxError is an Exception which ca't be handled. Every other error can be programatically be expected and processed</p> <p>Errors mainly occur in circumstances where</p> <ol> <li>program resources are</li> <li>occupied/unavailable</li> <li>data is not as expected</li> <li>wrong-type</li> <li>wrong format</li> <li>wrong value e.g.out-of-range)</li> </ol> <p>This section gives a brief overview of exception-handling</p> <p>But lets start with creating a simple exception</p>"},{"location":"training/main-course/exceptions/#creating-an-exception","title":"Creating an Exception","text":"<p>FileNotFoundError</p> <p>This an example from the 1.st category 'resource not available'</p> <pre><code>&gt;&gt;&gt; open('foo.txt')\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFileNotFoundError: [Errno 2] No such file or directory: 'foo.txt'\n&gt;&gt;&gt;\n</code></pre> <p>TypeError Exception example</p> <p>This an example from the 2.nd category 'data not as is expected'</p> <pre><code>&gt;&gt;&gt; a = 'foo' + 1\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: must be str, not int\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/exceptions/#handling-exceptions","title":"Handling Exceptions","text":"<p>Similar to C++ <code>try-catch</code>- and Java's <code>try-catch</code> statements, Python provides a <code>try-except-finally</code>-statement. The complete description can be founf in the Python docs Handling Exceptions</p> <p>A simple example An example showing the general usage</p> <p><pre><code>&gt;&gt;&gt; try:\n...     # statements in the try-block\n...     pass\n... except FileNotFoundError as e:             # catch two different exceptions in one 'except'-block\n...     # handle 'FileNotFoundError'\n... except TypeError as e:\n...     # handle 'TypeError'\n...     pass\n... except (ImportError, NameError) as e:      # catch two different exceptions in one 'except'-block\n...     # Handle 'ImportError' and 'KeyError'\n...     pass\n&gt;&gt;&gt;\n</code></pre> In this example excpetions of type 'FileNotFoundError', 'ImportError','NameError' will be catched. Every other exception will be provided to the surrounding code-block and has to be catzched and processed there.</p> <p>A more complex example</p> <p>The next example uses the optional <code>else</code>- and <code>finally</code>-clauses of a 'tyr-except`-statement</p> <pre><code>&gt;&gt;&gt; try:\n...     # statements in the try-block\n...     pass\n... except FileNotFoundError as e:\n...     # handle 'FileNotFoundError'\n...     pass\n... except TypeError as e:\n...     # handle 'TypeError'\n...     pass\n... except (ImportError, NameError)\n...     # Handle ImportError and KeyError\n... else: # optional\n...     # do some additional works, in the case the 'try'-block succeeds\n...     pass\n... finally: # optional\n...     # cleanup/free some ressource, this code block is executed no matter if te try succeeds or an error occurs\n...     pass\n&gt;&gt;&gt;\n</code></pre> <p>Note: - the <code>else</code>-block:   - if present must folow the <code>except</code>-clauses   - will only be executed if the <code>try</code>-blocks succeeds, i.e. it is executed after a successfull <code>try</code>-block - the <code>finally</code>-clause:   - will be executed no matter if the <code>try</code>-block succeeds or an error is raised    - detailed descriptions plaese read Defining Clean-Up Actions</p>"},{"location":"training/main-course/exceptions/#raising-exceptions","title":"Raising Exceptions","text":"<p>Raising an exception is simple done using the <code>raise</code>-statement (C++:<code>throw</code>-keyword, Java: <code>throw</code>-statement)</p> <p>*** <code>raise</code>-example*</p> <pre><code>&gt;&gt;&gt; raise TypeError('Argument has wrong type')\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: Argument has wrong type\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/exceptions/#user-defined-exceptions","title":"User-defined Exceptions","text":"<p>Python programms provide a bunch of builtin-exceptions, see Exception Hierarchy. But sometimes it's necessary to provide more spceialized exceptions. Python exceptions are classes.  A 'user-defined' excection is therfore simply writing a new class inheritung from one of the classes in the exception-hierarchy.</p> <p>User-defined Exception</p> <pre><code>&gt;&gt;&gt; class MyException(Exception):\n...     def __init__(self, value):\n...         self.value = value\n... \n&gt;&gt;&gt; type(MyException)\n&lt;class 'type'&gt;\n&gt;&gt;&gt; \n</code></pre> <p>Usage</p> <pre><code>&gt;&gt;&gt; try:\n...     raise MyException('MyException-ERROR')\n... except MyException as e:\n...     print(str(e))\n... \nMyException-ERROR\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/","title":"Everything will flow: Python control-flow constructs","text":"<p>Control flow (-statements) controls the order of execution of statements within a program. Python offers a common set of 'control-flow' statements.</p>"},{"location":"training/main-course/flow-control/#choices-the-if-statement","title":"choices - the <code>if</code> statement","text":"<p>The <code>if</code> statement provides condtional-execution of code-blocks, see also Python docs <code>if</code> statement.</p> <p><code>if</code> statement example:</p> <pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; if a == 0:\n...     print('a is 0')\n... elif a == 1:\n...     print('a is 1')\n... elif a == 2:\n...     print('a is 2')\n... else:\n...     print('a neither 0, nor 1 or 2')\n... \n&gt;&gt;&gt; a is 1\n</code></pre>"},{"location":"training/main-course/flow-control/#loops","title":"loops","text":""},{"location":"training/main-course/flow-control/#for-statement","title":"<code>for</code> statement","text":"<p>The <code>for</code> statement is a count-based loop-control, i.e. the number of repetitions is based upon the elements of an \"iterable\".</p> <p>An iterable can be e.g. a</p> <ul> <li><code>list</code>,</li> <li><code>tuple</code>,</li> <li><code>str</code>, </li> <li><code>range</code> (e.g. <code>range(0,3)</code> or  <code>range(2)</code> or <code>range(1,3)</code></li> <li>...</li> </ul>"},{"location":"training/main-course/flow-control/#range-for-loop-examples","title":"range() for loop examples","text":"<p>Note: The <code>range()</code> built-in function creates object of type <code>range</code>, which produces a sequence of integers, see Range or <code>help(range)</code>:</p> <pre><code>&gt;&gt;&gt; help(range)\nHelp on class range in module builtins:\nclass range(object)\n|  range(stop) -&gt; range object\n|  range(start, stop[, step]) -&gt; range object\n... &lt;abbreviated&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#range-with-start-and-stop","title":"range() with start and stop","text":"<pre><code>&gt;&gt;&gt; for elem in range(2, 6):\n...     print(elem)\n...\n2\n3\n4\n5\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#range-with-stop","title":"range() with stop","text":"<pre><code>&gt;&gt;&gt; for elem in range(3):\n...     print(elem)\n... \n0\n1\n2\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#range-with-start-stop-and-step","title":"range() with start, stop and step","text":"<pre><code>&gt;&gt;&gt; for elem in range(0,9,3):\n...     print (elem)\n... \n0\n3\n6\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#looping-over-objects","title":"Looping over objects","text":"<p>Example: <code>for</code> loop using a <code>list</code> object:</p> <pre><code>&gt;&gt;&gt; for elem in [0, 1, 2]:\n...     print(elem)\n... \n0\n1\n2\n&gt;&gt;&gt;\n</code></pre> <p>You are able to modify a looped-over mutable object:</p> <pre><code>&gt;&gt;&gt; for elem in my_list:\n...     print(elem)\n...     del my_list[0]\n... \n1\n3\n&gt;&gt;&gt;\n</code></pre> <p>But: Don't do that! You'll create hard to understand code and unexpected behaviour.</p>"},{"location":"training/main-course/flow-control/#while-statement","title":"<code>while</code> statement","text":"<p>The <code>while</code> statement is a condition-based loop-control, i.e the number of repetitions is controlled by a boolean-expression evaluating to <code>True</code>.</p> <p>In a <code>while</code> loop a 'condition variable' is evaluated before running the loop body (and usually changed within the body). </p>"},{"location":"training/main-course/flow-control/#simple-while-statement","title":"simple <code>while</code> statement","text":"<pre><code>&gt;&gt;&gt; a = 0\n&gt;&gt;&gt; while a &lt; 3:\n...     print(a)\n...     a += 1   # change the condition variable\n... \n0\n1\n2\n&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#break-statement","title":"<code>break</code> statement","text":"<p>With the <code>break</code> statement loops can be terminated prematurely.</p> <p>Usage: Stop iteration at occurence of a condition.</p>"},{"location":"training/main-course/flow-control/#using-a-break-statement-in-a-for-loop","title":"Using a <code>break</code> statement in a <code>for</code> loop","text":"<pre><code>&gt;&gt;&gt; s = \"text\"\n&gt;&gt;&gt; for elem in s:\n...     if elem == 'x':\n...         break\n...     print(elem)\n... \nt\ne\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#using-a-break-statement-in-a-while-loop","title":"Using a <code>break</code> statement in a <code>while</code> loop","text":"<pre><code>&gt;&gt;&gt; s = \"text\"\n&gt;&gt;&gt; idx = 0\n&gt;&gt;&gt; while idx &lt; len(s):\n...     if s[idx] == 'x':\n...         break\n...     print(s[idx])\n...     idx += 1\n... \nt\ne\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#continue-statement","title":"<code>continue</code> statement","text":"<p>With a <code>continue</code> statement loops can skip the rest of the current iteration.</p> <p>Usage: 'skip-on-condition'</p>"},{"location":"training/main-course/flow-control/#using-a-continue-statement-in-a-for-loop","title":"Using a <code>continue</code> statement in a <code>for</code> loop","text":"<pre><code>&gt;&gt;&gt; for elem in s:\n...     if elem == 'x':\n...         continue\n...     print(elem)\n... \nt\ne\nt\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#using-a-continue-statement-in-a-while-loop","title":"Using a <code>continue</code> statement in a <code>while</code> loop","text":"<pre><code>&gt;&gt; idx = 0\n&gt;&gt;&gt; while idx &lt; len(s):\n...     if s[idx] == 'x':\n...         idx += 1\n...         continue\n...     print(s[idx])\n...     idx += 1\n... \nt\ne\nt\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#else-clause-of-loops","title":"<code>else</code> clause of loops","text":"<p>In Python loops can have an optional <code>else</code> clause.</p> <p>See the Python docs for the purpose of aloop <code>else</code> clause) and when it is executed. Quote: </p> <p>\"Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of the iterable (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement\"</p> <p>So the <code>else</code> clause can be seen as 'finalizer' block of statements which are processed ath the end of a loop during normal operations.</p> <p>The exact workings of the <code>else</code> clause is a bit hard to remember.1 Still, sometimes it comes in handy.</p>"},{"location":"training/main-course/flow-control/#using-else-clause-in-a-for-loop","title":"Using <code>else</code> clause in a <code>for</code> loop","text":"<pre><code>&gt;&gt;&gt; s = \"text\"\n&gt;&gt;&gt; for elem in s:\n...     print(elem)\n... else:\n...     print(\"End of normal processing\")\n... \nt\ne\nx\nt\nEnd of normal processing\n&gt;&gt;&gt; \n</code></pre> <p>whereas:</p> <pre><code>&gt;&gt;&gt; s = \"text\"\n&gt;&gt;&gt; for elem in s:\n...     print(elem)\n...     if elem == \"x\":\n...         break\n... else:\n...     print(\"End of normal processing\")\n...\nt\ne\nx\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#using-else-clause-in-a-while-loop","title":"Using <code>else</code> clause in a <code>while</code> loop","text":"<pre><code>&gt;&gt;&gt; s = \"text\"\n&gt;&gt;&gt; idx = 0\n&gt;&gt;&gt; while idx &lt; len(s):\n...     print(s[idx])\n...     idx += 1\n... else:\n...     print(\"End of normal processing\")\n... \nt\ne\nx\nt\nEnd of normal processing\n&gt;&gt;&gt;\n</code></pre> <p>whereas:</p> <pre><code>&gt;&gt;&gt; s = \"text\"\n&gt;&gt;&gt; idx = 0\n&gt;&gt;&gt; while idx &lt; len(s):\n...     print(s[idx])\n...     if s[idx] == \"x\":\n...         break\n...     idx += 1\n... else:\n...     print(\"End of normal processing\")\n...\nt\ne\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#pass-statement","title":"<code>pass</code> statement","text":"<p>The <code>pass</code>- statement is a <code>noop</code> statement, meaning no-operation, as it does nothing.</p> <p>Use it where you need a statement syntactically but there is no needed/sensible program action, see the Python Docs on <code>pass</code> statement.</p> <p>Example - <code>pass</code> statement in a class definition:</p> <pre><code>&gt;&gt;&gt; class A: pass\n... \n&gt;&gt;&gt; type(A)\n&lt;class 'type'&gt;\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/flow-control/#match-statement","title":"<code>match</code> statement","text":"<p>The match statement is a relatively young addition at the time of writing, and we won't cover it in any depth here.</p> <p>Dubbed 'structural pattern matching' it's new in Python version 3.10 and allows you to match a value ('subject') against one ore more patterns.</p> <p>When the match subject matches a pattern (a 'match success' or 'pattern success') then the matched values may be bound to names.</p> <p>In it's simplest form it looks s.th. like this:</p> <pre><code>&gt;&gt;&gt; def match_traffic_light_status(status):\n...     match status:\n...         case 'green':\n...             print('Go!')\n...         case 'red':\n...             print('Stop!')\n...         case _:\n...             print(f'traffic light {status}?!')\n... \n&gt;&gt;&gt; match_traffic_light_status('red')\nStop!\n&gt;&gt;&gt; match_traffic_light_status('blue')\ntraffic light blue?!\n&gt;&gt;&gt;\n</code></pre> <p>In this basic form it bears some similarity to switch-case constructs found in e.g. the C language, but it is way more powerful.</p> <p>See the Python tutorial and Reference for in-depth knowledge on <code>match</code>.</p> <ol> <li> <p>For one of the authors, at least.  \u21a9</p> </li> </ol>"},{"location":"training/main-course/functions/","title":"Functions","text":"<p>Providing repeating tasks or calculation in functions is an effective way of code-reuse (\"write-once-use-many\"). This is a brief introduction of Python functions, not covering all possible variations of function-definitions. More on this can be found in the official Python docs https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions. Function itself are Python objects, as such they can e.g be assigned, passed as parameters to or returned from functions, more on that later.</p>"},{"location":"training/main-course/functions/#function-definition","title":"Function Definition","text":"<p>In Python user-defined functions are defined using the <code>def</code>-statement. A function definition is made up a function-header (defining the function-name and the call-signature)  and a function-body (the implementation of the task/calculation as a sequence of code statements ending up with an optional return-statement).</p> <p>Python allows different ways of function-definitions as described in the following subsections.</p> <p>Note: Often the term \"argument\" and \"parameter\" are used interchangeable, but this is a little bit diffuse. More precise are the terms \"actual parameter\" for \"argument\" for variables or values in function-calls and \"formal parameter\" for parameter-names in function-definitions. Here the term \"argument\" is used for the variable/values in function-calls, the term \"parameter is used for parameter-names in function-definitions. </p>"},{"location":"training/main-course/functions/#function-with-simple-parameters","title":"Function with simple parameters","text":"<p>function-definition example</p> <pre><code>&gt;&gt;&gt; def increment(a,stride):  # function-header\n...    ''' Purpose: Increment a with stride '''   # optional doc-string\n...    # function-body\n...    c = a + stride\n...    return c\n...\n&gt;&gt;&gt;\n</code></pre> <p>A function-call is done simply writing the function-name following a <code>tuple</code> of positional call-arguments</p> <p>function-call example</p> <pre><code>&gt;&gt;&gt; result = increment(1,2)\n&gt;&gt;&gt; print(result)\n3\n&gt;&gt;&gt;\n</code></pre> <p>Note: The number of parameters equal the number of call-arguments.  Also the order of the call-parameter must match the order of function-parameters: During the function-call the 1.st call-argument is mapped to the 1.st function-parameter, the 2.nd call-argument is mapped to the 2.nd function-parameter, i.e a position-based mapping from the call-arguments to the function-parameters (call-arguments here are positional arguments)</p> <p>Let's give it a try!</p> <p>Lesson: Check palindromes</p> TaskHintsSolution <p>Create a function that</p> <ul> <li>takes a single string argument and</li> <li> <p>returns <code>True</code> if string is a palindrome, <code>False</code> otherwise.</p> </li> <li> <p>Use a loop for implementation.</p> </li> <li>Try an alternative implementation using \"extended slicing\": Check    <code>word == word[::-1]</code> </li> <li>Test the function by calling it with a palindromes and other texts.</li> </ul> <p>Optional: Create a Python script <code>check_palindromes.py</code> that asks the user to enter a text to be checked if it qualifies as a palindrome.</p> <p>E.g. <pre><code>python3 check_palindromes.py\nPlease enter a word: abba\nentered word: abba     # optional output\nreverse word: abba\nis_palindrome: abba ==&gt; True\n</code></pre></p> <pre><code>python3 check_palindromes.py\nPlease enter a word: foo\nentered word: foo       # optional output\nreverse word: oof\nis_palindrome: foo ==&gt; False\n</code></pre> <p>Optional: Instead of interactive user input, accept a command line argument to your Python script so that it can be invoked like <code>python check_palindromes.py \"racecar\"</code>.</p> <p>Use the <code>input()</code> built-in function to read user input interactively.</p> <p>The most basic form to read command line arguments is by accessing them through <code>sys.argv</code>. For anything more serious the argparse standard library module can be used.</p> Really take a peek now? check_palindromes.py<pre><code>\"\"\"check_palindromes.py\n\"\"\"\nimport sys\ndef is_palindrome(text):\n\"\"\"Check if text is a palindrome using the built-in reversed() function.\n    \"\"\"\nreversed_text = ''.join(reversed(text))\nreturn text == reversed_text\ndef is_palindrome_ext_slicing(text):\n\"\"\"Check if text is a palindrome using extended slicing.\n    \"\"\"\nreversed_text = text[::-1]\nreturn text == reversed_text\ndef is_palindrome_loop(text):\n\"\"\"Check if text is a palindrome by looping through the string.\n    \"\"\"\nreversed_order = []\nfor idx, character in enumerate(text):\nidx_back = -(idx + 1)\nif text[idx] != text[idx_back]:\nreturn False\nreturn True\ndef parse_args(args=None):\n\"\"\"Parse arguments from sys.argv if args is None (the default) or from args\n    sequence otherwise.\n    \"\"\"\n# https://docs.python.org/3/howto/argparse.html\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\n'texts', nargs='*',\nhelp='One or more palindrome candidate texts')\nargs = parser.parse_args(args)\nreturn args\ndef main(args=None):\n\"\"\"Main module function.\n    Exposes this module's executable functionality for use as a module\n    function.\n    Parses arguments from sys.argv if args is None (the default) or from args\n    sequence otherwise.\n    \"\"\"\nargs = parse_args(args)\nif not args.texts:\n# optional-argument\ntext = input(\"text: \")\ntexts = [text]\nelse:\ntexts = args.texts\nfor text in texts:\nprint(f'\\nentered text: {text}')\nprint(f'reverse text: {text[::-1]}')\nfor method in [\nis_palindrome,\nis_palindrome_ext_slicing,\nis_palindrome_loop\n]:\nprint(f'{method.__name__}(\"{text}\") --&gt; {method(text)}')\nif __name__ == \"__main__\":\nsys.exit(main())\n</code></pre> <p></p>"},{"location":"training/main-course/functions/#function-with-optional-parameters","title":"Function with optional parameters","text":"<p>Optional parameters are parameters with assigned default values in the function-definition. Those optional parameters may be omitted during the function-call.</p> <p>function-definition example - utilizing default-paramater value</p> <pre><code>&gt;&gt;&gt; def increment(a,stride=1):  # function-header with default-argument\n...    ''' Purpose: Increment a with stride '''   # optional doc-string\n...    # function-body\n...    c = a + stride\n...    return c\n...\n&gt;&gt;&gt;\n</code></pre> <p>function-call example (1) - omitting optional parameter</p> <pre><code>&gt;&gt;&gt; result = increment(1)\n&gt;&gt;&gt; print(result)\n2\n&gt;&gt;&gt; \n</code></pre> <p>function-call example (2) - overwriting default-value of optional-parameter</p> <pre><code>&gt;&gt;&gt; result = increment(1,5)\n&gt;&gt;&gt; print(result)\n6\n&gt;&gt;&gt; \n</code></pre> <p>Note 1: Function-call can be made using only with arguments for parameters, where no default-agument are defined</p> <p>Note 2: Optional-parameters must be defined at the end of the function-parameter-list. Otherhwise a SyntaxError is raised, e.g.</p> <pre><code>&gt;&gt;&gt; def a(a,b=1,c):\n...     return (a+b+c)\n... \nFile \"&lt;stdin&gt;\", line 1\nSyntaxError: non-default argument follows default argument\n</code></pre>"},{"location":"training/main-course/functions/#function-with-variable-parameter-list-variadic-parameter","title":"Function with variable parameter list (variadic parameter)","text":"<p>A function can be defined having a variable-parameter-list. This is specified in preceding the last parameter with an asterisk-character <code>*</code> in the function definition.</p> <p>function-definition</p> <pre><code>&gt;&gt;&gt; def print_info(header,footer,*args):    # 2 normal parameter &amp; variable-length-parameter\n...     print(header)\n...     for elem in args: print(elem)\n...     print(footer)\n... \n&gt;&gt;&gt;\n</code></pre> <p>varargs-function-call (1)</p> <pre><code>&gt;&gt;&gt; print_info('--&gt;', '&lt;--', 'Hello', 'World')  # last 2 arguments are mapped as a tuple into the *-parameter\n--&gt;\nHello\nWorld\n&lt;--\n&gt;&gt;&gt;\n</code></pre> <p>varargs-function-call (2)</p> <pre><code>&gt;&gt;&gt; print_info('--&gt;', '&lt;--', 'Tic', 'Tac', 'Toe')  # last 3 arguments are mapped as a tuple into the *-parameter\n--&gt;\nTic\nTac\nToe\n&lt;--\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/functions/#keyword-arguments","title":"Keyword Arguments","text":"<p>In the above sections the functions are called with positional arguments, see Note above. In addition function can also be called using named arguments (keyword arguments).</p> <p>To demonstrate this, we use the <code>increment</code>-function-definition from above.</p> <p>*function-definition ***</p> <pre><code>&gt;&gt;&gt; def increment(a,stride=1):  # function-header\n...    ''' Purpose: Increment a with stride '''   # optional doc-string\n...    # function-body\n...    c = a + stride\n...    return c\n...\n&gt;&gt;&gt;\n</code></pre> <p>function-call using keyword parameter (1)</p> <pre><code>&gt;&gt;&gt; increment(a=1)\n2\n&gt;&gt;&gt;\n</code></pre> <p>function-call using keyword parameter (2)</p> <pre><code>&gt;&gt;&gt; increment(stride=3, a=1)\n4\n&gt;&gt;&gt;\n</code></pre> <p>Note Using keyword-arguments the position of the call-argument doesn't matter</p>"},{"location":"training/main-course/functions/#function-with-additional-keyword-parameter","title":"Function with additional keyword parameter","text":"<p>Additionally Python allows function-definitions with arbitray additional keyword-paramaters. This is specified in preceeding the last parmeter with double-asterisk character <code>**</code>. Additional kewyword-arguments are mapped during the function-call into a dictionary for the keyword-parameter of the function definition</p> <p>function-definition with keyword-parameters</p> <pre><code>&gt;&gt;&gt; def print_info(header,footer,*args, **kwargs):\n...     print(header)\n...     for elem in args: print(elem)\n...     for elem in kwargs.keys(): print('%s: %s' % (elem, kwargs[elem]))\n...     print(footer)\n... \n&gt;&gt;&gt; \n</code></pre> <p>function-call</p> <pre><code>&gt;&gt;&gt; print_info('--&gt;', '&lt;--', 'Madrid', 'Berlin', 'Paris', capitols_of='European Countries', belonging_to='EU')\n--&gt;\nMadrid\nBerlin\nParis\ncapitols_of: European Countries\nbelonging_to: EU\n&lt;--\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/functions/#function-return-value","title":"Function Return Value","text":"<p>Python allows the return of mutiple values.</p> <pre><code>&gt;&gt;&gt; def divide(number,div):\n...     '''Division returning truncated division and modulo'''\n...     d = number // div\n...     m = number % div\n...     return d,m\n... \n&gt;&gt;&gt; d, m = divide(9,4)\n&gt;&gt;&gt; d\n2\n&gt;&gt;&gt; m\n1\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/functions/#inner-functions","title":"Inner functions","text":"<p>Functions can be defined at every place, at module-level, inside classes (methods), but also inside functions.</p> <p>function definition</p> <pre><code>&gt;&gt;&gt; def outer_func(inner_func):\n...     ''' function which defines inner functions'''\n...     def x():\n...         print(x.__name__)\n...     def y():\n...         print(y.__name__)\n...     # return an inner function, simply by its name\n...     if inner_func == 1:\n...         return x\n...     else:\n...         return y\n... \n&gt;&gt;&gt;\n</code></pre> <p>function-call</p> <pre><code>&gt;&gt;&gt; a_func = outer_func(1)    # assign a function\n&gt;&gt;&gt; a_func()                  # call the function\nx\n&gt;&gt;&gt; b_func = outer_func(2)    # assign a function\n&gt;&gt;&gt; b_func()                  # call the function\ny\n&gt;&gt;&gt;\n</code></pre> <p>Note: As can be seen, functions are like ordinary Python objects that can be returned and assigned.</p>"},{"location":"training/main-course/functions/#functions-annotations","title":"Functions Annotations","text":"<p>Function Annotations allow programmers to associate meta-information to a function-header. One kind of interesting mata-information are so called 'type-hints', which can provide 'type-information' about the function-paramertes and return-value.</p> <p>Function annotations are stored in the <code>__annotations__</code> attribute of a function object.</p> <p>Function Annotation example</p> <pre><code>&gt;&gt;&gt; def concatenate(string_1: str, string_2: str) -&gt; str:\n...     return string_1 + string_2\n... \n&gt;&gt;&gt; concate('foo', 'bar')\n'foobar'\n&gt;&gt;&gt; concate.__annotations__\n{'string_1': &lt;class 'str'&gt;, 'string_2': &lt;class 'str'&gt;, 'return': &lt;class 'str'&gt;}\n&gt;&gt;&gt; \n</code></pre> <p>For a more detailed inforamtions please refer to PEP 3107 -- Function Annotations and PEP 484 -- Type Hints </p> <p>Note 1: Function annotations are optional, they are just informations. They are neither evaluated nor their compliance is enforced by the interpreter itself. It's provided in the language, helping other libraries do some type-checking.</p> <p>Note 2: 'Type Hints'-support is implemented in the Python standard library <code>typing</code>.</p> <p>Note 3: PEP - Python Enhancement Proposal - is the official process of suggesting enhancements to the Python language, please read PEP 001 -- PEP Purpose and Guidelines.</p>"},{"location":"training/main-course/functions/#pythons-function-call-semantics","title":"Pythons Function Call Semantics","text":"<p>Function-call arguments are suggested in PEP variables in the scope of the caller.</p> <p>Traditional function call semantics are:</p> <ol> <li>call-by-value: </li> <li>the value of the argument-variable is copied to the call-parameter of the function</li> <li>changing the value inside the function doesn't effect the caller</li> <li>call-by-reference: </li> <li>a reference of the caller's variable is passed to the call-parameter of the function</li> <li>as a consequence, changes to variable inside the function will affect the callers variable (side-effect from callee back to the caller) </li> <li>alongside the function return value, this provides additional communication-channels between caller and callee</li> </ol> <p>Python function call semantics instead are controlled by the mutability/immutability of the Python objects of the caller's function-call arguments.</p> <ol> <li>argument variable refering an immutable object: Will work without side-effects to the callee even, when the functions is changing the value, this is due to the copy-on-write behaviour </li> <li>argument variable refering a mutable object may have side-effects to the callee, when the variable is changed inside the function</li> </ol> <p>function-call with immutable call-argument</p> <pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; id(1)             # (1)\n139752035048832\n&gt;&gt;&gt; def increment(a): \n...     print(id(a))  # (2) refers to the same object as the callers variable (1)\n...     a += 1        # (3) copy-on-write creates new object\n...     print(id(a))  # (4) new object dur to (3)\n...     return a\n... \n&gt;&gt;&gt; b = increment(a)\n139752035048832\n139752035048864\n&gt;&gt;&gt; a\n1    \n&gt;&gt;&gt; id(a)            # (4) refers to the same object as in (1)\n139752035048832\n&gt;&gt;&gt;\n</code></pre> <p>Note: Immutable objects of the caller are not effected by changes in the callee</p> <p>function-call with mmutable call-argument</p> <pre><code>&gt;&gt;&gt; d1 = {'a':1, 'b':2}\n&gt;&gt;&gt; id(d1)           # (1)\n139752035393824\n&gt;&gt;&gt; def change_callee_object(d):\n...     print(id(d))  # (2) refers to the same object as the callers variable (1)\n...     for elem in d.keys(): d[elem] += 1  # (3) no copy is made, changes apply to origin object\n...     print(id(d))  # (4) refers to the origin object (1), (2)\n...     return d\n... \n&gt;&gt;&gt; d2 = change_callee_object(d1)\n139752035393824\n139752035393824\n&gt;&gt;&gt; d1 # site-effect caused by function-call with mutable argument\n{'a': 2, 'b': 3}\n&gt;&gt;&gt; id(d1)\n139752035393824\n&gt;&gt;&gt; d2\n{'a': 2, 'b': 3}\n&gt;&gt;&gt; id(d2)\n139752035393824\n&gt;&gt;&gt; \n</code></pre> <p>Note: Function-calls with mutable objects may have site-effect to the callee</p>"},{"location":"training/main-course/grasping-python/","title":"You gotta understand: Important things for grasping Python","text":""},{"location":"training/main-course/grasping-python/#syntax","title":"Syntax","text":"<p>Just the basic rules to be able to understand Python code, informally.</p>"},{"location":"training/main-course/grasping-python/#statements","title":"Statements","text":"<p>Single statement: A single statement is an executable instruction ending with a newline or semicolon. A statement changes the state of the program.</p>"},{"location":"training/main-course/grasping-python/#expressions","title":"Expressions","text":"<p>An expression is a sequence of operands and operators evaluating to a single value. Operands can be expressions themselves.</p> <p>Examples:</p> <pre><code>\"foo\"        # string literal\n3.14         # float literal\nTrue         # boolean literal\na            # simple identifier\na + b        # simple expression using add-operator\nx == y       # simple expression using equal-comparison operator\nid(x)        # simple expression using id()-builtin function getting the\n# object id of the object the variable 'x' refers to\na is b       # simple expression using 'is'-operator\n# (check identity as with id()-builtin function)\n</code></pre> <p>The evaluation (calculation) of an expression itself is triggered by an appropriate statement - in an interactive interpreter session this means you need to finish your entered expression with a carriage return (newline), this will make an expression statement out of an expression.  Expressions are printable and assignable. Because expressions are assignable, they form the smallest unit of reusable code. </p> <p>Example - expression statement:</p> <pre><code>&gt;&gt;&gt; 5 + 3 # expression statement\n8\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/grasping-python/#operands-and-operators","title":"Operands and Operators","text":"<p>Operands are literals, identifiers (variable names) or functions returning a single value. Operators are (meaningful) links between operands.</p>"},{"location":"training/main-course/grasping-python/#assignments","title":"Assignments","text":"<p>Assignements assign values (result of expressions) to names.</p> <p>Example - assignment statement:</p> <pre><code>&gt;&gt;&gt; a = 5 + 3 # assignment statement\n&gt;&gt;&gt; a         # expression statement\n8\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/grasping-python/#other-statements","title":"Other Statements","text":"<p>In simple terms, other statements are basically \"everything else that can form a Python line or group of lines\".</p> <p>There are both \"simple\" statements (like e.g. <code>del</code>, <code>import</code>, <code>return</code>, <code>yield</code>, ...) but also \"compound\" statements (e.g. <code>if-elif- else</code>, <code>for</code>, <code>while</code>, ...) that contain other statements.</p> <p>You can read up all the details on expressions and statements in the Python reference documentation.</p>"},{"location":"training/main-course/grasping-python/#indentation","title":"Indentation","text":"<p>Grouping statements - i.e. building code blocks - is the basis for structuring a program. Organized in \"higher-level\" building blocks like functions, classes, modules and packages, they provide reusable code fragments. </p> <p>A sensible \"program organization\" is crucial for creating</p> <ul> <li>understandable</li> <li>maintainable</li> <li>extendible</li> <li>testable</li> </ul> <p>code.</p> <p>Python uses indentation to denote blocks of code (as opposed to e.g. {} braces in many other languages).1 Many love it, some don't care all that much, a few hate it. We believe that this is one reason why Python is so inherently readable.</p> <p>Consecutive statements can be grouped together forming a code block using the same indentation level:</p> <pre><code>&gt;&gt;&gt; if need_cake:\n&gt;&gt;&gt;     make_dough()    # three\n&gt;&gt;&gt;     add_toppings()  #       steps\n&gt;&gt;&gt;     bake()          #             in the same code block\n</code></pre> <p>Indentation must be consistent: <pre><code>&gt;&gt;&gt; if True:\n...     print('True!')\n...       print('Still true.')\nFile \"&lt;stdin&gt;\", line 3\nprint('Still true.')\n^\nIndentationError: unexpected indent\n</code></pre></p> <p>Always use 4 spaces for one level of indentation.2</p>"},{"location":"training/main-course/grasping-python/#comments","title":"Comments","text":"<p>Comments are used for documenting the code in-place. </p> <p>A comment starts with a \"#\" and ends at the end of a line:</p> <pre><code>&gt;&gt;&gt; # a comment\n... print('something')  # an inline comment\nsomething\n</code></pre> <p>The Python interpreter ignores comments.</p>"},{"location":"training/main-course/grasping-python/#literals","title":"Literals","text":""},{"location":"training/main-course/grasping-python/#numeric-literals","title":"Numeric Literals","text":"<pre><code>&gt;&gt;&gt; 12345  # integer\n12345\n&gt;&gt;&gt; 123.45  # floating-point number\n123.45\n&gt;&gt;&gt; 1 + 3j  # complex number with real and imaginary part\n(1+3j)\n&gt;&gt;&gt; 1.1 + 3.1J  # another complex number with real and imaginary part\n(1.1+3.1j)\n</code></pre> <p>You can optionally separate big numbers for easier human reading:</p> <pre><code>&gt;&gt;&gt; 1000_000_000  # not peanuts\n1000000000\n</code></pre>"},{"location":"training/main-course/grasping-python/#string-literals","title":"String Literals","text":"<p>All these are valid string literals i.e. text or \"sequences of characters\":</p> <pre><code>&gt;&gt;&gt; \"\"\"text\"\"\"\n'text'\n&gt;&gt;&gt; '''text'''\n'text'\n&gt;&gt;&gt; \"text\"\n'text'\n&gt;&gt;&gt; 'text'\n'text'\n</code></pre> <p>You can use the different variations to avoid escaping. I.e. instead of <pre><code>&gt;&gt;&gt; 'Guido\\'s time machine'\n\"Guido's time machine\"\n</code></pre></p> <p>simply use</p> <pre><code>&gt;&gt;&gt; \"Guido's time machine\"\n\"Guido's time machine\"\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/grasping-python/#docstrings","title":"Docstrings","text":"<p>A string literal as 1st statement in a module, a function or a class definition will become the so-called \"documentation string\" of this object,  which is accessible as the object's <code>__doc__</code> attribute:</p> <p>A documented function:</p> <pre><code>&gt;&gt;&gt; def noop(x):\n...     \"\"\"noop does nothing, really.\"\"\"\n...     return x\n... \n&gt;&gt;&gt; noop.__doc__\n'noop does nothing, really.'\n</code></pre> <p>A documented class:</p> <pre><code>&gt;&gt;&gt; class Animal:\n...     \"\"\"I'm a beast.\n...     \"\"\"\n... \n&gt;&gt;&gt; Animal.__doc__\n\"I'm a beast.\\n    \"\n&gt;&gt;&gt; \n</code></pre> <p>A documented module:</p> <pre><code>$ cat mymodule.py \n\"\"\"This is my module's docstring.\n\"\"\"\nimport os\nprint(os)\n$ python3 -q\n&gt;&gt;&gt; import mymodule\n&lt;module 'os' from '/opt/subtools/current/lib/python3.6/os.py'&gt;\n&gt;&gt;&gt; mymodule.__doc__\n\"This is my module's docstring.\\n\"\n&gt;&gt;&gt;\n</code></pre> <p>If for some reason you can't put this docstring as the first module statement you may alternatively just set <code>__doc__</code> (as a module-global variable):</p> <pre><code>$ cat mymodule2.py \nimport os  # for some reason we want to do this first\n__doc__ = \"\"\"This is my module's docstring.\n\"\"\"\nprint(os)\n$ python3 -q\n&gt;&gt;&gt; import mymodule2\n&lt;module 'os' from '/opt/subtools/current/lib/python3.6/os.py'&gt;\n&gt;&gt;&gt; mymodule2.__doc__\n\"This is my module's docstring.\\n\"\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/grasping-python/#valid-identifiers-reserved-words","title":"Valid Identifiers &amp; Reserved Words","text":"<p>Identifiers are the names you are allowed to use e.g. for variable, function or class names.</p> <p>You can find out all there is to know about identifiers here: https://docs.python.org/3/reference/lexical_analysis.html#identifiers</p> <p>As a basic rule of thumb identifiers consist of letters A to Z (uppercase and lowercase), the underscore _ and digits 0 to 9. Identifiers must not start with a digit.3</p> <p>Identifiers are case-sensitive.</p> <p>Reserved words are the language keywords which are not allowed for use as a  name: <pre><code>False      await      else       import     pass\nNone       break      except     in         raise\nTrue       class      finally    is         return\nand        continue   for        lambda     try\nas         def        from       nonlocal   while\nassert     del        global     not        with\nasync      elif       if         or         yield\n</code></pre></p>"},{"location":"training/main-course/grasping-python/#source-code-encoding","title":"Source code encoding","text":"<p>Source code is text data. The binary representation of text data (e.g. when stored in a file) is called an \"encoding\". It is important to know the encoding of a text file since</p> <ul> <li>different encodings are capable of representing different characters and</li> <li>interpret the binary data as different characters (e.g. the ISO-8859-1    encoding does not contain the \u20ac (EUR) sign (but the \u00a4 \"general currency    sign\"), whereas the ISO-8859-15 encoding does; the byte <code>A4</code> is thus    interpreted differently by these encodings)</li> </ul> <p>A special comment on the 1st or 2nd line</p> <pre><code># -*- coding: &lt;encoding-name&gt; -*-\n</code></pre> <p>explicitly denotes the source code file encding.</p> <p>The default Python source code encoding is UTF-8.</p>"},{"location":"training/main-course/grasping-python/#line-continuation","title":"Line Continuation","text":"<p>Usually a statement ends with a newline. If long statements need to be formatted to span multiple lines for readability the line continuation character \"\\\" can be used. This is called explicit line joining:</p> <pre><code>x = (operand1 + operand2) * \\\n    (operand1 - operand2)\n</code></pre> <p>As code enclosed in parentheses (...) (and brackets [...], braces {...} and triple quotes) can span multiple line the line continuation character is often unnecessary:</p> <pre><code>\"\"\"A long docstring comment on this example.\nTriple-quoted strings can span\nmultiple lines.\n\"\"\"\nif (condition_a\nand condition_b\nand condition_c):\ndo_this()\ngerman_month_names = [\n# comments are allowed\n'Januar', 'Februar', 'M\u00e4rz',       # Q1\n'April', 'Mai', 'Juni',            # Q2\n'Juli', 'August', 'September',     # Q3\n'Oktober', 'November', 'Dezember'  # Q4\n]\n# dictionaries more often than not span lines\ngerman_months = { \n1: 'Januar',\n2: 'Februar',\n3: 'M\u00e4rz',\n4: 'April',\n5: 'Mai',\n6: 'Juni',\n7: 'Juli',\n8: 'August',\n9: 'September',\n10: 'Oktober',\n11: 'November',\n12: 'Dezember'\n} \n</code></pre> <p>This is called implicit line joining.</p> <p>Tip: This and Python's implicit string concatenation can be used to format lines: <pre><code>&gt;&gt;&gt; \"12\" \"34\"   \"56\"  # implicit string concatenation\n'123456'\n&gt;&gt;&gt; hash(\"12\"\n...      \"34\"\n...      \"56\")\n239865887022063660\n&gt;&gt;&gt; hash(\"123456\")\n239865887022063660\n</code></pre></p> <p>This can be handy e.g. for formatting function calls with longer string parameters (i.e. not so short as in this example...).</p>"},{"location":"training/main-course/grasping-python/#annotations","title":"Annotations","text":""},{"location":"training/main-course/grasping-python/#function-annotations","title":"Function Annotations","text":"<p>Optional function annotations can be used e.g. as a means to more clearly document the type(s) of arguments a function (or method) expects:</p> <pre><code>def say_hello(name: str) -&gt; str:\nreturn 'Hello {}!'.format(name)\n</code></pre> <p>This information can be accessed at runtime:</p> <pre><code>&gt;&gt; def say_hello(name: str) -&gt; str:  \n...     return 'Hello {}!'.format(name)\n... \n&gt;&gt;&gt; say_hello.__annotations__\n{'name': &lt;class 'str'&gt;, 'return': &lt;class 'str'&gt;}\n&gt;&gt;&gt; \n</code></pre> <p>Note that the Python interpreter does not do any type checking using this information:</p> <pre><code>&gt;&gt;&gt; say_hello('Lisa')\n'Hello Lisa!'\n&gt;&gt;&gt; say_hello(8.5)\n'Hello 8.5!'\n&gt;&gt;&gt; \n</code></pre> <p>A function annotation is actually an expression i.e. not necessarily limited to a type. The expression is evaluated at function definition execution:</p> <pre><code>&gt;&gt;&gt; def say_hello(name: 'what' + '?') -&gt; 7+3:  \n...     return 'Hello {}!'.format(name)\n... \n&gt;&gt;&gt; say_hello.__annotations__\n{'name': 'what?', 'return': 10}\n&gt;&gt;&gt; \n</code></pre> <p>Function annotations gain meaning by usage in libraries or tools; the Python interpreter does not do anything with them apart from </p> <ul> <li>evaluating the expressions when the function definition is executed and thus</li> <li>\"associating\" this information with the function properties (i.e. its    parameters and return values)</li> </ul> <p>Function annotations can be used for several purposes at compile or run time, e.g.</p> <ul> <li>in optional \"compile time\" type checkers</li> <li>in editors or IDEs to provide rich code completion, type checking and    formatting &amp; highlighting capabilities and refactoring support </li> <li>to implement \"generic functions\" that dispatch on parameter type</li> <li>to generate code (see e.g. the use of type annotations in the    dataclasses standard    library module)</li> </ul> <p>and more.</p>"},{"location":"training/main-course/grasping-python/#variable-annotations","title":"Variable Annotations","text":"<p>In the same way function parameters and return types may be annotated you can annotate (module, class or instance) variables:</p> <p>An annotated variable:</p> <pre><code>&gt;&gt;&gt; x: str = \"text\"\n&gt;&gt;&gt; x\n'text'\n</code></pre> <p>Again, the annotations can be accessed through the <code>__annoations__</code> dict:</p> <pre><code>&gt;&gt;&gt; __annotations__  # module-level (here: interactive session)\n{'x': &lt;class 'str'&gt;}\n&gt;&gt;&gt; \n</code></pre> <p>An annotated class:</p> <pre><code>&gt;&gt;&gt; class Knight:\n...     knows: str = 'ni'\n...     \n...     def __init__(self, words: list):\n...         self.words: str = words\n...     \n...     def say_something(self):\n...         print(self.knows)\n...     \n...     def say_something_personal(self):\n...         print(' '.join(self.words))\n... \n&gt;&gt;&gt; knight = Knight(['my', 'words'])\n&gt;&gt;&gt; knight.say_something()\nni\n&gt;&gt;&gt; knight.say_something_personal()\nmy words\n</code></pre> <p>Thesee nnotations are then available at class or instance level: <pre><code>&gt;&gt;&gt; Knight.__annotations__  # class level\n{'knows': &lt;class 'str'&gt;}\n&gt;&gt;&gt; \n&gt;&gt;&gt; knight.__init__.__annotations__  # instance level\n{'words': &lt;class 'list'&gt;}\n&gt;&gt;&gt; knight.__annotations__\n{'knows': &lt;class 'str'&gt;}\n&gt;&gt;&gt; \n</code></pre></p> <p>Like other annotations these are optional and not used by the interpeter itself but libraries and tools.</p> <p>See the typing stdlib module documentation for infrastructure with regard to (type hint) annotation.</p> <p>Annotations and typing have evolved pretty much in the past few Python 3 years and are still in flux. Modern Pythons support e.g. more convenient language sugar than their predecessors, like support for \"generics\" syntax for standard collections:</p> <p>Python &gt;= 3.9:</p> <pre><code>&gt;&gt;&gt; word_list: list[str]\n&gt;&gt;&gt; __annotations__\n{'word_list': list[str]}\n</code></pre> <p>Python 3.8:</p> <pre><code>&gt;&gt;&gt; word_list: list[str]\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'type' object is not subscriptable\n&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt; word_list: List[str]\n&gt;&gt;&gt; __annotations__\n{'word_list': typing.List[str]}\n&gt;&gt;&gt;\n</code></pre> <p>In some cases older Python's might already provide this feature by means of a <code>__future__</code> import.</p> <pre><code>&gt;&gt;&gt; from __future__ import annotations\n&gt;&gt;&gt; word_list: list[str]\n&gt;&gt;&gt; vector_3d: tuple[float]\n</code></pre>"},{"location":"training/main-course/grasping-python/#decorators","title":"Decorators","text":"<p>The <code>@</code>-syntax introduces decorators: <pre><code>&gt;&gt;&gt; @some_decorator\n... def f():\n...    pass\n... \n</code></pre></p> <p>See the decorators chapter for more information.</p>"},{"location":"training/main-course/grasping-python/#names-and-objects","title":"Names and Objects","text":"<p>Python variables are names for objects. An object can have many names:</p> <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; x\n1\n&gt;&gt;&gt; y\n1\n&gt;&gt;&gt; l1 = [1, 2, 3]\n&gt;&gt;&gt; l2 = l1\n&gt;&gt;&gt; l1\n[1, 2, 3]\n&gt;&gt;&gt; l2\n[1, 2, 3]\n</code></pre> <p>But it is still the same object:</p> <pre><code>&gt;&gt;&gt; x is y  # is checks for object identity\nTrue\n&gt;&gt;&gt; l1 is l2\nTrue\n&gt;&gt;&gt; id(x), id(y)  # id() returns an object's unique id\n(140700697906560, 140700697906560)\n&gt;&gt;&gt; id(l1), id(l2)\n(140700698907784, 140700698907784)\n</code></pre> <p>Compare that to the meaning of variables in other languages, e.g. C.</p> <p>In C (or C++) a variable is basically the in-program name for a \"memory cell\" (a memory location that can hold a value of the type declared for that variable ). Thus, assignment in C/C++ means writing a value of the proper type into that \"memory cell\".</p> <p>Whereas a variable in Python is rather one \"label\" (of potentially many) for an object in a sense more analogous to a C++ reference or a C pointer: a name for an object.</p> <p>Consequently, assignment in Python means \"pinning\" a new name to an object; it  never copies data.4</p> <p>Deleting a name doesn't affect object existence: <pre><code>&gt;&gt;&gt; del x\n&gt;&gt;&gt; y\n1\n</code></pre> (as long as there is still a name (or another object) referencing that object)</p> <p>Further reading: A great in-depth explanation can be found here.</p>"},{"location":"training/main-course/grasping-python/#python-scoping","title":"Python Scoping","text":"<p>A scope defines the visibility of names. The lookup of names in Python obeys the \"LEGB\"-Rule:</p> <ol> <li>Local</li> <li>Enclosing</li> <li>Global</li> <li>Builtin</li> </ol> <p>The workings of LEGB by example:</p> <pre><code>&gt;&gt;&gt; global_x = \"I'm global\"\n&gt;&gt;&gt; \n&gt;&gt;&gt; def f():  # functions define scope\n...     print(global_x)  # lookup in local scope (nothing), then in global\nscope\n...     \n...     def inner():\n...         local_z = \"I'm local\"  # a name in inner local scope\n...         print(local_z)\n...         print(enclosing_y)     # local (nothing), enclosing -&gt; enclosing_y\n...         print(global_x)        # local (nothing), enclosing (nothing), \n...                                # global -&gt; global_x\n...         print('print() is a built-in!')\n...     \n...     # variable in local scope of f == enclosing scope of inner    \n...     enclosing_y = \"I'm enclosing (for inner), local for f\"\n...     # run inner function\n...     inner()\n... \n&gt;&gt;&gt; f()       \nI'm global\nI'm local\nI'm enclosing (for inner), local for f\nI'm global\nprint() is a built-in!\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/grasping-python/#python-classes-unscoped","title":"Python Classes \"Unscoped\"","text":"<p>Note that the class body block of a class definition does not form an enclosing scope for the methods of the class:</p> <pre><code>&gt;&gt; class FunctionsDefineScope:\n...      \n...     # class attributes \n...     cls_var = 'common'\n...     another_cls_var = 'also ' + cls_var  # name in the same scope is usable\n...     \n...     def show_me(self):\n...         # class body is not an enclosing scope for method body...\n...     \n...         # access class attributes...\n...         # ...through class\n...         print(FunctionsDefineScope.cls_var,\n...               FunctionsDefineScope.another_cls_var)\n...         # ...through instance\n...         print(self.cls_var, self.another_cls_var)\n...         \n...         # this will raise:\n...         print(cls_var, another_cls_var)\n... \n&gt;&gt;&gt; fds = FunctionsDefineScope()\n&gt;&gt;&gt; fds.show_me()\ncommon also common\ncommon also common\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFile \"&lt;stdin&gt;\", line 17, in show_me\nNameError: name 'cls_var' is not defined\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/grasping-python/#style-guide","title":"Style guide","text":"<p>Python has a widely accepted style guide. Follow it.</p>"},{"location":"training/main-course/grasping-python/#be-pythonic","title":"Be pythonic","text":"<p>Python programmers often strive to write code that is said to be \"pythonic\", which means it has a certain quality of beauty (as in being working, functional, elegant yet maintainable and readable).</p> <p>While \"pythonic\" can understandably not be a very well-defined term the Zen of Python is a collection of Python's language design guiding principles which can also be put to good use in your quest to write \"pythonic\" code.</p> <ol> <li> <p>E.g in Java or C, the semicolon <code>;</code> is used as single-statement-delimiter, the curly braces <code>{</code> <code>}</code> are used for code blocks.\u00a0\u21a9</p> </li> <li> <p>While this is not mandatory and enforced just do it .\u00a0\u21a9</p> </li> <li> <p>Since Python 3.0 you can actually use other unicode characters in identifiers though in international codebases, the ASCII range characters prevail.\u00a0\u21a9</p> </li> <li> <p>Whereas in C/C++ assignment usually copies data.\u00a0\u21a9</p> </li> </ol>"},{"location":"training/main-course/installation/","title":"Keeping a Python: Python installation","text":""},{"location":"training/main-course/installation/#linux","title":"Linux","text":"<p>In most Linux distributions Python comes preinstalled.</p> <p>See https://docs.python.org/3/using/unix.html for further info.</p>"},{"location":"training/main-course/installation/#windows","title":"Windows","text":"<p>See https://docs.python.org/3/using/windows.html.</p>"},{"location":"training/main-course/installation/#macos","title":"MacOS","text":"<p>See https://docs.python.org/3/using/mac.html.</p>"},{"location":"training/main-course/installation/#online-pythons","title":"Online Pythons","text":"<p>Instead of installing Python there are some cool options for using Python as a cloud-based service, from your browser.</p> <p>These solutions allow for varying degrees of \"not needing a local Python  installation, at all\". At the very least, they are great for trying out simple things, from basically anywhere.</p>"},{"location":"training/main-course/installation/#jupyter","title":"Jupyter","text":"<p>First and foremost, there's the incredible Jupyter.  Jupyter notebooks bundle documentation, code and data and can be used for amazing stuff, forming an interactive code lab. Starting out with Python, Jupyter  now supports a wide range of languages and can also be used as a cloud-based service from here: https://jupyter.org/try</p> <p>Jupyter is a very important building block in data science and scientific computing and part of many tech stacks used in these domains.</p>"},{"location":"training/main-course/installation/#others","title":"Others","text":"<p>Several others, some of which may require you to create an account:</p> <ul> <li>Repl.it: https://repl.it/</li> <li>Python Anywhere: https://www.pythonanywhere.com</li> <li>Python Fiddle: http://pythonfiddle.com</li> <li>Trinket: https://trinket.io</li> <li>...</li> </ul>"},{"location":"training/main-course/io/","title":"Get it in (and out): (File) Input and Output","text":"<p>Programs can consume data from different input- and produce data into different output-'channels'. Generally speaking channels are a concept providing a common interface to concrete data-sources and data-sinks. Bute here we use the term 'channel' in a more fluffy sense, meaning we refer to concrete types of data-sources and data-sinks.</p> <p>Channel-interfaces typically provide</p> <ul> <li><code>open()</code></li> <li><code>close()</code></li> <li><code>read()</code> (or:<code>get()</code>, (<code>receive()</code>)</li> <li><code>write()</code> (or:<code>put()</code>, (<code>send()</code>)</li> </ul> <p>operations, sometimes named differently, as shown.</p> <p>Typical channels are:</p> <ul> <li>standard-input/standard-output</li> <li>streams: file-input/file-output (Text I/O, Binary I/O, Raw I/O)</li> <li>sockets: a 'network channel'</li> </ul> <p>Here we focus on 'Text I/O'-files ('text-stream') as concrete data-sources/-sinks.</p>"},{"location":"training/main-course/io/#open-a-file","title":"Open a file","text":"<p>Python provides the <code>open()</code> builtin function to open a file. If it doesn't exists an Exception is raised. The <code>open()</code>-call returns a 'file-object' (Remember: In Python everything is an object), sometimes called a 'file-descriptor', which provides typical file-operation methods.</p> <p>Access-Modes</p> <p>Files can be opened in different access-modes. The mode is provided as a parameter to the <code>open()</code>-call. Available modes are (copied from the <code>help(open)</code>-builtin call):</p> <pre><code>========= ===============================================================\nCharacter Meaning\n--------- ---------------------------------------------------------------\n'r'       open for reading (default)\n'w'       open for writing, truncating the file first\n'x'       create a new file and open it for writing\n'a'       open for writing, appending to the end of the file if it exists\n'b'       binary mode\n't'       text mode (default)\n'+'       open a disk file for updating (reading and writing)\n'U'       universal newline mode (deprecated)\n========= ===============================================================\n</code></pre> <p>file <code>open()</code>-call</p> <p>Python's interactive <code>help(open)</code>-builtin gives a full description of the <code>open()</code>-builtin, here abbreviated:</p> <pre><code>&gt;&gt;&gt; help(open)\nHelp on built-in function open in module io:\nopen(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=T\nrue, opener=None)\nOpen file and return a stream.  Raise IOError upon failure.\nfile is either a text or byte string giving the name (and the path\nif the file isn't in the current working directory) of the file to\nbe opened or an integer file descriptor of the file to be\nwrapped. (If a file descriptor is given, it is closed when the\nreturned I/O object is closed, unless closefd is set to False.)\n... &lt;abbreviated&gt;\n</code></pre> <p>Note:</p> <p>Navigation in <code>help()</code>-mode  -<code>q</code> (quit)   - <code>&lt;enter&gt;</code>: Line down  - <code>&lt;space&gt;</code>: Page down  - On Windows the Python interpreter automatically 'quits' help-mode after reaching the end, on Linux you have toe enter <code>q</code></p> <ol> <li>file <code>open()</code> in 'read-mode' - if it doesn't exists:</li> </ol> <pre><code>&gt;&gt;&gt; fd = open('bar.txt')      # same as open('bar.txt', 'r')\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFileNotFoundError: [Errno 2] No such file or directory: 'bar.txt'\n&gt;&gt;&gt;\n</code></pre> <ol> <li>file <code>open()</code> in 'read-mode' - if the file-exists</li> </ol> <pre><code>&gt;&gt;&gt; fd = open('foo.txt')       # same as open('foo.txt', 'r')\n&gt;&gt;&gt; type(fd)\n&lt;class '_io.TextIOWrapper'&gt;\n&gt;&gt;&gt;\n</code></pre> <p>The <code>open()</code>-builtin call will return a 'file-object' of type  <code>_io.TextIOWrapper</code>. It will open an existing file named 'foo.txt' (expected to be in the current working directory <code>cwd</code> , i.e the directory you started the python interpreter) in 'read-mode'. If your file is in a different directory than the <code>cwd</code>, you have to provide a fully qualified file-name either with a relative-path to the<code>cwd</code>or an absolute-path starting from the file-system-root. Here a Unix-based example using <code>/</code> as path-separator (use <code>\\</code> on Windows-Systems):</p> <ul> <li>Assume your <code>cwd</code> is <code>/var/tmp/python_course/stundent_1</code></li> <li>assume your file-location is <code>/var/tmp/python_course/stundent_1/data</code></li> <li>then your qualified filename could be:</li> <li>relative: <code>./data/.foo.txt</code></li> <li> <p>absolute: `/var/tmp/pythoncourse/stundent1/data/foo.txt'</p> </li> <li> <p>Check available 'file-operations' (methods) and attributes of 'file-objects'</p> </li> </ul> <p>A full set f available attributes and methods on (text-based)-file objects can be found in the Python docs of <code>_io.TextIOWrapper</code>.</p> <p>using <code>dir()</code>-builtin</p> <p>You can list the available attributes and methods of typical file-operations using the <code>dir(&lt;file-object&gt;)</code>-builtin function as shown here:</p> <pre><code>&gt;&gt;&gt; dir(fd)\n['_CHUNK_SIZE', '__class__', '__del__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_checkClosed', '_checkReadable', '_checkSeekable', '_checkWritable', '_finalizing', 'buffer', 'close', 'closed', 'detach', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'line_buffering', 'mode', 'name', 'newlines', 'read', 'readable', 'readline', 'readlines', 'seek', 'seekable', 'tell', 'truncate', 'writable', 'write', 'writelines']\n&gt;&gt;&gt; \n</code></pre> <p>using <code>help()</code>-builtin</p> <p>Again you can display the full description using the <code>help(fd)</code>-builtin on the returned file-object <code>fd</code> or any subsequent method or attribute e.g. <code>help(fd.read)</code>.</p>"},{"location":"training/main-course/io/#create-a-file","title":"Create a file","text":"<p>There is no explictit function to create a file. A file is implicitly created (if it doesn't exists) using the <code>write()</code>-method providing the mode-parameter <code>w</code>.</p> <pre><code>&gt;&gt;&gt; fd2 = open('bar.txt', 'w')\n&gt;&gt;&gt; \n</code></pre> <p>Note: Be aware of that <code>w</code>-mode will overwrite (truncate) a files content, if you need to keep it, use <code>a</code>-append mode.</p>"},{"location":"training/main-course/io/#read-from-a-file","title":"Read from a file","text":"<p>Assume the file 'foo.txt' contains the following 2-lines</p> <pre><code>cat foo.txt\nabc\ndef\n</code></pre> <p>There are three ways getting the content of a file</p> <ul> <li>read number of characters</li> <li>complete file</li> <li>line-by-line</li> </ul>"},{"location":"training/main-course/io/#read-some-characters","title":"Read some characters","text":"<p>file <code>read()</code>-call Here we ask for 2-characters in a <code>read()</code>-call</p> <p><pre><code>&gt;&gt;&gt; fd = open('foo.txt')\n&gt;&gt;&gt; fd.read(2)\n'ab'\n&gt;&gt;&gt; fd.read(2)\n'c\\n'\n&gt;&gt;&gt; fd.read(2)\n'de'\n&gt;&gt;&gt; fd.read(2)\n'f\\n'\n&gt;&gt;&gt; \n</code></pre> this can be looped</p> <pre><code>&gt;&gt;&gt; fd = open('foo.txt')\n&gt;&gt;&gt; s = None\n&gt;&gt;&gt; while s != '':\n...     s = fd.read(2)\n...     print(repr(s))\n... \n'ab'\n'c\\n'\n'de'\n'f\\n'\n''\n&gt;&gt;&gt;\n</code></pre> <p>Note: <code>read()</code> returns the empty string <code>''</code> when it reached the EOF (End Of File)</p>"},{"location":"training/main-course/io/#read-the-complete-file","title":"Read the complete file","text":"<p>file <code>read()</code>-call</p> <p>If the <code>read()</code> is called without a parameter, it returns the complete content of the file .</p> <pre><code>&gt;&gt;&gt; fd = open('foo.txt')\n&gt;&gt;&gt; s = fd.read()\n&gt;&gt;&gt; print(s)\nabc\ndef\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/io/#read-line-by-line","title":"Read line-by-line","text":"<p>A file can be read line-by-line using the <code>readline()</code>-method of the file-objects, see <code>help(fd.readline)</code>:</p> <p>file <code>readline()</code>-call</p> <p>Read line-by-line</p> <pre><code>&gt;&gt;&gt; fd = open('foo.txt')\n&gt;&gt;&gt; s = None\n&gt;&gt;&gt; while s != '':\n...     s = fd.readline()\n...     print(repr(s))\n... \n'abc\\n'\n'def\\n'\n''\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/main-course/io/#write-to-a-file","title":"Write to a file","text":"<p>File-writing needs a file-object opened in 'write'- or 'append'--mode. Assume you have an empty <code>bar.txt</code>file</p> <p>*** file <code>write()</code>-call*</p> <pre><code>&gt;&gt;&gt; fd = open('bar.txt', 'w')   # open the file in write-mode\n&gt;&gt;&gt; fd.write('abc\\n')\n4\n&gt;&gt;&gt; fd.write('def\\n')\n4\n&gt;&gt;&gt; fd.flush()\n&gt;&gt;&gt;\n</code></pre> <p>*** Note:* The written output is buffered until it reaches a dedicated size before it is finally written to the file. Flushing the buffer enforces writing the content to the buffer into the file.</p> <p>You can check the written file</p> <pre><code>cat bar.txt abc\ndef\n</code></pre>"},{"location":"training/main-course/io/#close-a-file","title":"Close a file","text":"<p>To close a file use <code>close()</code>-method of the file-object</p> <p>file <code>close()</code>-call</p> <pre><code>&gt;&gt;&gt; fd.close()\n&gt;&gt;&gt;\n</code></pre> <p>Note: Never forget to close a file after finishing the file-processing.</p>"},{"location":"training/main-course/main-course/","title":"A Curious Python Main Course","text":"<p>The Curious Python Main Course builds upon the material touched in the tutorial and tries to provide some more in-depth information on these topics.</p>"},{"location":"training/main-course/modules-packages/","title":"We are the Mods: Modules &amp; Package (and Scripts)","text":""},{"location":"training/main-course/modules-packages/#basic-module-and-package-layout","title":"Basic Module and Package Layout","text":"<p>A typical Python code layout structures the code in package directories and module files.</p> <p>A very simple package structure could look like this:</p> <pre><code>mypackage/\nmypackage/__init__.py\nmypackage/module1.py\nmypackage/module2.py\n</code></pre> <p>Suppose these files have the following contents:</p> <pre><code># mypackage Python package\nprint('mypackage')\n</code></pre> <pre><code># module1\nprint(\"I'm module 1\")\ndef f(*args, **kwargs):\nprint('Module 1 is great')\n</code></pre> <pre><code># module2\nprint(\"I'm module 2\")\ndef f(*args, **kwargs):\nprint('Module 2 is also great')\n</code></pre> <p>This package can now be used as follows: <pre><code>&gt;&gt;&gt; import mypackage\nmypackage\n&gt;&gt;&gt; mypackage.module1.f()  # this will fail: mypackage.module1 not yet imported\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: module 'mypackage' has no attribute 'module1'\n&gt;&gt;&gt;\n&gt;&gt;&gt; import mypackage.module1\nI'm module 1\n&gt;&gt;&gt; mypackage.module1.f()\nModule 1 is great\n&gt;&gt;&gt; import mypackage.module2\nI'm module 2\n&gt;&gt;&gt; mypackage.module2.f()\nModule 2 is also great\n&gt;&gt;&gt;\n&gt;&gt; import mypackage.module1 # 2nd import \n&gt;&gt;&gt; \n</code></pre></p> <p>Some things to note:</p> <ul> <li>code in an <code>__init__.py</code>-file in a package dir gets executed when the  package is imported</li> <li><code>__init__.py</code> code is just regular Python code</li> <li>statements in a module get executed when the module is imported</li> <li>modules are imported only once per interpreter session (you can enforce  reload in interactive sessions)</li> </ul>"},{"location":"training/main-course/modules-packages/#regular-and-namespace-packages","title":"Regular and Namespace Packages","text":""},{"location":"training/main-course/modules-packages/#module-search-path","title":"Module Search Path","text":"<p>Lookup of modules involves a search path. The search order for <code>mod.py</code> is</p> <ol> <li>look for a built-in module with that name</li> <li>look in the directories available in <code>sys.path</code> for the <code>mod.py</code> file</li> </ol> <p><code>sys.path</code> basically contains</p> <ul> <li>the directory containing the importing file, or the current working    directory if no file, i.e. in an interactive interpreter session</li> <li>the directories set in the (optional) <code>PYTHONPATH</code> environment variable</li> <li> <p>the default directories of the Python installation, e.g. for a Python 3.6    linux installation:</p> <pre><code>.../lib/python3.6/                # stdlib\n.../lib/python3.6/lib-dynload/    # stdlib shared libraries\n.../lib/python3.6/site-packages/  # site-wide installed 3rd party packages\n</code></pre> </li> </ul>"},{"location":"training/main-course/modules-packages/#scripts","title":"Scripts","text":"<p>Scripts are Python modules that are intended to be run as executables. More often that not such scripts will want to parse command line options, receive stdin input or user input and write stdout output or output file(s).</p> <p>Often, the duality of a script also being a normal module makes it desirable to have it act both as an importable module as well as an executable.</p> <p>In such situations it makes sense to guard the executable operations with:</p> <pre><code>if __name__ == \"__main__\":\n# everything here will only get executed when run as the main module\n# i.e. the special name __name__ contains the string \"__main__\"\n...\n</code></pre> <p>The special name <code>__name__</code> is set to <code>\"__main__\"</code> for the main file that gets executed by the Python interpreter, e.g.</p> <pre><code>python myprogram.py\n</code></pre> <p>or</p> <pre><code>./myprogram.py\n</code></pre> <p>if this file has been made executable.</p> <p>Note: The main file run by the Python interpreter doesn't need to have the <code>.py</code> file extension, so you can make such a file look like an executable  or command with regard to its file name (\"myprogram\"). However, it is not importable itself, then.</p> <p>Here's a template for a basic command line script:</p> <pre><code>import sys\ndef parse_args(args=None):\n\"\"\"Parse arguments from sys.argv if args is None (the default) or from args\n    sequence otherwise.\n    \"\"\"\nimport argparse\nparser = argparse.ArgumentParser()\n# Add arguments here\nargs = parser.parse_args(args)\nreturn args\ndef main(args=None):\n\"\"\"Main module function.\n    Exposes this modules' executable functionality for use as a module\n    function. \n    Parses arguments from sys.argv if args is None (the default) or from args\n    sequence otherwise.\n    \"\"\"\nargs = parse_args(args)\n# Add main code here\nif __name__ == \"__main__\":\nsys.exit(main())\n</code></pre> <p>Hint: More elaborate Python libraries that contain many packages and modules may want use the <code>console_scripts</code> entry point functionality of <code>setuptools</code>.  This is allows you to expose functions of your library (the \"entry points\") as command line scripts, automatically generated by <code>setuptools</code> when building the installable library package from the source code files.</p> <p>You can find more information on this here or in the Python Packaging User Guide.</p>"},{"location":"training/main-course/objects/","title":"Python Objects: Understanding (the basics of) the Python Object Model","text":""},{"location":"training/main-course/objects/#everything-is-an-object","title":"Everything is an Object","text":"<p>In Python everything is an object:</p> <p>Functions are objects, classes are objects, instances are objects, types are objects, modules are objects, you name it: everything's an object.</p> <p>The type of an object can be identified using the built-in <code>type()</code> function:</p> <pre><code>&gt;&gt;&gt; type(\"I'm curious about her\")\n&lt;class 'str'&gt;\n&gt;&gt;&gt; number = 42\n&gt;&gt;&gt; type(number)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; \n</code></pre> <p>Even code is an object:</p> <pre><code>&gt;&gt;&gt; source = \"lambda: 'Hello!'\"\n&gt;&gt;&gt; code = compile(source, '', 'eval')\n&gt;&gt;&gt; type(code)\n&lt;class 'code'&gt;\n&gt;&gt;&gt; isinstance(code, object)\nTrue\n&gt;&gt;&gt; f = eval(code)\n&gt;&gt;&gt; f()\n'Hello!'\n&gt;&gt;&gt;\n</code></pre> <p>An object is an entity encompassing the \"data\" and its acceptable operations. The Python data model documentation (https://docs.python.org/dev/reference/datamodel.html) describes:</p> <p>\"Every object has an identity, a type and a value. An object\u2019s identity never changes once it has been created; you may think of it as the object\u2019s address in memory. The \u2018is\u2019 operator compares the identity of two objects; the id() function returns an integer representing its identity.\"</p> <p>Often, Python objects are created and named immediately with an assignment. Assigments introduce a name to refer to the object but don't create the object:1</p> <pre><code>&gt;&gt;&gt; a = 1.2  # new name a for new float object\n&gt;&gt;&gt; b = 1.2  # new name b for new float object\n&gt;&gt;&gt; c = a    # new name c for existing float object\n&gt;&gt;&gt; type(a)\n&lt;class 'float'&gt;\n&gt;&gt;&gt; type(b)\n&lt;class 'float'&gt;\n&gt;&gt;&gt; type(c)\n&lt;class 'float'&gt;\n&gt;&gt;&gt; id(a)        # (1)\n140026583519544  # (2) different identity than (1) ==&gt; different object\n&gt;&gt;&gt; id(b)\n140026583519592\n&gt;&gt;&gt; id(c)        # (3) same identity as (1) ==&gt; same object\n140026583519544\n&gt;&gt;&gt; a is b\nFalse\n&gt;&gt;&gt; a is c\nTrue\n&gt;&gt;&gt;\n</code></pre> <p>But note that an object needn't have a name:</p> <pre><code>&gt;&gt;&gt; l = [1, 2.0, lambda x: x]\n</code></pre> <p>In this example while the <code>list</code> does have a name (\"l\") none of its items has one: Neither the 1st integer item nor the 2nd float item nor the 3rd anonymous function item.</p> <p>Python objects can be created e.g. by</p> <ul> <li>instantiating built-in types</li> <li>instantiating user-defined types (classes)</li> <li>defining classes</li> <li>defining functions</li> <li>defining anonymous functions</li> </ul> <p>You can create an instance of the most basic type <code>object</code> like this:</p> <pre><code>&gt;&gt;&gt; object()\n&lt;object object at 0x7f33e1b9b0d0&gt;\n</code></pre>"},{"location":"training/main-course/objects/#objects-are-first-class","title":"Objects are First-Class","text":"<p>This means that all (named) objects are equal in the sense that they can be treated equally: a function object can be an argument to another function, a module object can be a list item, a class can be a dictionary value (or even a dictionary key), ...</p> <p>This allows for writing powerful constructs: <pre><code>&gt;&gt; data = [42, 5.0, \"   some examples are more intelligent than others  \"]\n&gt;&gt;&gt; dispatcher = {                                \n...     str: lambda x: x.strip(),  # we want strings stripped\n...     int: lambda x: str(x**2),  # we want ints squared \n...     float: lambda x: str(-x)   # we want inverted floats\n...     }\n&gt;&gt;&gt; print('|'.join(\n...     dispatcher[type(d)](d) for d in data)\n...     )\n1764|-5.0|some examples are more intelligent than others\n&gt;&gt;&gt; \n</code></pre></p>"},{"location":"training/main-course/objects/#more-characteristics-of-objects","title":"More characteristics of objects","text":"<ol> <li>The identity of an object never changes after creation (see above).</li> <li>The type of an object never changes after creation.</li> <li>The type of the object defines the allowed values and the acceptable operations.</li> <li>An objects is mutable if its value can be changed, immutable otherwise.</li> </ol>"},{"location":"training/main-course/objects/#immutable-and-mutable-objects","title":"Immutable and Mutable Objects","text":"<p>The mutability/immutability of objects is determined by their types:</p> <ol> <li>immutable types: <code>str</code>, <code>int</code>, <code>float</code>, <code>complex</code>, <code>tuple</code>, <code>frozenset</code></li> <li>mutable types: <code>list</code>, <code>dict</code>, <code>set</code>, user-defined objects (classes)</li> </ol>"},{"location":"training/main-course/objects/#examples-immutable-types","title":"Examples: immutable types","text":"<p>Immutable type <code>int</code>:</p> <pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; id(a)\n140026581642624\n&gt;&gt;&gt; a = 2       # assign name 'a' to a new object\n&gt;&gt;&gt; id(a)\n140026581642656\n&gt;&gt;&gt; a += 1\n&gt;&gt;&gt; a\n3\n&gt;&gt;&gt; # a is now a name for another new object: immutable object 2 hasn't\n&gt;&gt;&gt; # changed in-place\n&gt;&gt;&gt; id(a)\n140357021310400\n</code></pre> <p>Immutable type <code>float</code>:</p> <pre><code>&gt;&gt;&gt; f1 = 1.2 \n&gt;&gt;&gt; f2 = 1.2\n&gt;&gt;&gt; f3 = f1     # (1) f3 is another name for the object named f1\n&gt;&gt;&gt; id(f1)\n140026583519544\n&gt;&gt;&gt; id(f2)\n140026583519592\n&gt;&gt;&gt; id(f3)\n140026583519544\n&gt;&gt;&gt; f1 = 1.3    # (2) the name f1 is now given to another object\n&gt;&gt;&gt; f1\n1.3\n&gt;&gt;&gt; f2\n1.2\n&gt;&gt;&gt; f3          # (3) f3 is unaffected: it is still a name for the original object (1)\n1.2\n&gt;&gt;&gt; id(f1)\n140026583519352\n&gt;&gt;&gt; id(f2)\n140026583519592\n&gt;&gt;&gt; id(f3)\n140026583519544\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/objects/#examples-mutable-types","title":"Examples: mutable types","text":"<p>Mutable type <code>list</code>:</p> <pre><code>&gt;&gt;&gt; l1 = [1, 2, 3]\n&gt;&gt;&gt; l2 = l1      # (1) l2 is another name for the object named l1\n&gt;&gt;&gt; id(l1)\n140026582652168\n&gt;&gt;&gt; id(l2)\n140026582652168\n&gt;&gt;&gt; l1[0] = 9    # (2) change a value of of l1\n&gt;&gt;&gt; l1\n[9, 2, 3]\n&gt;&gt;&gt; l2           # (3) the change (2) also effects the value of l2\n[9, 2, 3]\n&gt;&gt;&gt; id(l1)\n140026582652168\n&gt;&gt;&gt; id(l2)\n140026582652168\n&gt;&gt;&gt; \n&gt;&gt;&gt; l1 =  [1, 2, 3]\n&gt;&gt;&gt; l2 = l1\n&gt;&gt;&gt; l1 += [4]  # extend mutable object\n&gt;&gt;&gt; l1\n[1, 2, 3, 4]\n&gt;&gt;&gt; l2\n[1, 2, 3, 4]\n&gt;&gt;&gt; l1 is l2\nTrue\n&gt;&gt;&gt; \n</code></pre> <p>Mutable type <code>dict</code>:</p> <pre><code>&gt;&gt;&gt; d1 = {1: 'one', 2: 'two'}\n&gt;&gt;&gt; d2 = d1\n&gt;&gt;&gt; d2[1] = 'three'  # create some confusion\n&gt;&gt;&gt; d2\n{1: 'three', 2: 'two'}\n&gt;&gt;&gt; d1\n{1: 'three', 2: 'two'}\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/main-course/objects/#object-lifetime-and-object-reference","title":"Object Lifetime and Object Reference","text":"<p>Every object that is created must be destroyed when it is no longer needed, otherwise we run out of memory eventually. In Python objects aren't explicitly destroyed but may be garbage-collected by the interpreter when they become unreachable, i.e. they aren't referenced any more (by name or by other objects).</p> <p>CPython implementation detail: CPython uses reference counting. Every object carries the \"in-use\" information in a \"reference count\" which records the number of references to this object. Remember, a variable is a name referencing an object. An assignment of a name to an object establishes this reference - during this step the reference count of the object is increased.</p> <p>Conversely the object's reference count is decreased when the variable is deleted (explicit using <code>del</code> or implicit by running out of scope) or re-assigned to another object.</p> <p>If the reference count of an objects is <code>0</code> the object is automatically destroyed by the garbage collector of the Python interpreter (not necessarily immediately, so don't rely on it!).</p> <p>You can watch these mechanisms using the <code>getrefcount()</code>-function of the Python standard library module <code>sys</code>:</p> <pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; l1 = ['cpython', 'does', 'refcounting']  # create named new list\n&gt;&gt;&gt; sys.getrefcount(l1)\n2\n&gt;&gt;&gt; id(l1)\n39141600\n&gt;&gt;&gt; l2 = l1             # new name for existing object\n&gt;&gt;&gt; id(l2)              # yes, it's the same object indeed\n39141600\n&gt;&gt;&gt; sys.getrefcount(l1) # ==&gt; refcount increased\n3\n&gt;&gt;&gt; sys.getrefcount(l2)\n3\n&gt;&gt;&gt; l3 = l1  # yet another new name for (=reference to) existing object\n&gt;&gt;&gt; sys.getrefcount(l1)\n4\n&gt;&gt;&gt; del l3               # delete name l3\n&gt;&gt;&gt; sys.getrefcount(l1)  # ==&gt; refcount of list object decreased\n3\n&gt;&gt;&gt; l2 = object()        # assign name l2 to another object\n&gt;&gt;&gt; sys.getrefcount(l1)  # ==&gt; refcount of list object decreased\n2\n&gt;&gt;&gt; \n</code></pre> <p>Remark: As you may have noted the reference count is higher than you might expect. This is due to the fact that the <code>sys.getrefcount()</code>-function call also  increases the object's reference count, as it needs to hold a reference to the  object, too, while it is running.</p>"},{"location":"training/main-course/objects/#introspection","title":"Introspection","text":"<p>Python objects are highly introspectable. That means that you can find out pretty much anything about their properties and capabailities (names, types, attributes, methods, annotations, ...) at runtime.</p> <p>A method to list an object's attribute is the <code>dir()</code> built-in:</p> <pre><code>&gt;&gt;&gt; dir(3)\n['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__',\n'__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__',\n'__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__',\n'__getnewargs__', '__gt__', '__hash__', '__index__', '__init__',\n'__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__',\n'__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__',\n'__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__',\n'__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__',\n'__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__',\n'__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__',\n'__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__',\n'as_integer_ratio', 'bit_length', 'conjugate', 'denominator', 'from_bytes',\n'imag', 'numerator', 'real', 'to_bytes']\n&gt;&gt;&gt;\n&gt;&gt;&gt; class IntervalDefaults:\n...     min_val = -10\n...     max_val = 10\n... \n&gt;&gt;&gt; dir(IntervalDefaults)\n['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__',\n'__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__',\n'__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__',\n'__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',\n'__str__', '__subclasshook__', '__weakref__', 'max_val', 'min_val']\n&gt;&gt;&gt; \n</code></pre> <p>Or you can peek into an object's <code>__dict__</code>, since Python objects' inner workings are predominantly implemented with the help of dictionaries:</p> <pre><code>&gt;&gt;&gt; IntervalDefaults.__dict__  # nowadays, a read-only dict on classes\nmappingproxy({'__module__': '__main__', 'min_val': -10, 'max_val': 10,\n'__dict__': &lt;attribute '__dict__' of 'IntervalDefaults' objects&gt;,\n'__weakref__': &lt;attribute '__weakref__' of 'IntervalDefaults' objects&gt;,\n'__doc__': None})\n&gt;&gt;&gt;\n</code></pre> <p>To check if an object is callable there's the <code>callable</code> built-in:</p> <pre><code>&gt;&gt;&gt; def noop(): pass\n... \n&gt;&gt;&gt; callable(noop)\nTrue\n&gt;&gt;&gt; \n</code></pre> <p>The standard library inspect module offers extensive introspection support:</p> <pre><code>&gt;&gt;&gt; def accelerate(car, target_speed, thrust=100):\n...     ...\n...\n&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; inspect.signature(accelerate)\n&lt;Signature (car, target_speed, thrust=100)&gt;\n&gt;&gt;&gt; inspect.signature(accelerate).parameters\nmappingproxy(OrderedDict([('car', &lt;Parameter \"car\"&gt;), ('target_speed',\n&lt;Parameter \"target_speed\"&gt;), ('thrust', &lt;Parameter \"thrust=100\"&gt;)]))\n&gt;&gt;&gt; inspect.signature(accelerate).parameters['car'].default\n&lt;class 'inspect._empty'&gt;\n&gt;&gt;&gt; \n</code></pre> <p>Lesson: Object Introspection</p> TaskHintsSolution <p>Write a program that lets the user enter a text.</p> <p>Try to convert the user's input text to data in this order:</p> <ol> <li>Try to convert the text to <code>int</code>.</li> <li>If that fails, try to convert to <code>float</code>.</li> <li>If that fails, simply use the text data.</li> </ol> <p>By introspection, find out about the converted object's callable methods, apart from those whose name starts with a leading underscore ('_').</p> <p>Generate and print a menu for the user to select which method should be applied to the (converted) object. Invoke the selected method and print the method's return value and the object.</p> <p>Optional: Some methods might require an argument and thus can not simply be called without. Find out if the method needs arguments in the introspection step and sort those out for the selection menu generation.</p> <p>Optional 2: Experiment with additional type converters for the input  data, e.g. also accept <code>list</code> and <code>tuple</code>. Can you simple use the <code>list</code> or <code>tuple</code> constructors for type conversion here? Try to execute the <code>sort</code> method of a list object.</p> <p>Use the <code>input()</code> built-in function to read user input interactively.</p> <p>Remember you can <code>try</code> an operation and catch a resulting exception if it fails.</p> <p>Optional: <code>inspect.signature</code> can provide you with information about a callable's parameters.</p> <p>Optional 2: An easy way to parse text input to lists or tuples is by using <code>json.loads</code>.</p> <p>The program output could look something like this:</p> <pre><code>python3 object_introspection.py\nYour input please: 42\nvalue = 42 [&lt;class 'int'&gt;]\n==========================================\nPlease select the method you want to call:\n1 - as_integer_ratio\n2 - bit_count\n3 - bit_length\n4 - conjugate\n5 - from_bytes\n6 - to_bytes\n==========================================\nPlease enter your choice: 1\nYou selected 'as_integer_ratio'\nResult:\n  (42).as_integer_ratio() --&gt; (42, 1) [&lt;class 'tuple'&gt;]\n  value = 42\n</code></pre> Really take a peek now? object_introspection.py<pre><code># object_introspection.property\nimport json\nimport sys\ndef ask_user(prompt='Your input please: ', types=(int, float, json.loads)):\n\"\"\"Get user input and convert to target data type with the 1st usable\n    `types` converter.\n    Returns the converted data or the string input if no converter is able to\n    convert the text input data.\n    \"\"\"\ntext = input(prompt)\n# str is the default.\nvalue = text\nfor typ in types:\ntry:\nvalue = typ(text)\nbreak\nexcept Exception:\n# Try the next type...\npass\nprint(f\"value = {value} [{type(value)}]\")\nreturn value\ndef get_object_methods(obj):\n\"\"\"Return a list of all `obj` methods that do not start with a leading\n    underscore.\n    \"\"\"\nmethods = [\nvalue for name in dir(obj)\nif not name.startswith('_') and callable(value := getattr(obj, name))\n]\nreturn methods\ndef select_method(methods):\nprint(\"==========================================\")\nprint(\"Please select the method you want to call:\")\nfor (i, method) in enumerate(methods):\nprint(f\" {i+1} - {method.__name__}\")\nprint(\"==========================================\")\nwhile (input_text := input(\"Please enter your choice: \")):\ntry:\nchoice = int(input_text)\nbreak\nexcept ValueError:\ncontinue\nselected_method = methods[choice-1]\nprint(f\"You selected '{selected_method.__name__}'\")\nreturn selected_method\ndef run_method(method):\nresult = method()\nprint(\"Result:\")\nprint(\nf\"  ({method.__self__}).{method.__name__}() --&gt; \"\nf\"{result} [{type(result)}]\"\n)\nprint(f\"  value = {method.__self__}\")\ndef main():\nobj = ask_user()\nmethods = get_object_methods(obj)\nselected_method = select_method(methods)\ntry:\nrun_method(selected_method)\nexcept Exception as exc:\nprint(f\"Oops! Ran into exception: {exc}.\")\nreturn 1\nif __name__ == \"__main__\":\nsys.exit(main())\n</code></pre> <p></p> <ol> <li> <p>Note though that <code>a = 1.2; b = 1.2; a is b</code> would actually yield <code>True</code>! This is due to identical float constants on the same line being stored as  one float constant, thus labeling the single float object with the names <code>a</code> and <code>b</code> (try <code>compile('a = 1.2; b = 1.2; a is b', '', 'exec').co_consts</code>).\u00a0\u21a9</p> </li> </ol>"},{"location":"training/main-course/stdlib-tour/","title":"Guided standard library tour: A subjective selection of indispensible stdlib libraries","text":"<p>Caveat: This is necessarily opinionated and definitely too short </p> <p>Note</p> <p>currently under construction...</p>"},{"location":"training/main-course/venvs-packages-installation/","title":"Python Environments and (3rd party) Package Installation","text":""},{"location":"training/main-course/venvs-packages-installation/#the-pythons-nest","title":"The Python's Nest","text":"<p>A typical system (C)Python installation will look something like this:</p> <pre><code># Linux system essential Python paths\n\n/usr/bin/python -&gt; python3.6\n/usr/bin/python3 -&gt; python3.6\n/usr/bin/python3.6\n/usr/include/python3.6 -&gt; python3.6m\n/usr/include/python3.6m\n/usr/lib/python3.6\n</code></pre> <p>The <code>lib</code> path contains the Python standard library, basically:</p> <pre><code>/usr/lib/python3.6              # pure-python stdlib modules/packages\n/usr/lib/python3.6/lib-dynload  # shared libraries (compiled C extensions)\n</code></pre> <p>But there's also the <code>site-packages</code> directory for system-wide installation of 3rd party libraries (i.e. not bundled with Pytho in its stdlib): <pre><code>/usr/lib/python3.6/site-packages  # path for additional, non-standard packages\n</code></pre></p> <p>To install anything into these paths you usually need admin privileges (on Linux, these paths are normally owned by the <code>root</code> user).</p> <p>The benefit of installing additional packages to the system-wide installation is obvious: all Python programs can then use these added functionality, and the necessary library files are installed only once.</p> <p>Most of the time, it is however less desirable to install your dependencies (the 3rd party packages your program depends on) to the system Python installation:</p> <ul> <li>you might not even have admin privileges so you can't properly install your    dependencies (the usual cas in corporate environments)</li> <li>another program might require the same dependency albeit in a different,    potentially conflicting version</li> <li>it is harder to create portable programs as the next machine might not    have the same packages installed, so your program won't run there</li> </ul>"},{"location":"training/main-course/venvs-packages-installation/#installing-python-packages","title":"Installing Python Packages","text":"<p>Python packages can be installed using the Python package installer <code>pip</code>.</p> <p>Usually such packages are retrieved from the official Python Package Index (PyPI).</p> <p>Warning</p> <p>To avoid unintentional installation of malicious packages always make sure you </p> <ul> <li>know what you're installing (ideally having reviewed the code),</li> <li>use a trusted packages source1 and</li> <li>use the correct spelling of the package you intend to    install.2</li> </ul> <p>Unfortunately this is not too easy because anybody can upload their packages to PyPI. As your dependency will probably depend on other packages itself (and so on), the dependency tree can quickly become quite large.</p> <p>On the plus-side well-known projects are usually developed in the open (e.g. on GitHub/GitLab/ Bitbucket) and reviewed by many eyes.</p> <p>So just be aware.</p> <p>Using the popular <code>requests</code> library as an example:</p> <p>Install the latest &amp; greatest version: <pre><code>pip install \"requests\"\n</code></pre></p> <p>You can explicitly select a specific version for installation:</p> <pre><code>pip install \"requests==2.23.0\"\n</code></pre> <p>It's also possible to select a version inside some version range:</p> <pre><code>pip install \"requests&gt;=1,&lt;2\"\n</code></pre> <p><code>pip</code> also allows you to select a version that is deemed compatible to  another version (according to certain criteria of compatibility):3</p> <pre><code>pip install \"requests~=2.19.0\"\n</code></pre> <p>If the package to install is properly set up, <code>pip</code> resolves its dependencies and automatically installs these \"prerequisites\", i.e. the dependencies of your dependencies.</p> <p>You can control the \"package index\" where the packages are retrieved from by <code>pip</code>, with the default being PyPI; packages can also be installed from local filesystem paths and directly from (remote) version  control repositories.</p> <p>See here for more detailed tutorial instructions on installing packages.</p>"},{"location":"training/main-course/venvs-packages-installation/#python-environments","title":"Python environments","text":"<p>If you don't want to install to the system Python (which is probably a good idea) you can isolate your app and its dependencies in a Python \"virtual environment\" or \"venv\". Virtual environments are installation directories that basically contain a Python installation layout that links to the system installation. In effect all the system Python installation stuff (standard library etc.) is retrieved from this system installation while your application and its dependencies are installed into the <code>site-packages</code> directory of the virtual environment.</p> <p>A virtual env can simply be created with </p> <pre><code>python3 -m venv /path/to/new/virtual-env\n</code></pre> <p>To use the virtual environment you can either</p> <ul> <li> <p>explitly use the executable path(s) of this virtual env:</p> <pre><code>/path/to/new/virtual-env/bin/python  # interpreter\n/path/to/new/virtual-env/bin/pip     # package installer\n</code></pre> </li> <li> <p>or you can activate this environment:</p> <pre><code># POSIX (Linus e.a.)\nsource /path/to/new/virtual-env/bin/activate           # bash/zsh\nsource /path/to/new/virtual-env/bin/activate.csh       # csh/tcsh\n\n# Windows \nC:\\&gt; \\path\\to\\new\\virtual-env\\Scripts\\activate.bat     # cmd.exe\nPS C:\\&gt; \\path\\to\\new\\virtual-env\\Scripts\\Activate.ps1  # PowerShell\n</code></pre> </li> </ul> <p>Activation means \"sourcing\" a script that makes the necessary environment settings (e.g. the program search path (<code>PATH</code> on Linux)) so that this virtual env can be used without qualified path invocation. Once activated you can simply use <code>python3</code>, <code>pip</code>, ... and the executable files in <code>/path/to/new/virtual-env/bin/</code> are invoked. That means installing packages with <code>pip</code> will now install these to the active virtual env.</p> <p>To remind you you're working within an activated virtual env, activation conveniently modifiies the command line prompt. </p> <p>Finally, you can leave activation using <code>deactivate</code>:</p> <pre><code>0 lisa@devmachine .../~ $ source ~/venvs/six-venv/bin/activate\n(six-venv) 0 lisa@devmachine .../~ $\n(six-venv) 0 lisa@devmachine .../cpycourse $ deactivate\n0 lisa@devmachine .../~ $ \n</code></pre> <ol> <li> <p>There are ongoing efforts to improve PyPI security and guard against evil-doers.\u00a0\u21a9</p> </li> <li> <p>There have been  attempts in the past to put malicious code on PyPI; these used the typosquatting technique and  mimicked popular libraries by using a similar package name.\u00a0\u21a9</p> </li> <li> <p>See https://www.python.org/dev/peps/pep-0440/.\u00a0\u21a9</p> </li> </ol>"},{"location":"training/tutorial/tutorial/","title":"A Curious Python Course: Tutorial","text":"<p>A little introduction to the language mainly by example, to show (some of) Python's main features.</p> <p>This tutorial refers to Python version 3.</p>"},{"location":"training/tutorial/tutorial/#python-documentation","title":"Python Documentation","text":"<p>If you need information way beyond what we can show you here, the (great!) official Python documentation can be found here: https://docs.python.org/3/index.html</p>"},{"location":"training/tutorial/tutorial/#getting-a-python","title":"Getting a Python","text":"<p>See here for hints on Python installation.</p>"},{"location":"training/tutorial/tutorial/#starting-the-python-interpreter","title":"Starting the Python interpreter","text":"<p>For an interactive session simply type <code>python</code> or <code>python3</code> in a console/shell of your computer (<code>$</code>-shell prompt on *nix-based systems):</p> <pre><code>Python 3.6.8 (default, May 31 2023, 10:28:59)\n[GCC 8.5.0 20210514 (Red Hat 8.5.0-18)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre> <p>You can also use a qualified interpreter version, depending on what's available on your machine:</p> <pre><code>$ python3.8\nPython 3.8.16 (default, May 31 2023, 12:44:21) [GCC 8.5.0 20210514 (Red Hat 8.5.0-18)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; </code></pre> <p>The first lines show the interpreter version, some information about the build environment of the interpreter (compiler version and platform) and the copyright information.</p> <p>The Python prompt <code>&gt;&gt;&gt;</code> is signaling that the interpreter awaits user input.</p> <p>The version and copyright information on startup can be suppressed using the quiet-option <code>-q</code>.</p> <pre><code>$ python -q\n&gt;&gt;&gt;\n</code></pre> <p>Note: From now on, whenever you see <code>&gt;&gt;&gt; ...</code>-lines this means an example in an  interactive Python session.</p> <p>Type in your 1.st Python statement. After pressing the <code>&lt;Enter&gt;</code>-key the interpreter will execute the statement, and in this case will show the result.</p> <pre><code>&gt;&gt;&gt; print(\"Hello, world!\")\nHello, world!\n&gt;&gt;&gt;\n</code></pre> <p>After finishing the execution of the statement, the interpreter comes back to the prompt, awaiting the next input.</p> <p>If you enter a simple expression at the prompt (e.g. an integer or string literal and press <code>&lt;Enter&gt;</code> a string representation of the result gets printed:</p> <pre><code>&gt;&gt;&gt; \"Hello, world!\"\n'Hello, world!'\n&gt;&gt;&gt; 42\n42\n&gt;&gt;&gt; \n</code></pre> <p>An interactive session can be stopped by pressing <code>Ctrl-d</code> (Linux) or <code>Ctrl-z</code> (Windows).</p> <p>A summary of the Python interpreter's commandline options can be listed with its help option <code>-h</code>. This will display the usage, the available commandline options and environment variables controlling the interpreter. Here's the output of a Python 3 interpreter on Linux:</p> <pre><code>python3.8 -h\nusage: python3.8 [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-b     : issue warnings about str(bytes_instance), str(bytearray_instance)\n         and comparing bytes/bytearray with str. (-bb: issue errors)\n-B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser; also PYTHONDEBUG=x\n-E     : ignore PYTHON* environment variables (such as PYTHONPATH)\n-h     : print this help message and exit (also --help)\n-i     : inspect interactively after running script; forces a prompt even\n         if stdin does not appear to be a terminal; also PYTHONINSPECT=x\n-I     : isolate Python from the user's environment (implies -E and -s)\n-m mod : run library module as a script (terminates option list)\n-O     : remove assert and __debug__-dependent statements; add .opt-1 before\n         .pyc extension; also PYTHONOPTIMIZE=x\n-OO    : do -O changes and also discard docstrings; add .opt-2 before\n         .pyc extension\n-q     : don't print version and copyright messages on interactive startup\n-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE\n-S     : don't imply 'import site' on initialization\n-u     : force the stdout and stderr streams to be unbuffered;\n         this option has no effect on stdin; also PYTHONUNBUFFERED=x\n-v     : verbose (trace import statements); also PYTHONVERBOSE=x\n         can be supplied multiple times to increase verbosity\n-V     : print the Python version number and exit (also --version)\n         when given twice, print more information about the build\n-W arg : warning control; arg is action:message:category:module:lineno\n         also PYTHONWARNINGS=arg\n-x     : skip first line of source, allowing use of non-Unix forms of #!cmd\n-X opt : set implementation-specific option. The following options are available:\n\n         -X faulthandler: enable faulthandler\n         -X showrefcount: output the total reference count and number of used\n             memory blocks when the program finishes or after each statement in the\n             interactive interpreter. This only works on debug builds\n         -X tracemalloc: start tracing Python memory allocations using the\n             tracemalloc module. By default, only the most recent frame is stored in a\n             traceback of a trace. Use -X tracemalloc=NFRAME to start tracing with a\n             traceback limit of NFRAME frames\n         -X showalloccount: output the total count of allocated objects for each\n             type when the program finishes. This only works when Python was built with\n             COUNT_ALLOCS defined\n         -X importtime: show how long each import takes. It shows module name,\n             cumulative time (including nested imports) and self time (excluding\n             nested imports). Note that its output may be broken in multi-threaded\n             application. Typical usage is python3 -X importtime -c 'import asyncio'\n         -X dev: enable CPython's \"development mode\", introducing additional runtime\n             checks which are too expensive to be enabled by default. Effect of the\n             developer mode:\n                * Add default warning filter, as -W default\n                * Install debug hooks on memory allocators: see the PyMem_SetupDebugHooks() C function\n                * Enable the faulthandler module to dump the Python traceback on a crash\n                * Enable asyncio debug mode\n                * Set the dev_mode attribute of sys.flags to True\n                * io.IOBase destructor logs close() exceptions\n         -X utf8: enable UTF-8 mode for operating system interfaces, overriding the default\n             locale-aware mode. -X utf8=0 explicitly disables UTF-8 mode (even when it would\n             otherwise activate automatically)\n         -X pycache_prefix=PATH: enable writing .pyc files to a parallel tree rooted at the\n             given directory instead of to the code tree\n         -X int_max_str_digits=number: limit the size of int&lt;-&gt;str conversions.\n             This helps avoid denial of service attacks when parsing untrusted data.\n             The default is sys.int_info.default_max_str_digits.  0 disables.\n\n--check-hash-based-pycs always|default|never:\n    control how Python invalidates hash-based .pyc files\nfile   : program read from script file\n-      : program read from stdin (default; interactive mode if a tty)\narg ...: arguments passed to program in sys.argv[1:]\n\nOther environment variables:\nPYTHONSTARTUP: file executed on interactive startup (no default)\nPYTHONPATH   : ':'-separated list of directories prefixed to the\n               default module search path.  The result is sys.path.\nPYTHONHOME   : alternate &lt;prefix&gt; directory (or &lt;prefix&gt;:&lt;exec_prefix&gt;).\n               The default module search path uses &lt;prefix&gt;/lib/pythonX.X.\nPYTHONCASEOK : ignore case in 'import' statements (Windows).\nPYTHONUTF8: if set to 1, enable the UTF-8 mode.\nPYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.\nPYTHONFAULTHANDLER: dump the Python traceback on fatal errors.\nPYTHONHASHSEED: if this variable is set to 'random', a random value is used\n   to seed the hashes of str and bytes objects.  It can also be set to an\n   integer in the range [0,4294967295] to get hash values with a\n   predictable seed.\nPYTHONINTMAXSTRDIGITS: limits the maximum digit characters in an int value\n   when converting from a string and when converting an int back to a str.\n   A value of 0 disables the limit.  Conversions to or from bases 2, 4, 8,\n   16, and 32 are never limited.\nPYTHONMALLOC: set the Python memory allocators and/or install debug hooks\n   on Python memory allocators. Use PYTHONMALLOC=debug to install debug\n   hooks.\nPYTHONCOERCECLOCALE: if this variable is set to 0, it disables the locale\n   coercion behavior. Use PYTHONCOERCECLOCALE=warn to request display of\n   locale coercion and locale compatibility warnings on stderr.\nPYTHONBREAKPOINT: if this variable is set to 0, it disables the default\n   debugger. It can be set to the callable of your debugger of choice.\nPYTHONDEVMODE: enable the development mode.\nPYTHONPYCACHEPREFIX: root directory for bytecode cache (pyc) files.\n</code></pre>"},{"location":"training/tutorial/tutorial/#running-a-python-program","title":"Running a Python program","text":"<p>A program is built up of a sequence of python statements (i.e. the \"program code\" or \"code\"). This code can be</p> <ul> <li>entered at the Python prompt, in interactive mode,</li> <li>provided as a command line argument or</li> <li>stored in module files with the <code>.py</code>-extension.</li> </ul> <p>For simple, short ad-hoc one-liners it can be very handy to use command line string arguments:</p> <pre><code>$ python -c \"print('Hello'); print('World')\"\nHello\nWorld\n$\n</code></pre> <p>As shown you can use the semicolon to separate multiple statements.</p> <p>But typically, code is placed into Python source files named <code>&lt;module name&gt;.py</code> , in our case helloworld.py:</p> <p><pre><code>print('Hello, world!')\n</code></pre> The code can then be executed running the following command:</p> <pre><code>$ python helloworld.py\nHello, world!\n$\n</code></pre>"},{"location":"training/tutorial/tutorial/#a-sample-python-program","title":"A Sample Python Program","text":"<p>This is a simple Python program that calculates the present value of a series of cashflows:</p> <p>Example</p> CodeHints <pre><code>\"\"\"Calculate the present value for a list of cash flows.\n\"\"\"\n# List of cash flows at time intervals t=0, t=1, t=2, ...\ncashflows = [-100, -2, 3, 6, 8, 110]\n# The fixed interest rate.\ninterest_rate = 0.03  # 3 %\n# Discount factor\nq = 1 + interest_rate\npresent_value = 0\nfor (t, cf) in enumerate(cashflows):\npresent_value += cf * q**(-t)\nprint(f'Present value for cash flows {cashflows} and interest rate '\nf'{interest_rate}:\\n    PV = {present_value}')\n</code></pre> <p>The present value (PV) of a series of cash flows represents the current value of an expected future income stream.</p> <p>Often, the net present value (NPV) of some initial investment (principal, at time t=0) and then a series of discounted revenues over time (t=1, t=2, ...) is calculated to support investment decisions: an NPV &gt; 0 promises an expected net gain or an investment with a higher NPV would preferrable to one with a lower NPV.</p> <p>The basic PV formula/model assumes a fixed interest rate over time. The future cash flows and the fixed interest rates are usually uncertain i.e. they are predictions or expectations.</p> <p>Running this program yields the following output:</p> <pre><code>$ python3 src/present_value.py\nPresent value for [-100, -2, 3, 6, 8, 110] and interest rate 0.03:\n    pv = 8.371752776288233\n</code></pre> <p>This program exhibits the main building blocks of a Python program.</p> <p>Lesson: Command Line Calculation</p> TaskHintsSolution <p>Use Python as a \"command line calculator\" to calculate repayment plus compound interest for </p> <ul> <li>a yearly interest of 3%,</li> <li>a duration of 3 years and</li> <li>an investment of 91514.17 \u20ac.</li> </ul> <p>Perform the task in an interative Python session (the \"REPL\"), on the command line or e.g. in Jupyter.</p> Really take a peek now? <pre><code>&gt;&gt;&gt; 91514.17 * 1.03**3\n100000.00444159\n</code></pre> <p>Explanation:</p> <pre><code>&gt;&gt;&gt; principal = 91514.17\n&gt;&gt;&gt; interest_rate = 0.03 \n&gt;&gt;&gt; q = 1 + interest_rate  # factor\n&gt;&gt;&gt; t = 3  # time interval in years\n&gt;&gt;&gt; accumulated_value = principal * q**t\n&gt;&gt;&gt; accumulated_value\n100000.00444159\n</code></pre>"},{"location":"training/tutorial/tutorial/#python-program-building-blocks","title":"Python Program Building Blocks","text":"<p>A program is built as a sequence of instructions. The basic building blocks of  a Python program are:</p> <ol> <li>Expressions</li> <li>Operands and Operators</li> <li>Statements</li> <li>Comments</li> </ol> <p>So</p> <ul> <li>a program is a sequence of comments and statements  </li> <li>a statement is either an 'executable instruction' (do-something) or an 'evaluable expression' (compute-something)  </li> <li>an expression is built up from operands and operators  </li> </ul>"},{"location":"training/tutorial/tutorial/#program-execution","title":"Program Execution","text":"<p>Running a program can be described as a top-down line-by-line processing: evaluation of expressions and execution of statements.</p>"},{"location":"training/tutorial/tutorial/#variables-and-assignments","title":"Variables and Assignments","text":"<p>Variables are one of the the key elements of programming languages. Allthough the implementation may differ, the key concept is the same: Providing named access to an area in memory holding data, which can be changed during program execution.</p> <p>In Python a variable is a name referencing an object in memory. You can create a variable with an assignment-statement:</p> <pre><code>&gt;&gt;&gt; a = 5\n</code></pre> <p>Python variables can be rebound by further assignments.  At different points in time, the variable may refer to different objects, with different values and types of value. This makes Python a dynamically typed language.</p> <pre><code>&gt;&gt;&gt; a = 5 # create variable 'a' which is bound to integer object 5\n&gt;&gt;&gt; a     # named access to object\n5\n&gt;&gt;&gt; type(a) # the object named 'a' is of type 'int'\n&lt;class 'int'&gt;\n&gt;&gt;&gt; a = 'foo' # rebind the variable to a different object\n&gt;&gt;&gt; a\n'foo'\n&gt;&gt;&gt; type(a) # 'a' is now the name for an object of type 'str'\n&lt;class 'str'&gt;\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/tutorial/tutorial/#its-all-about-data-python-data-types-and-python-objects","title":"It's all about data: Python Data Types and Python Objects","text":"<p>Python provides a bunch of popular data types.</p> <p>All data is represented as an object and has a type:</p> <pre><code>&gt;&gt;&gt; 'foo'\n'foo'\n&gt;&gt;&gt; type('foo')  # type built-in function returns an object's type\n&lt;class 'str'&gt;\n&gt;&gt;&gt; isinstance('foo', str)  # isinstance tests if an object is of a certain type\nTrue\n&gt;&gt;&gt;\n</code></pre> <p>You can access an object's attributes with the <code>.</code>-operator:</p> <pre><code>&gt;&gt;&gt; \"foo\".upper  # Attribute access: give me the \"upper\" attribute of str \"foo\"\n&lt;built-in method upper of str object at 0x7f2342e6f8f0&gt;\n&gt;&gt;&gt; \n</code></pre> <p>If such an attribute is callable (a \"method\") then you can invoke it:</p> <pre><code>&gt;&gt;&gt; \"foo\".upper()  # call a method like &lt;method_name&gt;()\n'FOO'\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#strings-str","title":"Strings - <code>str</code>","text":"<p>Strings are essential for handling text data:</p> <pre><code>&gt;&gt;&gt; 'Python knows text'\n'Python knows text'\n&gt;&gt;&gt; \"Python knows text\"  # double-quoted is also allowed\n'Python knows text'\n&gt;&gt;&gt; # triple quoted text can span lines\n&gt;&gt;&gt; \"\"\"Python\n... knows\n... text\"\"\"\n'Python\\nknows\\ntext'\n&gt;&gt;&gt; \n</code></pre> <p>Strings conveniently support many useful operations: <pre><code>&gt;&gt;&gt; ''.join(('foo', 'bar'))  # string concatenation using builtin method 'join()'\n'foobar'\n&gt;&gt;&gt; 'foo' + 'bar'            # string concatenation using '+' operator\n'foobar'\n&gt;&gt;&gt; 'foobar'.upper()         # copy of string in all-uppercase letters\n'FOOBAR'\n&gt;&gt;&gt; 'foo bar'.title()        # copy of string in \"title case\"\n'Foo Bar'\n</code></pre></p> <pre><code>Strings are sequences of characters indexed by integer values. You can use the\nindexes to access the individual characters:\n&gt;&gt;&gt; 'foo bar'[0]  # 1st character\n'f'\n&gt;&gt;&gt; 'foo bar'[-1]  # last character\n'r'\n&gt;&gt;&gt; 'foo bar'[2:5]  # slice of characters\n'o b'\n&gt;&gt;&gt; \n</code></pre> <p>Strings have powerful formatting support:</p> <p>Using <code>str.format</code>:</p> <pre><code>&gt;&gt;&gt; '{} says {}'.format('Peter', 'hi')\n'Peter says hi'\n&gt;&gt;&gt; '{person} says {statement}'.format(person='Mary', statement='hey')\n'Mary says hey'\n&gt;&gt;&gt;\n</code></pre> <p>A bit more oldschool:</p> <pre><code>&gt;&gt;&gt; '%s says %s' % ('Paul', 'ho')\n'Paul says ho'\n</code></pre> <p>See https://pyformat.info/ for concise information on these topics.</p> <p>\"f-strings\" allow embedding expressions that get replaced with their values: <pre><code>&gt;&gt;&gt; name, says = 'Patti', 'yo'\n&gt;&gt;&gt; f'{name} says {says}'\n'Patti says yo'\n&gt;&gt;&gt; \n</code></pre></p> <p>Lesson: Hello, world</p> TaskHintsSolution <p>Starting out with</p> <pre><code>&gt;&gt;&gt; name = 'Ada'\n</code></pre> <p>modify <code>print(\"Hello, world!\")</code> so that it additionally writes out the name, in uppercase letters.</p> <p>Expected result: <code>Hello, world ADA!</code></p> <p>You can use <code>help(\"\")</code> or <code>help(name)</code> to find out about string methods and how to convert text to uppercase text.</p> Really take a peek now? hello_world.py<pre><code>name = 'ada'\nprint(f'Hello, world {name.upper()}')\n</code></pre> <p></p> <p>Such simple snippets typically also work well as shell one-liners:</p> hello_world.sh<pre><code>python3 -c \"name = 'ada'; print(f'Hello, world {name.upper()}')\"\n</code></pre> hello_world.ps1<pre><code>&amp; 'C:\\Program Files\\Python\\3.6\\python.exe' -c \"name = 'ada'; print(f'Hello, world {name.upper()}')\"\n</code></pre>"},{"location":"training/tutorial/tutorial/#numeric-data-types","title":"Numeric Data Types","text":"<p>Numeric data types represent numeric values. Python has the built-in numeric data types <code>int</code> and <code>float</code> that support the usual arithmetic operations.</p> <p><code>int</code> is used for integers or \"whole\" numbers:</p> <pre><code>&gt;&gt;&gt; 1\n1\n&gt;&gt;&gt; type(1)\n&lt;class 'int'&gt;\n</code></pre> <p>Some basic integer operations:</p> <pre><code>&gt;&gt;&gt; 1 + 2\n3\n&gt;&gt;&gt; (1 + 2) * 3\n9\n&gt;&gt;&gt; 2**5\n32\n&gt;&gt;&gt; \n</code></pre> <p>Fractional numbers are represented by <code>float</code>:</p> <pre><code>&gt;&gt;&gt; 1.2\n1.2\n&gt;&gt;&gt; type(1.2)\n&lt;class 'float'&gt;\n</code></pre> <p>Example <code>float</code> operations:</p> <pre><code>&gt;&gt;&gt; 1.1 + 1.2\n2.3\n&gt;&gt;&gt; (1.1 + 1.2) * 3.0\n6.8999999999999995\n&gt;&gt;&gt; 1.1**2\n1.2100000000000002\n&gt;&gt;&gt; \n</code></pre> <p>As you'll have noticed <code>float</code> is not an exact data type .</p> <p>If you need more accuracy than <code>float</code>  arithmetic supports the Python standard library also features a Decimal data type.</p> <p>Since Python 3.0 Python uses \"true division\". That means that integer division will result in float values:</p> <pre><code>&gt;&gt;&gt; 4 / 2\n2.0\n&gt;&gt;&gt; 3 / 2\n1.5\n</code></pre> <p>Depending on your needs you can also use \"floor\" division: <pre><code>&gt;&gt;&gt; 4 // 2\n2\n&gt;&gt;&gt; 3 // 2\n1\n&gt;&gt;&gt; \n</code></pre></p>"},{"location":"training/tutorial/tutorial/#lists-list","title":"Lists - <code>list</code>","text":"<p>A Python list is an array of unnamed objects of (potentially) different types.</p> <pre><code>&gt;&gt;&gt; [1, 'foo', 3.14]\n[1, 'foo', 3.14]\n&gt;&gt;&gt; type([1,'foo', 3.14])\n&lt;class 'list'&gt;\n</code></pre> <p>Similar to <code>str</code> list supports many useful sequence operations:</p> <pre><code>&gt;&gt;&gt; [1, 'foo', 3.14] # list of 3 elements\n[1, 'foo', 3.14]\n&gt;&gt;&gt; [1, 'foo', 3.14] + ['bar']\n[1, 'foo', 3.14, 'bar']\n&gt;&gt;&gt; type([1, 'foo', 3.14] + ['bar'])\n&lt;class 'list'&gt;\n&gt;&gt;&gt; len([1, 'foo', 3.14]) # get length of a list\n3\n&gt;&gt;&gt; l = [1, 'foo', 3.14]\n&gt;&gt;&gt; l[0]\n1\n&gt;&gt;&gt; l[-1]\n3.14\n&gt;&gt;&gt; l[0:1]\n[1]\n&gt;&gt;&gt; l[0:2]\n[1, 'foo']\n&gt;&gt;&gt; l[1:]\n['foo', 3.14]\n&gt;&gt;&gt; l.insert(2, 'bar')\n&gt;&gt;&gt; l\n[1, 'foo', 'bar', 3.14]\n&gt;&gt;&gt; l.pop()\n3.14\n&gt;&gt;&gt; l.index('foo')\n1\n&gt;&gt;&gt; del l[0]\n&gt;&gt;&gt; l\n['foo', 'bar']\n&gt;&gt;&gt; l[0] = 'bea'\n&gt;&gt;&gt; l\n['bea', 'bar']\n&gt;&gt;&gt; \n</code></pre> <p>Lesson: List Modification</p> TaskHintsSolution <p>Starting out with</p> <pre><code>&gt;&gt;&gt; l = ['Agathe', 'Bauer']\n</code></pre> <p>modify <code>l</code> by</p> <ul> <li>changing the 1st element to \"I've\"</li> <li>changing the 2nd lement to \"got\"</li> <li>extending l with a 3rd element \"the power\"</li> </ul> <p>in-place, i.e. not by creating a new list object from l.</p> <p>You can use <code>help([])</code> to see extensive documentation on <code>list</code> operations.</p> Really take a peek now? list_modification.py<pre><code># list_modification.py\nl = [\"Agathe\", \"Bauer\"]\nprint(f\"Original list: l = {l}\")\nl[0] = \"I've\"\nl[1] = \"got\"\nl.append(\"the power\")\nprint(f\"In-place modified list: l = {l}\")\n</code></pre> <p></p>"},{"location":"training/tutorial/tutorial/#tuples-tuple","title":"Tuples - <code>tuple</code>","text":"<p>Tuples are pretty similar to lists. They can store unnamed objects of different type but opposed to Python lists, they are unchangeable, i.e elements can't be inserted, substituted or removed:</p> <pre><code>&gt;&gt;&gt; (1, 'foo', 3.14)\n(1, 'foo', 3.14)\n&gt;&gt;&gt; type((1, 'foo', 3.14))\n&lt;class 'tuple'&gt;\n</code></pre> <p>Example tuple operations:</p> <pre><code>&gt;&gt;&gt; len((1, 'foo', 3.14)) # length of a tuple\n3\n&gt;&gt;&gt; l = (1, 'foo', 3.14)\n&gt;&gt;&gt; l[0]\n1\n&gt;&gt;&gt; l[-1]\n3.14\n&gt;&gt;&gt; l[0:2]\n(1, 'foo')\n&gt;&gt;&gt; l + (42, )  # create a new extended tuple by concatenation\n(1, 'foo', 3.14, 42)\n&gt;&gt;&gt; del l[0]\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object doesn't support item deletion\n&gt;&gt;&gt; l[0] = 'more'\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#dictionaries-dict","title":"Dictionaries - <code>dict</code>","text":"<p>Dictionaries are a nearly ubiquituous data type in Python. Dictionaries are a \"mapping\" data type storing key-value data:</p> <pre><code>&gt;&gt;&gt; {'name': 'Paul', 'age': 26, 'profession': 'author'}\n{'name': 'Paul', 'age': 26, 'profession': 'author'}\n&gt;&gt;&gt; type({'name': 'Paul', 'age': 26, 'profession': 'author'})\n&lt;class 'dict'&gt;\n&gt;&gt;&gt;\n</code></pre> <p>Example <code>dict</code> operations:</p> <pre><code>&gt;&gt;&gt; d = {'name': 'Paul', 'age': 26, 'profession': 'author'}\n&gt;&gt;&gt; d['name']\n'Paul'\n&gt;&gt;&gt; d['age'] = 27\n&gt;&gt;&gt; list(d.items())\n[('name', 'Paul'), ('age', 27), ('profession', 'author')]\n&gt;&gt;&gt; list(d.keys())\n['name', 'age', 'profession']\n&gt;&gt;&gt; list(d.values())\n['Paul', 27, 'author']\n&gt;&gt;&gt; del d['age']\n&gt;&gt;&gt; d\n{'name': 'Paul', 'profession': 'author'}\n&gt;&gt;&gt; d.popitem()\n('profession', 'author')\n&gt;&gt;&gt; d\n{'name': 'Paul'}\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#sets-set","title":"Sets - <code>set</code>","text":"<p>The Python <code>set</code> is a datatype similar to a mathematical set. It's a collection of unique objects, (potentially) of different types, and supports set operations like <code>union</code>, <code>intersection</code> and others.</p> <pre><code>&gt;&gt;&gt; {1, 2, 'foo'}\n{1, 2, 'foo'}\n&gt;&gt;&gt; set([1, 2, 'foo'])  # create set from a list\n{1, 2, 'foo'}\n&gt;&gt;&gt; set((1, 2,'foo'))  # create set from a tuple\n{1, 2, 'foo'}\n&gt;&gt;&gt; type({1, 2, 'foo'})\n&lt;class 'set'&gt;\n&gt;&gt;&gt; \n</code></pre> <p><code>set</code>-example</p> <pre><code>&gt;&gt;&gt; set([1, 2, 'foo', 'foo'])  # set from a list with a duplicate element\n{1, 2, 'foo'}\n&gt;&gt;&gt; set([1, 2,'foo']) &amp; set([1, 2]) # intersection of 2 sets using '&amp;'-operator\n{1, 2}\n&gt;&gt;&gt;\n&gt;&gt;&gt; {1, 2, 3}.difference({1, 2})\n{3}\n&gt;&gt;&gt; {1, 2, 3}.union({1, 2, 4})\n{1, 2, 3, 4}\n&gt;&gt;&gt; {1, 2, 3}.intersection({1, 2, 4})\n{1, 2}\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#none-none","title":"None - <code>None</code>","text":"<p>The Python <code>None</code> type is a built-in constant and frequently used as a \"null\"-object to denote the absence of a value.</p> <p>A very common use is as a default function argument.</p> <pre><code>&gt;&gt;&gt; None\n&gt;&gt;&gt; type(None)\n&lt;class 'NoneType'&gt;\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/tutorial/tutorial/#boolean-bool","title":"Boolean <code>bool</code>","text":"<p>The Python <code>bool</code> type has two built-in constants named <code>False</code> and <code>True</code>:</p> <pre><code>&gt;&gt;&gt; True\nTrue\n&gt;&gt;&gt; type(True)\n&gt;&gt;&gt; &lt;class 'bool'&gt;\n&gt;&gt;&gt; \n</code></pre> <p>Historically, <code>bool</code> is derived from int:</p> <pre><code>&gt;&gt;&gt; True + 1\n2\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/tutorial/tutorial/#input-and-output","title":"Input and Output","text":"<p>Programs serve a purpose, they follow the IPO-model: Input - Processing - Output</p> <p>Programs consume information (input), do some work (based on that input) and produce information (output).  The input-side information can be 'raw data' or 'commands' (which tell the program what to do with the data). The output-side information can be 'computed data' or simple 'status information' describing the state of (individual) processing steps.</p> <p>Programs can consume and produce information from and to different channels. One kind of these channels is referred to as 'standard-input'/'standard-output' enabling a user to interactively provide input to and retrieve output from a program.</p> <p>In Python the builtin-functions <code>input()</code> and <code>print()</code> perform these basic tasks.</p> <p>Input-Example</p> <p><pre><code>&gt;&gt;&gt; # just echo the input\n&gt;&gt;&gt; input('Please enter your name: ')\nPlease enter your name: Donald\n'Donald'\n&gt;&gt;&gt;\n</code></pre>   or:</p> <pre><code>&gt;&gt;&gt; # store the input\n&gt;&gt;&gt; name = input('Please enter your name: ')\nPlease enter your name: Donald\n&gt;&gt;&gt; \n</code></pre> <p>Output-Example</p> <pre><code>&gt;&gt;&gt; # print the stored input\n&gt;&gt;&gt; print('Hello %s' % name)\nHello Donald\n&gt;&gt;&gt; \n</code></pre> <p>Combined Input/Output Example</p> <pre><code>&gt;&gt;&gt; print('Hello %s' % input('Please enter your name: '))\nPlease enter your name: Donald\nHello Donald\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/tutorial/tutorial/#control-flow","title":"Control Flow","text":"<p>Wikipedia describes control flow as follows:</p> <p>\"In computer science, control flow (or flow of control) is the order in which individual statements, instructions or function calls of an imperative program are executed or evaluated. The emphasis on explicit control flow distinguishes an imperative programming language from a declarative programming language.\"</p> <p>Python provides two kinds of 'explicit controls' affecting the order of execution:</p> <ol> <li>Choices</li> <li>Loops</li> </ol>"},{"location":"training/tutorial/tutorial/#choices","title":"Choices","text":"<p>Choices are conditional controls, affecting the branches of execution according to a boolean condition.</p>"},{"location":"training/tutorial/tutorial/#if-statements","title":"if-statements","text":"<p>Python provides different variations of <code>if</code>-statements:</p> <p>Simple <code>if</code> - example:</p> <pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; if a == 1:\n...     print('a is 1')\n... \na is 1\n&gt;&gt;&gt; \n</code></pre> <p><code>if-elif</code> - example:</p> <pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; if a == 1:\n...     print('a is 1')\n... elif a == 2:\n...     print('a is 2')\n... \na is 2\n&gt;&gt;&gt;\n</code></pre> <p><code>if-elif-else</code> - example:</p> <pre><code>&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; if a == 1:\n...     print('a is 1')\n... elif a == 2:\n...     print('a is 2')\n... else:\n...     print('a is neither 1 nor 2')\n... \na is neither 1 nor 2\n&gt;&gt;&gt;\n</code></pre> <p>Lesson: Check User Input Evenness</p> TaskHintsSolution <p>Create a small Python program that reads an integer value from user input and prints if the input value is even or odd.</p> <p>Find out about the modulo operator or the <code>divmod(...)</code> built-in function.</p> <p>Remember that the <code>input()</code> function returns text - to use number operations you will need to convert the resulting user input to an <code>int</code>.</p> Really take a peek now? check_even.py<pre><code># check_even.py\n# Retrieve input from the user.\nnumber = int(input('number: '))\n# a mod b is a % b in Python.\nif (number % 2 == 0):\nprint(f\"The input value {number} is even.\")\nelse:\nprint(f\"The input value {number} is odd.\")\n</code></pre> <p></p>"},{"location":"training/tutorial/tutorial/#conditional-expressions","title":"Conditional Expressions","text":"<p>Python also supports Conditional expressions:</p> <pre><code>&gt;&gt;&gt; 1 if True else 0\n1\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#loops","title":"Loops","text":"<p>Loops are repetitive controls, affecting the number of iterations a code block is executed.</p>"},{"location":"training/tutorial/tutorial/#for-statement","title":"for Statement","text":"<p>The Python <code>for</code> statement is a representative of what Wikipedia calls a count-controlled-loop. The number of repetitions in a <code>for</code> loop is defined by the number elements of a (probably dynamically generated) sequence.</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; for elem in [1, 2, 3]:  # number of elements in the list defines the number of repetitions\n...     print(elem)\n... \n1\n2\n3\n&gt;&gt;&gt;\n</code></pre> <p><code>for</code> loops operate on iterables.</p>"},{"location":"training/tutorial/tutorial/#while-statement","title":"while Statement","text":"<p>The Python <code>while</code> statement is a representative of what Wikipedia calls a condition-controlled-loop. In a <code>while</code> loop a condition variable is usually set before and changed within the <code>while</code> loop. </p> <p>Example:</p> <pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; while a &lt; 4:\n...     print(a)\n...     a += 1   # change the condition variable\n... \n1\n2\n3\n&gt;&gt;&gt;\n</code></pre>"},{"location":"training/tutorial/tutorial/#functions","title":"Functions","text":"<p>Functions are named code blocks providing a dedicated task (procedure) or \"calculation\" (function). Functions can have input parameters and return values, i.e. result values returned to the caller.</p> <p>A function is defined using the <code>def</code> statement:</p> <pre><code>&gt;&gt;&gt; # function definition\n&gt;&gt;&gt; def echo(text):   # (1) function header\n...    # (2) function body\n...    print(text)    # 1.st statement\n...\n&gt;&gt;&gt;\n</code></pre> <p>A function definition consists of (1) a function-header and (2) a function body. The function header begins with the <code>def</code> keyword followed by the function name and a (potentially empty) list of comma-separated input parameters in parentheses, followed by a colon <code>:</code>.</p> <p>The function body consists of an indented code-block of statements. In an interactive session the <code>...</code> ellipsis show that a (multi-line) code block is ongoing.</p> <p>A function is called simply using its function name followed by a list of comma-separated call arguments in parentheses:</p> <pre><code>&gt;&gt;&gt; # function call (positional arguments)\n&gt;&gt;&gt; echo(\"Hello, world!\")\nHello, world!\n&gt;&gt;&gt;\n</code></pre> <p>Functions can also be called using named (or keyword) arguments:</p> <pre><code>&gt;&gt;&gt; # function call (named or keyword arguments)\n&gt;&gt;&gt; echo(text=\"Hello, world!\")\nHello, world!\n&gt;&gt;&gt;\n</code></pre> <p>Functions can return values and function parameters can have default arguments:</p> <pre><code>&gt;&gt;&gt; def greeting(name, greet=\"Hello\"):\n...     return greet + \" \" + name\n...\n&gt;&gt;&gt; greets = greeting(\"Mick\")  # Using the default greet text.\n&gt;&gt;&gt; greets  # the returned value\n'Hello Mick'\n&gt;&gt;&gt; greets = greeting(\"Elvis\", greet=\"Calling\")  # Prefer a custom greet text.\n&gt;&gt;&gt; greets  # the returned value\n'Calling Elvis'\n&gt;&gt;&gt;\n</code></pre> <p>A function without an explicit return statements implicitly returns <code>None</code>:</p> <pre><code>&gt;&gt;&gt; echo_return_value = echo(\"Hello, world!\")\nHello, world!\n&gt;&gt;&gt; print(echo_return_value)\nNone\n&gt;&gt;&gt;\n</code></pre> <p>Functions can be called repeatedly and therefore are an essential building block of reusable code in programming languages.</p> <p>Lesson: Add Function</p> TaskHintsSolution <p>Create a Python program that repeatedly</p> <ul> <li>reads 2 float values from the user</li> <li>adds the 2 input values and</li> <li>prints the resulting sum value</li> </ul> <p>until the user interrupts the program with <code>Ctrl-c</code>.</p> <p>To add the 2 int numbers create a custom <code>add(x, y)</code> function that you call to perform the addition.</p> <p>Optional: After printing the sum value, ask the user if she wants to continue. If not, print \"Goodbye!\" and end the program.</p> <p>Remember that the <code>input()</code> function returns text - to use number operations you will need to convert the resulting user input to a <code>float</code>: <code>float(input_text)</code>.</p> <p>Your program output could look like this:</p> <pre><code>python add-function/add_function.py \n\nPlease enter number x: 3\nPlease enter number y: 4\nThe sum of x and y is 7.0.\nDo you want to continue (y/n)? [y] n\nGoodbye!\n</code></pre> Really take a peek now? add_function.py<pre><code># add_function.py\ndef add(x, y):\n\"\"\"Add x and y and return the result.\n    \"\"\"\nreturn x + y\ndef ask_user_input():\n\"\"\"Read 2 float values x and y from user input and return the tuple (x, y).\n    \"\"\"\nprint()\nx = float(input('Please enter number x: '))\ny = float(input('Please enter number y: '))\nreturn (x, y)\nwhile True:\nx, y = ask_user_input()\ncalculated_sum = add(x, y)\nprint(f'The sum of x and y is {calculated_sum}.')\n# Read user input, strip leading and trailing whitespace and convert the\n# text to lowercase for normalization.\nproceed = input('Do you want to continue (y/n)? [y] ').strip().lower()\n# If the user just pressed Enter without entering a value we default to\n# 'y'.\nproceed = 'y' if len(proceed) == 0 else proceed\nif proceed != 'y':\n# Break out of the loop - user does not want to continue.\nbreak\nprint('Goodbye!')\n</code></pre> <p></p>"},{"location":"training/tutorial/tutorial/#classes-and-instances","title":"Classes and Instances","text":"<p>Python allows user-defined data types called classes. Classes are type definitions which include data - so called attributes - and methods - functions that define the type-specific behaviour. Instances are objects created from classes.</p> <p>The following example demonstrates a simple <code>class</code>-definition, class instantiations and common operations on class instances like attribute access and method call using the <code>.</code>-dot operator.</p> <p>class definition:</p> <pre><code>&gt;&gt;&gt; class MyDog:\n...     def __init__(self, name):   # class constructor\n...         self.name = name        # instance attribute\n...     def bark(self):             # instance method\n...         print(f\"{self.name} says wuff\")\n... \n&gt;&gt;&gt; \n</code></pre> <p>class instances and attribute/method access:</p> <pre><code>&gt;&gt;&gt; my_dog = MyDog(\"Django\")  # create class instance\n&gt;&gt;&gt; my_dog.name               # access instance attribute with '.'-dot operator\n'Django'\n&gt;&gt;&gt; my_dog.bark()             # call instance method using '.'-dot operator\nDjango says wuff\n&gt;&gt;&gt;\n</code></pre> <p>Lesson: Classy Animals</p> TaskHintsSolution <p>Create a new empty Python source file and copy the \"MyDog\" example class to it. Add a new method <code>speak</code> that calls the existing method <code>bark</code>.</p> <p>Here's the <code>MyDog</code> class, again:</p> <pre><code>class MyDog:\ndef __init__(self, name):\nself.name = name\ndef bark(self):\nprint(f\"{self.name} says wuff\")\n</code></pre> <p>Then, create a new class <code>MyCat</code> in the same file that - like <code>MyDog</code> - also expects a <code>name</code> argument in its <code>__init__</code> method, with those 2 additional methods:</p> <ul> <li>a method <code>meow</code> that prints the string \"{MyCat name} says miau\" where   {MyCat name} is the <code>name</code> attribute of the instance object</li> <li>a method <code>speak</code> that calls the <code>meow</code> method.</li> </ul> <p>Create an <code>animals</code> list containing a <code>MyDog</code> and a <code>MyCat</code> instance.</p> <p>Loop over the animals list. For each animal, invoke the <code>speak()</code> method.</p> <p>Optional: Enhance the <code>MyDog</code> and <code>MyCat</code> classes' methods to accept an optional <code>text</code> argument. Modify the <code>MyDog.bark</code> and the <code>MyCat.meow</code> methods to additionally print the animal's class name and the <code>text</code> argument, e.g. like</p> <pre><code>&gt;&gt;&gt; my_cat = MyCat(\"Amanda\")\n&gt;&gt;&gt; my_cat.speak(text=\"a lot\")\n\"MyCat Amanda says miau a lot\".\n&gt;&gt;&gt;\n</code></pre> <p>When defining a method in a class remember that each method must have a <code>self</code> parameter as the 1st positional parameter.</p> <p>You can get an instance's class by retrieving its <code>__class__</code> attribute. The name of a class object can be found in the class' <code>__name__</code> attribute, e.g.</p> <pre><code>&gt;&gt;&gt; # Get the name of the MyDog class object.\n&gt;&gt;&gt; MyDog.__name__\n'MyDog'\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Get the name of a MyDog instance's class object.\n&gt;&gt;&gt; MyDog(\"Lucie\").__class__.__name__  # Get the name of a MyDog\n'MyDog'\n</code></pre> <p>Inside of a method, a class or instance attribute can be accessed through the self parameter (which references the instance object).</p> Really take a peek now? classy_animals.py<pre><code># classy_animals.py\nclass MyDog:\n\"\"\"A dog class.\n    \"\"\"\ndef __init__(self, name):\nself.name = name\ndef bark(self, text=\"\"):\n\"\"\"Make my dog bark.\n        Args:\n            text (str): A barkable output text\n        \"\"\"\noutput = f\"{self.name} says wuff\"\nif text:\noutput += ' ' + text\nprint(output)\ndef speak(self, text=\"\"):\n\"\"\"Make my dog speak in dog lingo.\n        Args:\n            text (str): A dog speak output text\n        \"\"\"\nreturn self.bark(text=text)\nclass MyCat:\n\"\"\"A cat class.\n    \"\"\"\ndef __init__(self, name):\nself.name = name\ndef meow(self, text=\"\"):\n\"\"\"Make my cat meow.\n        Args:\n            text (str): A meowable output text\n        \"\"\"\noutput = f\"{self.name} says miau\"\nif text:\noutput += \" \" + text\nprint(output)\ndef speak(self, text=\"\"):\n\"\"\"Make my cat speak in cat lingo.\n        Args:\n            text (str): A cat speak output text\n        \"\"\"\nreturn self.meow(text=text)\nanimals = [MyDog(\"Django\"), MyCat(\"Amanda\")]\nfor animal in animals:\nanimal.speak(\"a lot\")\n</code></pre> <p></p>"},{"location":"training/tutorial/tutorial/#exceptions","title":"Exceptions","text":"<p>Python uses exceptions to communicate invalid (or impossible) operations aka runtime errors:</p> <pre><code>&gt;&gt;&gt; 1 + \"1\"\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n</code></pre> <p>Such exceptions can be caught and handled:</p> <pre><code>&gt;&gt;&gt; try:\n...     myfile = open('myfile.txt', 'r')\n... except FileNotFoundError as exc:\n...     print('caught', exc)\n...     # ... (do some sensible handling of this situation here)\n... \ncaught [Errno 2] No such file or directory: 'myfile.txt'\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#modules-packages","title":"Modules &amp; Packages","text":"<p>In addition to Python's built-ins, standard library and 3rd party libraries can be used through Python's import mechanism:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.listdir()\n['README.md', '.git', '.gitignore', 'LICENSE', 'mkdocs.yml', 'docs', '.github',\n'site']\n&gt;&gt;&gt; \n</code></pre> <p>You can modularize your own code using modules (files) and packages (directories of module files):</p> <pre><code># mymodule.py\ndef myfunc(arg):\n\"\"\"Return the answer to all questions.\n    \"\"\"\nprint(arg)\nreturn 42\n</code></pre> <p>Now you can reuse this functionality:</p> <pre><code>&gt;&gt;&gt; import mymodule\n&gt;&gt;&gt; mymodule.myfunc(\"I just called\")\nI just called\n42\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#generators","title":"Generators","text":"<p>A callable that doesn't return a single value but generates - possibly unlimited - values is called a generator. Generators yield values instead of returning values:</p> <pre><code>&gt;&gt;&gt; def gen(limit=-1):\n...     if limit &lt; 0:\n...         val = 0\n...         while True:\n...             yield val\n...             val += 1\n...     else:\n...         for val in range(limit):\n...             yield val\n... \n&gt;&gt;&gt; for i in gen(5):\n...     print(i)\n... \n0\n1\n2\n3\n4\n</code></pre> <p>For memory efficiency, these generated values are created on demand, in each iteration step, as opposed to pre-populating e.g. a large list.</p> <p>Essentially, a generator's  processing gets suspended when <code>yield</code>ing (and resumed later, to get at next yield values).</p> <p>A generator function can delegate to other generators using the <code>yield from</code> expression:</p> <pre><code>&gt;&gt;&gt; def gen_func():\n...     for value in range(5):\n...         yield value\n... \n&gt;&gt;&gt; def other_gen_func():\n...     yield from gen_func()\n... \n&gt;&gt;&gt; for i in other_gen_func():\n...     print(i)\n... \n0\n1\n2\n3\n4\n&gt;&gt;&gt; \n</code></pre> <p>Lesson: Generate even and odd numbers</p> TaskHintsSolution <p>Write a generator that yields even natural numbers [1, 2, 3, ...] infinitely, i.e.  until interrupted with <code>Ctrl-c</code>.</p> <p>Optional: Write a generator that yields even or uneven numbers, depending on a parameter that switches even/uneven behaviour.</p> <p>Optional: Write a generator that yields even or uneven numbers (switchable) up to an upper limit.</p> <p>Remember the </p> <ul> <li>loop control flow constructs (for-loop, while-loop) that can be used   to do repeating things,</li> <li>conditionals (if-elif-else) to decide which \"code paths\" or   \"branches\" should be executed and</li> <li>(maybe) the modulo operator or the <code>divmod()</code> built-in function for a   possibility to check if a number is even or not.</li> </ul> <p>There are many ways to solve this task... </p> Really take a peek now? generate_numbers.py<pre><code>def gen_even():\n\"\"\"Generate even natural numbers, undefinitely.\n    \"\"\"\ni = 1\nwhile True:\nif i % 2 == 0:\nyield i\ni += 1\ndef gen_uneven():\n\"\"\"Generate even natural numbers, undefinitely.\n    \"\"\"\ni = 1\nwhile True:\nif i % 2 != 0:\nyield i\ni += 1\ndef gen_even_lim(upper_limit=-1):\n\"\"\"Generate even natural numbers, up to max upper limit, or undefinitely if\n    max &lt; 1.\n    \"\"\"\nfor i in gen_even():\nif i &gt; upper_limit:\nbreak\nyield i\ndef gen_uneven_lim(upper_limit=-1):\n\"\"\"Generate uneven natural numbers, up to max upper limit, or undefinitely\n    if max &lt; 1.\n    \"\"\"\nfor i in gen_uneven():\nif i &gt; upper_limit:\nbreak\nyield i\ndef gen_numbers(mode=\"even\"):\n\"\"\"Generate even or uneven natural numbers, undefinitely.\n    \"\"\"\nif mode == \"even\":\nreturn gen_even()\nelif mode == \"uneven\":\nreturn gen_uneven()\nelse:\nraise ValueError(f\"mode '{mode}' is not supported, use {even, uneven}\")\ndef gen_numbers_lim(mode=\"even\", upper_limit=-1):\n\"\"\"Generate even or uneven natural numbers up to max upper limit, or\n    undefinitely if max &lt; 1.\n    \"\"\"\nif mode == \"even\":\nreturn gen_even_lim(upper_limit)\nelif mode == \"uneven\":\nreturn gen_uneven_lim(upper_limit)\nelse:\nraise ValueError(f\"mode '{mode}' is not supported, use {even, uneven}\")\ndef main():\n# Run unlimited generator, but break out after a limit (checked outside of\n# the generator). In the REPL you'd interrupt the generator using Ctrl-c.\ngenerator = gen_even\nprint()\nprint(f\"*** Generator: {generator.__name__}\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator():\nif val &gt; 10:\nprint(\"...interrupting (use Ctrl-c when running in REPL)\")\nbreak\nprint(f\"even: {val}\")\n# Run even/uneven-switchable unlimited generator in \"even\" mode, but break\n# out after a limit (checked outside of the generator). In the REPL you'd\n# interrupt the generator using Ctrl-c.\ngenerator = gen_numbers\nprint()\nmode = \"even\"\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}')\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode):\nif val &gt; 10:\nprint(\"...interrupting (use Ctrl-c when running in REPL)\")\nbreak\nprint(f\"even: {val}\")\n# Run even/uneven-switchable unlimited generator in \"even\" mode, but break\n# out after a limit.\nprint()\nmode = \"uneven\"\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}')\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode):\nif val &gt; 10:\nprint(\"...interrupting (use Ctrl-c when running in REPL)\")\nbreak\nprint(f\"uneven: {val}\")\n# Run even/uneven-switchable limited generator in \"even\" mode with an upper\n# limit of 5.\ngenerator = gen_numbers_lim\nprint()\nmode = \"even\"\nlimit = 5\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}', limit={limit})\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode=mode, upper_limit=limit):\nprint(f\"even: {val}\")\n# Run even/uneven-switchable limited generator in \"uneven\" mode with an\n# upper limit of 5.\nprint()\nmode = \"uneven\"\nlimit = 5\nprint(f\"*** Generator: {generator.__name__}(mode='{mode}', limit={limit})\")\nprint(f\"({generator.__doc__.strip()})\")\nfor val in generator(mode=mode, upper_limit=limit):\nprint(f\"uneven: {val}\")\nif __name__ == \"__main__\":\n# If this program is invoked as the main program, as opposed to being\n# imported, run the main function.\nmain()\n</code></pre> <p></p>"},{"location":"training/tutorial/tutorial/#comprehensions-and-generator-expressions","title":"Comprehensions and Generator Expressions","text":""},{"location":"training/tutorial/tutorial/#list-comprehensions","title":"List Comprehensions","text":"<p>List comprehensions are an elegant and powerful feature to populate lists using a syntax that very much feels like a mathematical set notation:</p> <pre><code>&gt;&gt;&gt; import os  # operating system (OS) routines\n&gt;&gt;&gt; dirs = [entry for entry in os.listdir() if os.path.isdir(entry)]\n&gt;&gt;&gt; dirs\n['.git', 'docs', '.github', 'site']\n&gt;&gt;&gt; \n</code></pre> <p>Compare this to a \"traditional\" <code>for</code> loop solution:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; dirs = []\n&gt;&gt;&gt; for entry in os.listdir():\n...     if os.path.isdir(entry):\n...         dirs.append(entry)\n...\n&gt;&gt;&gt; dirs\n['includes', 'docs', '.git', '.github']\n&gt;&gt;&gt; \n</code></pre>"},{"location":"training/tutorial/tutorial/#generator-expressions","title":"Generator Expressions","text":"<p>Similarly, one can use generator expressions that do not pre-populate a data structure but yield elements on demand:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; generate_dirs = (entry for entry in os.listdir() if os.path.isdir(entry))\n&gt;&gt;&gt; generate_dirs\n&lt;generator object &lt;genexpr&gt; at 0x7fc61861de60&gt;\n&gt;&gt;&gt; list(generate_dirs)\n['.git', 'docs', '.github', 'site']\n&gt;&gt;&gt; list(generate_dirs)  # watch out: the generator has been \"exhausted\"\n[]\n</code></pre>"},{"location":"training/tutorial/tutorial/#dict-comprehensions","title":"Dict comprehensions","text":"<p>A dict comprehension can be used to create a dictionary:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; {entry: 'link' if os.path.islink(entry) else\n...         'dir' if os.path.isdir(entry) else\n...         'file' if os.path.isfile(entry) else\n...         'other'\n...  for entry in os.listdir()}\n{'README.md': 'file', '.git': 'dir', '.gitignore': 'file', 'LICENSE': 'file',\n'mkdocs.yml': 'file', 'docs': 'dir', '.github': 'dir', 'site': 'dir'}\n&gt;&gt;&gt; \n</code></pre> <p>Lesson: Rewrite dict comprehension</p> TaskHintsSolution <p>Rewrite the dict comprehension</p> <pre><code>dct = {\nentry:\n'link' if os.path.islink(entry) else\n'dir' if os.path.isdir(entry) else\n'file' if os.path.isfile(entry) else\n'other'\nfor entry in os.listdir()\n}\n</code></pre> <p>using a \"traditional\" for loop and if-else statements.</p> <p>Use <code>help(os.listdir)</code> for more information about this standard library function.</p> <p>This site's repo contains a test directory with some typical (unix) file types (symbolic link, directory, file) in the <code>/docs/training/lessons/rewrite-dict-comprehension/test_dir</code> folder.</p> <p>Some notes:</p> <ul> <li>isfile() and isdir() follow symbolic links, so they will return their   link target file type. Thus, the islink() condition must come first   to actually detect a link file type.</li> <li>Windows: no symlinks, a checked-out link from the test_dir is   represented as a file and thus recognized as 'file'</li> </ul> Really take a peek now? rewrite_dict_comprehension.py<pre><code>import os\nimport pprint\n# Notes:\n# - isfile() and isdir() follow symbolic links, so they will return their link\n#   target file type. Thus, the islink() condition must come first to actually\n#   detect a link file type.\n# - Windows: no symlinks, a checked-out link from the test_dir is represented\n#   as a file and thus recognized as 'file'\ndef dict_comp_filetypes_cwd():\n\"\"\"Return a {&lt;path entry&gt;: &lt;file type} dictionary of the current working\n    directory.\n    Uses a dict comprehension.\n    \"\"\"\ndct = {\nentry:\n'link' if os.path.islink(entry) else\n'dir' if os.path.isdir(entry) else\n'file' if os.path.isfile(entry) else\n'other'\nfor entry in os.listdir()\n}\nreturn dct\ndef dict_comp_filetypes(path='.'):\n\"\"\"Return a {&lt;path entry&gt;: &lt;file type} dictionary of the given path.\n    Uses a dict comprehension.\n    \"\"\"\n# To avoid joining path + entry to the full path both for the dict key and\n# in the value's if-else expression, we (ab)use the walrus operator.\n# This *must* sit in the if condition part of the dict comprehension.\n# \n# Feels a tiny bit hacky, without walrus it looks like this:\n# \n# dct = {\n#   os.path.join(path, entry):\n#       'link' if os.path.islink(os.path.join(path, entry)) else\n#       'dir' if os.path.isdir(os.path.join(path, entry)) else\n#       'file' if os.path.isfile(os.path.join(path, entry)) else\n#       'other'\n#   for entry in os.listdir(path)\n#   }\ndct = {\nfile_path:\n'link' if os.path.islink(file_path) else\n'dir' if os.path.isdir(file_path) else\n'file' if os.path.isfile(file_path) else\n'other'\nfor entry in os.listdir(path)\nif (file_path := os.path.join(path, entry))\n}\nreturn dct\ndef for_loop_filetypes(path='.'):\n\"\"\"Return a {&lt;path entry&gt;: &lt;file type} dictionary of the given path.\n    Uses a traditional for loop.\n    \"\"\"\ndct = {}\nfor entry in os.listdir(path):\nfile_path = os.path.join(path, entry)\nif os.path.islink(file_path):\nfile_type = 'link'\nelif os.path.isdir(file_path):\nfile_type = 'dir'\nelif os.path.isfile(file_path):\nfile_type = 'file'\nelse:\nfile_typ = 'other'\ndct[file_path] = file_type\nreturn dct\ndef main(path):\nfunc = dict_comp_filetypes_cwd\nprint(f'\\n*** dict comprehension using {func.__name__}')\ndct = func()\npprint.pprint(dct)\nfunc = dict_comp_filetypes\nprint(f'\\n*** dict comprehension using {func.__name__}(path={path})')\ndct = func(path)\npprint.pprint(dct)\nfunc = for_loop_filetypes\nprint(f'\\n*** dict comprehension using {func.__name__}(path={path})')\ndct = func(path)\npprint.pprint(dct)\nif __name__ == '__main__':\nmain(path='./test_dir')\n</code></pre> <p></p>"}]}